{"BEFORE":"        self.AAD1 = AADLayer(cin, c_attr, c_id)\n        self.conv1 = nn.Conv2d(cin, cin, kernel_size=3, stride=1, padding=1, bias=False)\n        self.relu1 = nn.ReLU(inplace=True)\n\n        self.AAD2 = AADLayer(cin, c_attr, c_id)\n        self.conv2 = nn.Conv2d(cin, cout, kernel_size=3, stride=1, padding=1, bias=False)\n        self.relu2 = nn.ReLU(inplace=True)\n\n        if cin != cout:\n            self.AAD3 = AADLayer(cin, c_attr, c_id)\n            self.conv3 = nn.Conv2d(cin, cout, kernel_size=3, stride=1, padding=1, bias=False)\n            self.relu3 = nn.ReLU(inplace=True)\n","AFTER":"    def __init__(self, cin, cout, c_attr, c_id, num_blocks):\n        super(AAD_ResBlk, self).__init__()\n        self.cin = cin\n        self.cout = cout\n        \n        add_blocks = []\n        for i in range(num_blocks):\n            out = cin if i < (num_blocks-1) else cout\n            add_blocks.extend([AADLayer(cin, c_attr, c_id),\n                               nn.ReLU(inplace=True),\n                               nn.Conv2d(cin, out, kernel_size=3, stride=1, padding=1, bias=False)\n                              ])\n        self.add_blocks = AddBlocksSequential(*add_blocks)\n        \n        if cin != cout:\n            last_add_block = [AADLayer(cin, c_attr, c_id), \n                             nn.ReLU(inplace=True), \n                             nn.Conv2d(cin, cout, kernel_size=3, stride=1, padding=1, bias=False)]\n            self.last_add_block = AddBlocksSequential(*last_add_block)\n"}