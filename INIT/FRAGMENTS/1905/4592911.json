{"BEFORE":"        in_channels, out_channels, kernel_size, style_dim, stride=1, padding=0, upsample=True\n    ):\n        super().__init__()\n\n        self.upsample = UpsampleBlur() if upsample else upsample\n        self.conv = EqualizedModulatedConv2d(\n            in_channels, out_channels, kernel_size, style_dim,\n            stride=stride, padding=padding, demod=True\n        )\n        self.scale_noise = ScaleNoise()\n        self.activation = FusedLeakyReLU(out_channels)\n","AFTER":"        in_channels, out_channels, style_dim, num_conv=2, up_name='bilinear'\n    ):\n        super().__init__()\n        self.block = nn.ModuleList([\n            Upsample2x(up_name),\n            Blur2d(),\n            ModulatedConv2d(in_channels, out_channels, style_dim, 3),\n            InjectNoise(),\n            nn.LeakyReLU(0.2, inplace=True)\n        ])\n        for _ in range(num_conv-1):\n            self.block.extend([\n                ModulatedConv2d(out_channels, out_channels, style_dim, 3),\n                InjectNoise(),\n                nn.LeakyReLU(0.2, inplace=True)\n            ])\n    def forward(self, x, y):\n"}