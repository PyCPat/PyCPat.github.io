{"BEFORE":"\t\tself.device = device\n\t\tself.hidden_size = args['hidden_size']\n\t\tself.num_units = args['num_units']\n\t\tself.rnn_cell = args['rnn_cell']\n\t\tself.key_size = args['key_size_input']\n\t\tself.args = args\n\t\tself.k = args['k']\n\t\tself.key = nn.Linear(args['input_size'], args['num_input_heads'] * args['query_size_input'])\n\t\tself.value = nn.Linear(args['input_size'], args['num_input_heads'] * args['value_size_input'])\n\n\t\tif self.rnn_cell == 'GRU':\n\t\t\tself.rnn = [nn.GRUCell(args['value_size_input'], args['hidden_size']).to(self.device) for _ in range(args['num_units'])]\n\t\t\tself.query = [nn.Linear(args['hidden_size'], args['key_size_input'] * args['num_input_heads']).to(device) for _ in range(args['num_units'])]\n\t\telse:\n\t\t\tself.rnn = [nn.LSTMCell(args['value_size_input'], args['hidden_size']).to(self.device) for _ in range(args['num_units'])]\n\t\t\tself.query = [nn.Linear(args['hidden_size'], args['key_size_input'] * args['num_input_heads']).to(device) for _ in range(args['num_units'])]\n\t\tself.query_ = [nn.Linear(args['hidden_size'], args['query_size_comm'] * args['num_comm_heads']).to(self.device) for _ in range(args['num_units'])]\n\t\tself.key_ = [nn.Linear(args['hidden_size'], args['key_size_comm'] * args['num_comm_heads']).to(self.device) for _ in range(args['num_units'])]\n\t\tself.value_ = [nn.Linear(args['hidden_size'], args['value_size_comm'] * args['num_comm_heads']).to(self.device) for _ in range(args['num_units'])]\n","AFTER":"\t\tself.device = device\n\t\tself.hidden_size = args['hidden_size']\n\t\tself.num_units = args['num_units']\n\t\tself.rnn_cell = args['rnn_cell']\n\t\tself.key_size = args['key_size_input']\n\t\tself.args = args\n\t\tself.k = args['k']\n\t\tself.key = nn.Linear(args['input_size'], args['num_input_heads'] * args['query_size_input']).to(self.device)\n\t\tself.value = nn.Linear(args['input_size'], args['num_input_heads'] * args['value_size_input']).to(self.device)\n\n\t\tif self.rnn_cell == 'GRU':\n\t\t\tself.rnn = nn.ModuleList([nn.GRUCell(args['value_size_input'], args['hidden_size']) for _ in range(args['num_units'])])\n\t\t\tself.query = nn.ModuleList([nn.Linear(args['hidden_size'], args['key_size_input'] * args['num_input_heads']) for _ in range(args['num_units'])])\n\t\telse:\n\t\t\tself.rnn = nn.ModuleList([nn.LSTMCell(args['value_size_input'], args['hidden_size']) for _ in range(args['num_units'])])\n\t\t\tself.query = nn.ModuleList([nn.Linear(args['hidden_size'], args['key_size_input'] * args['num_input_heads']) for _ in range(args['num_units'])])\n\t\tself.query_ = nn.ModuleList([nn.Linear(args['hidden_size'], args['query_size_comm'] * args['num_comm_heads']) for _ in range(args['num_units'])])\n\t\tself.key_ = nn.ModuleList([nn.Linear(args['hidden_size'], args['key_size_comm'] * args['num_comm_heads']) for _ in range(args['num_units'])])\n\t\tself.value_ = nn.ModuleList([nn.Linear(args['hidden_size'], args['value_size_comm'] * args['num_comm_heads']) for _ in range(args['num_units'])])\n\t\tself.comm_attention_output = nn.ModuleList([nn.Linear(args['num_comm_heads'] * args['value_size_comm'], args['value_size_comm']) for _ in range(args['num_units'])])\n\t\tself.comm_dropout = nn.Dropout(p =0.1)\n\t\tself.input_dropout = nn.Dropout(p =0.1)\n"}