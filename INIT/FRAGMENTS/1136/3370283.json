{"BEFORE":"        base_filter = 64\n        kernel_size = 3\n        reduction = 16\n        \n        # RGB mean for DIV2K\n        # rgb_mean = (0.4488, 0.4371, 0.4040)\n        # rgb_std = (1.0, 1.0, 1.0)\n        # self.sub_mean = common.MeanShift(args.rgb_range, rgb_mean, rgb_std)\n        \n        # define head module\n        head = ConvBlock(num_channels, base_filter, 3, 1, 1, activation='relu', norm=None)\n\n        # define body module\n        body = [\n            ResidualGroup(base_filter, 3, reduction, act=nn.ReLU(True), res_scale=scale_factor, n_resblocks=n_resblocks) \\\n            for _ in range(n_resgroups)]\n            \n        body.append(ConvBlock(base_filter, base_filter, 3, 1, 1, activation='relu', norm=None))\n\n        # define tail module\n        self.up = Upsampler(scale_factor, base_filter, activation=None)\n        self.output_conv = ConvBlock(base_filter, num_channels, 3, 1, 1, activation='relu', norm=None)\n\n        # self.add_mean = common.MeanShift(args.rgb_range, rgb_mean, rgb_std, 1)\n\n        self.head = nn.Sequential(*head)\n","AFTER":"        base_filter = 64\n        kernel_size = 3\n        reduction = 16\n        \n        # RGB mean for DIV2K\n        # rgb_mean = (0.4488, 0.4371, 0.4040)\n        # rgb_std = (1.0, 1.0, 1.0)\n        # self.sub_mean = common.MeanShift(args.rgb_range, rgb_mean, rgb_std)\n        \n        # define head module\n        self.head = ConvBlock(num_channels, base_filter, 3, 1, 1, activation='relu', norm=None)\n"}