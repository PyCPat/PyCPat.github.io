{"BEFORE":"    def __init__(self, config: Union[Dict, BaseOWAConfig]) -> None:\n        super().__init__()\n\n        if not isinstance(config, BaseOWAConfig):\n            config = BaseOWAConfig.from_dict(config)\n\n        # Device selection\n        self.device = config.get_device()\n\n        # Loss\n        self.margin_loss = config.margin_loss\n        self.criterion = nn.MarginRankingLoss(\n            margin=self.margin_loss,\n            size_average=self.margin_ranking_loss_size_average,\n        )\n\n        # Entity dimensions\n        #: The number of entities in the knowledge graph\n        self.num_entities = config.number_entities\n        #: The number of unique relation types in the knowledge graph\n        self.num_relations = config.number_relations\n        #: The dimension of the embeddings to generate\n        self.embedding_dim = config.embedding_dimension\n","AFTER":"    def __init__(self, model_config: ModelConfig) -> None:\n        super().__init__()\n\n        self.model_config = model_config\n        self.config = self.model_config.config\n        # Device selection\n        self.device = torch.device(\n            'cuda:0' if torch.cuda.is_available() and model_config.config(PREFERRED_DEVICE) else 'cpu')\n\n        # Loss\n        self.margin_loss = self.config[MARGIN_LOSS]\n        self.criterion = nn.MarginRankingLoss(\n            margin=self.margin_loss,\n            reduction='mean' if self.margin_ranking_loss_average else None,\n        )\n\n        # Entity dimensions\n        #: The number of entities in the knowledge graph\n        self.num_entities = self.config[NUM_ENTITIES]\n        #: The number of unique relation types in the knowledge graph\n        self.num_relations = self.config[NUM_RELATIONS]\n        #: The dimension of the embeddings to generate\n        self.embedding_dim = self.config[EMBEDDING_DIM]\n"}