{"BEFORE":"        self.model_cfg = model_cfg\n        self.voxel_size = voxel_size\n        self.point_cloud_range = point_cloud_range\n\n        SA_cfg = self.model_cfg['sa_layer']\n\n        self.SA_layers = nn.ModuleList()\n        self.SA_layer_names = []\n        self.downsample_times_map = {}\n        c_in = 0\n        for src_name in self.model_cfg['features_source']:\n            if src_name in ['bev', 'raw_points']:\n                continue\n            self.downsample_times_map[src_name] = SA_cfg[src_name]['downsample_factor']\n            mlps = SA_cfg[src_name]['mlps']\n            for k in range(len(mlps)):\n                mlps[k] = [mlps[k][0]] + mlps[k]\n            cur_layer = pointnet2_stack_modules.StackSAModuleMSG(\n                radii=SA_cfg[src_name]['pool_radius'],\n                nsamples=SA_cfg[src_name]['n_sample'],\n                mlps=mlps,\n                use_xyz=True,\n                pool_method='max_pool',\n            )\n            self.SA_layers.append(cur_layer)\n            self.SA_layer_names.append(src_name)\n\n            c_in += sum([x[-1] for x in mlps])\n\n        if 'bev' in self.model_cfg['features_source']:\n            c_bev = num_bev_features\n            c_in += c_bev\n\n        if 'raw_points' in self.model_cfg['features_source']:\n            mlps = SA_cfg['raw_points']['mlps']\n            for k in range(len(mlps)):\n                mlps[k] = [num_rawpoint_features - 3] + mlps[k]\n\n            self.SA_rawpoints = pointnet2_stack_modules.StackSAModuleMSG(\n                radii=SA_cfg['raw_points']['pool_radius'],\n                nsamples=SA_cfg['raw_points']['n_sample'],\n                mlps=mlps,\n                use_xyz=True,\n                pool_method='max_pool'\n            )\n            c_in += sum([x[-1] for x in mlps])\n        if self.model_cfg['add_ego_mask_feature']:\n            c_in += 1\n        self.vsa_point_feature_fusion = nn.Sequential(\n","AFTER":"        SA_cfg = self.model_cfg['sa_layer']\n\n        self.SA_layers = nn.ModuleList()\n        self.SA_layer_names = []\n        self.downsample_times_map = {}\n        c_in = 0\n        for src_name in self.model_cfg['features_source']:\n            if src_name in ['bev', 'raw_points']:\n                continue\n            self.downsample_times_map[src_name] = SA_cfg[src_name]['downsample_factor']\n            mlps = copy.copy(SA_cfg[src_name]['mlps'])\n"}