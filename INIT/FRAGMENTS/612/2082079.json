{"BEFORE":"    def __init__(self, in_channels, num_features, growth_rate, hidden_channels, bottleneck_hidden_channels, kernel_size, n_bins=None, scale=(2,2), dilated=False, norm=True, nonlinear='relu', causal=False, depth=None, rnn_type='rnn', rnn_position='parallel', out_channels=None, eps=EPS):\n        \"\"\"\n        Args:\n            in_channels <int>\n            num_features <int>\n            growth_rate <list<int>>: `len(growth_rate)` must be an odd number.\n            hidden_channels <list<int>>: `len(hidden_channels) = len(growth_rate)\/\/2`.\n            bottleneck_hidden_channels <int>\n            kernel_size <int> or <tuple<int>>\n            scale <int> or <list<int>>: Upsampling and Downsampling scale\n            dilated <list<bool>>\n            norm <list<bool>>\n            nonlinear <list<str>>\n        \"\"\"\n        super().__init__()\n\n        assert len(growth_rate) % 2 == 1, \"`len(growth_rate)` must be an odd number.\"\n\n        kernel_size = _pair(kernel_size)\n        scale = _pair(scale)\n        num_encoder_blocks = len(growth_rate) \/\/ 2\n\n        # Network\n        self.conv2d = nn.Conv2d(in_channels, num_features, kernel_size, stride=(1,1))\n\n        encoder, decoder = [], []\n        encoder = Encoder(\n            num_features, growth_rate[:num_encoder_blocks],\n            kernel_size=kernel_size, down_scale=scale,\n            dilated=dilated[:num_encoder_blocks], norm=norm[:num_encoder_blocks], nonlinear=nonlinear[:num_encoder_blocks], depth=depth[:num_encoder_blocks],\n            eps=eps\n        )\n\n        _in_channels, _growth_rate = growth_rate[num_encoder_blocks - 1], growth_rate[num_encoder_blocks]\n        bottleneck_bins = n_bins\n\n        for idx in range(num_encoder_blocks):\n            bottleneck_bins \/\/= scale[0]\n\n        bottleneck_dense_block = choose_dense_rnn_block(\n            rnn_type, rnn_position,\n            _in_channels, _growth_rate, bottleneck_hidden_channels,\n            kernel_size=kernel_size,\n            n_bins=bottleneck_bins,\n            dilated=dilated[num_encoder_blocks], norm=norm[num_encoder_blocks], nonlinear=nonlinear[num_encoder_blocks],\n            causal=causal,\n            depth=depth[num_encoder_blocks],\n            eps=eps\n        )\n","AFTER":"        scale = _pair(scale)\n        num_encoder_blocks = len(growth_rate) \/\/ 2\n\n        # Network\n        self.conv2d = nn.Conv2d(in_channels, num_features, kernel_size, stride=(1,1))\n\n        encoder, decoder = [], []\n        encoder = Encoder(\n            num_features, growth_rate[:num_encoder_blocks], hidden_channels=hidden_channels[:num_encoder_blocks],\n            kernel_size=kernel_size, down_scale=scale,\n            dilated=dilated[:num_encoder_blocks], norm=norm[:num_encoder_blocks], nonlinear=nonlinear[:num_encoder_blocks],\n            causal=causal,\n            depth=depth[:num_encoder_blocks],\n            eps=eps\n        )\n\n        _in_channels, _growth_rate = growth_rate[num_encoder_blocks - 1], growth_rate[num_encoder_blocks]\n        _n_bins = n_bins\n        n_bins_detail = [n_bins]\n\n        for _ in range(num_encoder_blocks):\n            remain = (scale[0] - (_n_bins % scale[0])) % scale[0]\n            if remain > 0:\n                _n_bins \/\/= scale[0]\n                _n_bins += 1\n            else:\n                _n_bins \/\/= scale[0]\n            n_bins_detail.append(_n_bins)\n\n        if hidden_channels[num_encoder_blocks] <= 0:\n            bottleneck_dense_block = DenseBlock(\n                _in_channels, _growth_rate,\n                kernel_size=kernel_size,\n                dilated=dilated[num_encoder_blocks], norm=norm[num_encoder_blocks], nonlinear=nonlinear[num_encoder_blocks],\n                depth=depth[num_encoder_blocks],\n                eps=eps\n            )\n        else:\n            bottleneck_dense_block = choose_dense_rnn_block(\n                rnn_type, rnn_position,\n                _in_channels, _growth_rate, hidden_channels[num_encoder_blocks],\n                kernel_size=kernel_size,\n                n_bins=n_bins_detail[-1],\n                dilated=dilated[num_encoder_blocks], norm=norm[num_encoder_blocks], nonlinear=nonlinear[num_encoder_blocks],\n                causal=causal,\n                depth=depth[num_encoder_blocks],\n                eps=eps\n            )\n\n        _in_channels = _growth_rate\n        skip_channels = growth_rate[num_encoder_blocks - 1::-1]\n\n        n_bins_detail = n_bins_detail[num_encoder_blocks - 1::-1]\n"}