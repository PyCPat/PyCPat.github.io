{"BEFORE":"            hparams_net[\"MLP1_channels\"], batch_norm=hparams_net[\"batch_norm\"]\n        )\n        self.mlp2 = MLP(\n            hparams_net[\"MLP2_channels\"], batch_norm=hparams_net[\"batch_norm\"]\n        )\n        self.mlp3 = MLP(\n            hparams_net[\"MLP3_channels\"], batch_norm=hparams_net[\"batch_norm\"]\n        )\n        self.lin = Lin(hparams_net[\"MLP3_channels\"][-1], hparams_net[\"num_classes\"])\n        pi_init = hparams_net[\"pi_init\"]\n        a = 0\n        b = -np.log((1 - pi_init) \/ pi_init)\n        self.lin.bias = torch.nn.Parameter(\n            torch.Tensor(\n                [\n                    a,\n                    b,\n                ]\n            )\n        )\n        nn.init.xavier_normal_(self.lin.weight)\n","AFTER":"        self.num_classes = hparams_net[\"num_classes\"]\n        bn = hparams_net.get(\"batch_norm\", True)\n        d1 = hparams_net.get(\"MLP1_channels\", [10, 64, 64])\n        d2 = hparams_net.get(\"MLP2_channels\", [64, 256, 512, 1024])\n        d3 = hparams_net.get(\"MLP3_channels\", [1088, 512, 256, 64, 4])\n\n        self.mlp1 = MLP(d1, batch_norm=bn)\n        self.mlp2 = MLP(d2, batch_norm=bn)\n        self.mlp3 = MLP(d3, batch_norm=bn)\n        self.lin = Linear(d3[-1], self.num_classes)\n"}