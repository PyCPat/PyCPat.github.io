{"BEFORE":"    def __init__(self,\n        in_channels, out_channels, \n    ):\n        super().__init__()\n\n        self.conv = nn.Sequential(\n            EqualizedConv2d(\n                in_channels, out_channels, 3, padding=1, bias=False\n            ),\n            FusedLeakyReLU(out_channels),\n            EqualizedConv2d(\n                out_channels, out_channels, 3, padding=1, bias=False\n            ),\n            FusedLeakyReLU(out_channels),\n            BlurDownsample()\n        )\n        self.down = nn.Sequential(\n            EqualizedConv2d(\n                in_channels, out_channels, 1, bias=False\n            ),\n            BlurDownsample()\n        )\n","AFTER":"    def __init__(self,\n        in_channels, out_channels, num_conv=2, down_name='avg'\n    ):\n        super().__init__()\n        layers = [\n            Conv2d('elr', in_channels, out_channels, 3, padding=1),\n            nn.LeakyReLU(0.2, inplace=True)\n        ]\n        for _ in range(num_conv-1):\n            layers.extend([\n                Conv2d('elr', out_channels, out_channels, 3, padding=1),\n                nn.LeakyReLU(0.2, inplace=True)\n            ])\n        self.block = nn.Sequential(*layers)\n        self.down = Downsample2x(down_name)\n        self.skip = Conv2d('elr', in_channels, out_channels, 1)\n"}