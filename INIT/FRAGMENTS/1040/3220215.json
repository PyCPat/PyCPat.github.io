{"BEFORE":"        self.conv1 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=3,\n                out_channels=32,\n                kernel_size=3,\n                stride=1,\n            ),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n        )\n        #\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=32,\n                out_channels=64,\n                kernel_size=3,\n                stride=1,\n                padding=0\n            ),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n        )\n        #\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=64,\n                out_channels=128,\n                kernel_size=3,\n                stride=1,\n                padding=0\n            ),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n        )\n\n        self.conv4 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=128,\n                out_channels=256,\n                kernel_size=3,\n                stride=1,\n                padding=0\n            ),\n","AFTER":"        self.relu = nn.ReLU()\n        self.sigmoid = nn.Sigmoid()\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=3,\n                out_channels=16,\n                kernel_size=3,\n                stride=2,\n            ),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n        )\n        #\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=16,\n                out_channels=32,\n                kernel_size=3,\n                stride=2,\n            ),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n        )\n        #\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(\n                in_channels=32,\n                out_channels=64,\n                kernel_size=3,\n                stride=2,\n            ),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2),\n        )\n        self.fc1 = nn.Linear(3 * 3 * 64, 64)\n        self.fc2 = nn.Linear(64, 10)\n        self.out = nn.Linear(10, 2)\n"}