{"BEFORE":"                self.deblocks.append(nn.Sequential(\n                    nn.ConvTranspose2d(\n                        num_filters[idx], num_upsample_filters[idx],\n                        upsample_strides[idx],\n                        stride=upsample_strides[idx], bias=False\n                    ),\n                    nn.BatchNorm2d(num_upsample_filters[idx], eps=1e-3, momentum=0.01),\n                    nn.ReLU()\n                ))\n","AFTER":"        self.deblocks = nn.ModuleList()\n        for idx in range(num_levels):\n            cur_layers = [\n                nn.ZeroPad2d(1),\n                nn.Conv2d(\n                    c_in_list[idx], num_filters[idx], kernel_size=3,\n                    stride=layer_strides[idx], padding=0, bias=False\n                ),\n                nn.BatchNorm2d(num_filters[idx], eps=1e-3, momentum=0.01),\n                nn.ReLU()\n            ]\n            for k in range(layer_nums[idx]):\n                cur_layers.extend([\n                    nn.Conv2d(num_filters[idx], num_filters[idx], kernel_size=3, padding=1, bias=False),\n                    nn.BatchNorm2d(num_filters[idx], eps=1e-3, momentum=0.01),\n                    nn.ReLU()\n                ])\n            self.blocks.append(nn.Sequential(*cur_layers))\n            if len(upsample_strides) > 0:\n                stride = upsample_strides[idx]\n                if stride > 1:\n                    self.deblocks.append(nn.Sequential(\n                        nn.ConvTranspose2d(\n                            num_filters[idx], num_upsample_filters[idx],\n                            upsample_strides[idx],\n                            stride=upsample_strides[idx], bias=False\n                        ),\n                        nn.BatchNorm2d(num_upsample_filters[idx], eps=1e-3, momentum=0.01),\n                        nn.ReLU()\n                    ))\n                else:\n                    stride = np.round(1 \/ stride).astype(np.int)\n                    self.deblocks.append(nn.Sequential(\n                        nn.Conv2d(\n                            num_filters[idx], num_upsample_filters[idx],\n                            stride,\n                            stride=stride, bias=False\n                        ),\n                        nn.BatchNorm2d(num_upsample_filters[idx], eps=1e-3, momentum=0.01),\n                        nn.ReLU()\n                    ))\n\n        c_in = sum(num_upsample_filters)\n"}