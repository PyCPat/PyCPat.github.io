{"BEFORE":"        super(STDCBlock, self).__init__()\n        assert steps in [2, 3, 4], f\"only 2, 3, 4 steps number are supported, found: {steps}\"\n\n        self.stride = stride\n\n        self.conv_list = nn.ModuleList()\n        # build first step conv 1x1.\n        self.conv_list.append(ConvBNReLU(in_channels, out_channels \/\/ 2, kernel_size=1, bias=False))\n        # avg pool in skip if stride = 2.\n        self.skip_step1 = nn.AvgPool2d(kernel_size=3, stride=2, padding=1) if stride == 2 else nn.Identity()\n","AFTER":"    def __init__(self, in_channels: int, out_channels: int, steps: int, stdc_downsample_mode: str, stride: int):\n        \"\"\"\n        :param steps: The total number of convs in this module, 1 conv 1x1 and (steps - 1) conv3x3.\n        :param stdc_downsample_mode: downsample mode in stdc block, supported `avg_pool` for average-pooling and\n         `dw_conv` for depthwise-convolution.\n        \"\"\"\n        super().__init__()\n        assert steps in [2, 3, 4], f\"only 2, 3, 4 steps number are supported, found: {steps}\"\n        self.stride = stride\n        self.conv_list = nn.ModuleList()\n        # build first step conv 1x1.\n        self.conv_list.append(ConvBNReLU(in_channels, out_channels \/\/ 2, kernel_size=1, bias=False))\n        # build skip connection after first convolution.\n        if stride == 1:\n            self.skip_step1 = nn.Identity()\n        elif stdc_downsample_mode == \"avg_pool\":\n            self.skip_step1 = nn.AvgPool2d(kernel_size=3, stride=2, padding=1)\n        elif stdc_downsample_mode == \"dw_conv\":\n            self.skip_step1 = ConvBNReLU(\n                out_channels \/\/ 2, out_channels \/\/ 2, kernel_size=3, stride=2, padding=1, bias=False, groups=out_channels \/\/ 2, use_activation=False\n            )\n        else:\n            raise ValueError(f\"stdc_downsample mode is not supported: found {stdc_downsample_mode},\" f\" must be in [avg_pool, dw_conv]\")\n\n        in_channels = out_channels \/\/ 2\n"}