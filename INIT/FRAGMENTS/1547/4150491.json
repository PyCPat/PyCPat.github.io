{"BEFORE":"        self.features2 = scnn.features\n        \n        # Linear classifier.\n        self.fc = torch.nn.Linear(512*128, 1)\n        \n        if fc:\n            # Freeze all previous layers.\n            for param in self.features1.parameters():\n                param.requires_grad = False\n            for param in self.features2.parameters():\n                param.requires_grad = False\n            # Initialize the fc layers.\n            nn.init.kaiming_normal_(self.fc.weight.data)\n","AFTER":"                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n                ):\n        super(DBCNN, self).__init__()\n\n        # Convolution and pooling layers of VGG-16.\n        self.features1 = torchvision.models.vgg16(pretrained=True).features\n        self.features1 = nn.Sequential(*list(self.features1.children())\n                                            [:-1])\n        scnn = SCNN(use_bn=use_bn)\n        if pretrained_scnn_path is not None:\n            old_dict = torch.load(pretrained_scnn_path)\n            new_dict = {}\n            for k, v in old_dict.items():\n                new_dict[k.replace('module.', '')] = v\n            scnn.load_state_dict(new_dict)\n              \n        self.features2 = scnn.features\n        \n        # Linear classifier.\n        self.fc = torch.nn.Linear(512*128, 1)\n\n        self.default_mean = torch.Tensor(mean).view(1, 3, 1, 1)\n        self.default_std = torch.Tensor(std).view(1, 3, 1, 1)\n"}