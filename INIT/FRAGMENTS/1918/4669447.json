{"BEFORE":"    def __init__(self, block, layers, num_classes=1000):\n        self.inplanes = 128\n        super(ResNet, self).__init__()\n        self.conv1 = conv3x3(3, 64, stride=2)\n        self.bn1 = BatchNorm2d(64)\n        self.relu1 = nn.ReLU(inplace=True)\n        self.conv2 = conv3x3(64, 64)\n        self.bn2 = BatchNorm2d(64)\n        self.relu2 = nn.ReLU(inplace=True)\n        self.conv3 = conv3x3(64, 128)\n        self.bn3 = BatchNorm2d(128)\n        self.relu3 = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\n","AFTER":"    def __init__(self, block, layers, num_classes=1000, dilated=False, deep_base=True, norm_layer=nn.BatchNorm2d):\n        self.inplanes = 128 if deep_base else 64\n        super(ResNet, self).__init__()\n        if deep_base:\n            self.conv1 = nn.Sequential(\n                nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False),\n                norm_layer(64),\n                nn.ReLU(inplace=True),\n                nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),\n                norm_layer(64),\n                nn.ReLU(inplace=True),\n                nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False),\n            )\n        else:\n            self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,\n                                   bias=False)\n        self.bn1        = norm_layer(self.inplanes)\n        self.relu       = nn.ReLU(inplace=True)\n        \n        self.maxpool    = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n        \n        self.layer1     = self._make_layer(block, 64, layers[0], norm_layer=norm_layer)\n        self.layer2     = self._make_layer(block, 128, layers[1], stride=2, norm_layer=norm_layer)\n        if dilated:\n            self.layer3 = self._make_layer(block, 256, layers[2], stride=1,\n                                           dilation=2, norm_layer=norm_layer)\n            self.layer4 = self._make_layer(block, 512, layers[3], stride=1,\n                                            dilation=4, norm_layer=norm_layer)\n        else:\n            self.layer3 = self._make_layer(block, 256, layers[2], stride=2,\n                                           norm_layer=norm_layer)\n            self.layer4 = self._make_layer(block, 512, layers[3], stride=2,\n                                           norm_layer=norm_layer)\n            \n        self.avgpool    = nn.AvgPool2d(7, stride=1)\n"}