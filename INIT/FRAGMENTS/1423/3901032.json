{"BEFORE":"        self.head = nn.Sequential(\n            nn.AdaptiveAvgPool2d(output_size=(1, 1)),\n            nn.Flatten(),\n            nn.Dropout(0.5),\n            nn.Linear(in_features, bottleneck_dim),\n            nn.BatchNorm1d(bottleneck_dim),\n            nn.ReLU(),\n            nn.Dropout(0.5),\n            nn.Linear(bottleneck_dim, bottleneck_dim),\n            nn.BatchNorm1d(bottleneck_dim),\n            nn.ReLU(),\n            nn.Linear(bottleneck_dim, num_classes)\n        )\n","AFTER":"    def __init__(self, in_features: int, num_classes: int, bottleneck_dim: Optional[int] = 1024, pool_layer=None):\n        super(ImageClassifierHead, self).__init__()\n        self.num_classes = num_classes\n        if pool_layer is None:\n            pool_layer = nn.Sequential(\n                nn.AdaptiveAvgPool2d(output_size=(1, 1)),\n                nn.Flatten()\n            )\n        self.head = nn.Sequential(\n            pool_layer,\n            nn.Dropout(0.5),\n            nn.Linear(in_features, bottleneck_dim),\n            nn.BatchNorm1d(bottleneck_dim),\n            nn.ReLU(),\n            nn.Dropout(0.5),\n            nn.Linear(bottleneck_dim, bottleneck_dim),\n            nn.BatchNorm1d(bottleneck_dim),\n            nn.ReLU(),\n            nn.Linear(bottleneck_dim, num_classes)\n        )\n"}