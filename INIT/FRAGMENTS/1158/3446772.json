{"BEFORE":"        for layer_spec in DEFAULT_CNN_ARCHITECTURE['CONV']:\n            shared_network_layers.append(nn.Conv2d(self.input_channel, layer_spec['out_dim'],\n                                                   kernel_size=layer_spec['kernel_size'], stride=layer_spec['stride']))\n            shared_network_layers.append(nn.ReLU())\n            self.input_channel = layer_spec['out_dim']\n\n        shared_network_layers.append(nn.Flatten())\n        for ind, layer_spec in enumerate(DEFAULT_CNN_ARCHITECTURE['DENSE'][:-1]):\n            in_dim, out_dim = layer_spec.get('in_dim'), layer_spec.get('out_dim')\n            shared_network_layers.append(nn.Linear(in_dim, out_dim))\n            shared_network_layers.append(nn.ReLU())\n\n        self.shared_network = nn.Sequential(*shared_network_layers)\n\n        dense_in_dim = reduce((lambda x, y: x * y), self.get_conv_image_shape(obs_space.shape[1:],\n                                                                              DEFAULT_CNN_ARCHITECTURE['CONV']))\n        DEFAULT_CNN_ARCHITECTURE['DENSE'][0]['in_dim'] = dense_in_dim\n        self.mean_layer = nn.Linear(DEFAULT_CNN_ARCHITECTURE['DENSE'][-1]['in_dim'], self.representation_dim)\n        self.scale_layer = nn.Linear(DEFAULT_CNN_ARCHITECTURE['DENSE'][-1]['in_dim'], self.representation_dim)\n","AFTER":"        conv_arch = DEFAULT_CNN_ARCHITECTURE['CONV']\n        dense_arch = DEFAULT_CNN_ARCHITECTURE['DENSE'].copy()  # copy to mutate\n        dense_in_dim = np.prod(sb_conv_arch_output_size(obs_space.shape[1:],\n                                                        conv_arch))\n        dense_arch[0]['in_dim'] = dense_in_dim\n\n        for layer_spec in conv_arch:\n            shared_network_layers.append(nn.Conv2d(self.input_channel, layer_spec['out_dim'],\n                                                   kernel_size=layer_spec['kernel_size'], stride=layer_spec['stride']))\n            shared_network_layers.append(nn.ReLU())\n            self.input_channel = layer_spec['out_dim']\n\n        shared_network_layers.append(nn.Flatten())\n        for ind, layer_spec in enumerate(dense_arch[:-1]):\n            in_dim, out_dim = layer_spec.get('in_dim'), layer_spec.get('out_dim')\n            shared_network_layers.append(nn.Linear(in_dim, out_dim))\n            shared_network_layers.append(nn.ReLU())\n\n        self.shared_network = nn.Sequential(*shared_network_layers)\n        self.mean_layer = nn.Linear(dense_arch[-1]['in_dim'], self.representation_dim)\n        self.scale_layer = nn.Linear(dense_arch[-1]['in_dim'], self.representation_dim)\n"}