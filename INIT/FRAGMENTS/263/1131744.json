{"BEFORE":"    def __init__(self, input_features: int, filters: int, respath_length: int) -> None:\n        \"\"\"\n        Arguments:\n        input_features - input layer filters\n        filters - output channels\n        respath_length - length of the Respath\n\n        Returns - None\n        \"\"\"\n        super().__init__()\n        self.filters = filters\n        self.respath_length = respath_length\n        self.conv2d_bn_1x1 = Conv2d_batchnorm(input_features=input_features, num_of_filters=self.filters,\n                                              kernel_size=(1, 1), activation='None', padding=0)\n        self.conv2d_bn_3x3 = Conv2d_batchnorm(input_features=input_features, num_of_filters=self.filters,\n                                              kernel_size=(3, 3), activation='relu', padding=1)\n        self.conv2d_bn_1x1_common = Conv2d_batchnorm(input_features=self.filters, num_of_filters=self.filters,\n                                                     kernel_size=(1, 1), activation='None', padding=0)\n        self.conv2d_bn_3x3_common = Conv2d_batchnorm(input_features=self.filters, num_of_filters=self.filters,\n                                                     kernel_size=(3, 3), activation='relu', padding=1)\n        self.batch_norm1 = nn.BatchNorm1d(filters, affine=False)\n","AFTER":"    def __init__(self, U, in_channel, alpha=2.5):\n        super(MultiResBlock, self).__init__()\n        self.W = alpha * U\n        self.shortcut = conv2d_bn(in_channel, filters=int(self.W * 0.167) + int(self.W * 0.333) + int(self.W * 0.5),\n                                  num_col=1, num_row=1, activation=None, padding='same')\n        self.conv3x3 = conv2d_bn(in_channel, filters=int(self.W * 0.167), num_col=3, num_row=3,\n                                 activation='relu', padding='same')\n        self.conv5x5 = conv2d_bn(int(self.W * 0.167), filters=int(self.W * 0.333), num_col=3, num_row=3,\n                                 activation='relu', padding='same')\n        self.conv7x7 = conv2d_bn(int(self.W * 0.333), filters=int(self.W * 0.5), num_col=3, num_row=3,\n                                 activation='relu', padding='same')\n        self.batchnorm = nn.BatchNorm1d(num_features=int(self.W * 0.167) + int(self.W * 0.333) + int(self.W * 0.5))\n"}