{"BEFORE":"    def __init__(self, structure=[3, 'average', 3], activation='sigmoid', channel=3, **kwargs):\n        super(_MagNet, self).__init__()\n\n        activation_fn = nn.ReLU()\n        if activation == 'sigmoid':\n            activation_fn = nn.Sigmoid()\n\n        self.encoder = nn.Sequential()\n        self.decoder = nn.Sequential()\n\n        in_channels = channel\n        for i, layer in enumerate(structure):\n            if isinstance(layer, int):\n                conv = Conv2d_SAME(in_channels=in_channels, out_channels=structure[i], kernel_size=(3, 3))\n                in_channels = structure[i]\n                bn = nn.BatchNorm2d(structure[i])\n                self.encoder.add_module(f'conv{i+1:d}', conv)\n                self.encoder.add_module(f'bn{i+1:d}', bn)\n                self.encoder.add_module(f'{activation}{i+1:d}', activation_fn)\n            elif layer == 'max':\n                pool = nn.MaxPool2d(kernel_size=(2, 2))\n            elif layer == 'average':\n                pool = nn.AvgPool2d(kernel_size=(2, 2))\n\n        for i, layer in enumerate(reversed(structure)):\n            if isinstance(layer, int):\n                conv = Conv2d_SAME(in_channels=in_channels, out_channels=structure[i], kernel_size=(3, 3))\n                in_channels = structure[i]\n                bn = nn.BatchNorm2d(structure[i])\n                self.decoder.add_module(f'conv{i+1:d}', conv)\n                self.decoder.add_module(f'bn{i+1:d}', bn)\n                self.decoder.add_module(f'{activation}{i+1:d}', activation_fn)\n            elif layer == 'max' or layer == 'average':\n                pool = nn.Upsample(scale_factor=(2, 2))\n","AFTER":"    def __init__(self, structure: list[Tuple[int, str]] = [3, 'average', 3],\n                 activation: str = 'sigmoid', channel: int = 3, **kwargs):\n        super(_MagNet, self).__init__()\n\n        activation_fn = nn.ReLU()\n        if activation == 'sigmoid':\n            activation_fn = nn.Sigmoid()\n\n        self.encoder = nn.Sequential()\n        self.decoder = nn.Sequential()\n\n        in_channels = channel\n        for i, layer in enumerate(structure):\n            if isinstance(layer, int):\n                conv = Conv2d_SAME(in_channels=in_channels, out_channels=structure[i], kernel_size=(3, 3))\n                in_channels = structure[i]\n                bn = nn.BatchNorm2d(structure[i])\n                self.encoder.add_module(f'conv{i+1:d}', conv)\n                self.encoder.add_module(f'bn{i+1:d}', bn)\n                self.encoder.add_module(f'{activation}{i+1:d}', activation_fn)\n            else:\n                assert isinstance(layer, str)\n                module = nn.MaxPool2d(kernel_size=(2, 2)) if layer == 'max' else nn.AvgPool2d(kernel_size=(2, 2))\n                self.encoder.add_module('pool', module)\n\n        for i, layer in enumerate(reversed(structure)):\n            if isinstance(layer, int):\n                conv = Conv2d_SAME(in_channels=in_channels, out_channels=structure[i], kernel_size=(3, 3))\n                in_channels = structure[i]\n                bn = nn.BatchNorm2d(structure[i])\n                self.decoder.add_module(f'conv{i+1:d}', conv)\n                self.decoder.add_module(f'bn{i+1:d}', bn)\n                self.decoder.add_module(f'{activation}{i+1:d}', activation_fn)\n            else:\n                assert isinstance(layer, str)\n                self.decoder.add_module('pool', nn.Upsample(scale_factor=(2, 2)))\n"}