{"BEFORE":"        if len(ny)==2:\n            self.nchannels = 1\n            self.None_nchannels = True\n            self.height_target, self.width_target = ny\n        else:\n            self.None_nchannels = False\n            self.nchannels, self.height_target, self.width_target = ny\n\n        self.FC = simple_res_net(n_in=nx, n_out=self.nchannels*self.height_target*self.width_target, \\\n","AFTER":"    def __init__(self, nb, nu, na, ny, nx, n_nodes_per_layer=64, n_hidden_layers=2, activation=nn.Tanh, features_ups_factor=1.33):\n        super(CNN_encoder, self).__init__()\n        self.nx = nx\n        self.nu = tuple() if nu is None else ((nu,) if isinstance(nu,int) else nu)\n        assert isinstance(ny,(list,tuple)) and (len(ny)==2 or len(ny)==3), 'ny should have 2 or 3 dimentions in the form (nchannels, height, width) or (height, width)'\n        ny = (ny[0]*na, ny[1], ny[2]) if len(ny)==3 else (na, ny[0], ny[1])\n        # print('ny=',ny)\n\n        self.CNN = CNN_chained_downscales(ny, features_ups_factor=features_ups_factor) \n"}