{"BEFORE":"        dim_out = default(dim_out, dim)\n        temporal_kernel_size = default(temporal_kernel_size, kernel_size)\n\n        self.spatial_conv = nn.Conv2d(dim, dim_out, kernel_size = kernel_size, padding = kernel_size \/\/ 2)\n        self.temporal_conv = nn.Conv1d(dim_out, dim_out, kernel_size = temporal_kernel_size, padding = temporal_kernel_size \/\/ 2)\n\n        nn.init.dirac_(self.temporal_conv.weight.data) # initialized to be identity\n        nn.init.zeros_(self.temporal_conv.bias.data)\n","AFTER":"        dim_out,\n        *,\n        time_cond_dim = None,\n        groups = 8\n    ):\n        super().__init__()\n\n        self.time_mlp = None\n\n        if exists(time_cond_dim):\n            self.time_mlp = nn.Sequential(\n                nn.SiLU(),\n                nn.Linear(time_cond_dim, dim_out * 2)\n            )\n\n        self.block1 = Block(dim, dim_out, groups = groups)\n        self.block2 = Block(dim_out, dim_out, groups = groups)\n        self.res_conv = PseudoConv3d(dim, dim_out, 1) if dim != dim_out else nn.Identity()\n"}