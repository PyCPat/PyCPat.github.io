{"BEFORE":"        self.inputblock = nn.Sequential(\n            # input is (nc) x 64 x 64\n            nn.Conv2d(nc, ndf, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf),\n            nn.LeakyReLU(0.2, inplace=True),\n            # input is ndf x 32 x 32\n\n            nn.Conv2d(ndf, ndf, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.BatchNorm2d(ndf),\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        self.discblock1 = nn.Sequential(\n            nn.Conv2d(ndf, ndf*2, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf*2),\n            nn.LeakyReLU(0.2, inplace=True),\n            # input is (ndf*2) x 16 x 16\n\n            nn.Conv2d(ndf*2, ndf*2, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.BatchNorm2d(ndf*2),\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        self.discblock2 = nn.Sequential(\n            nn.Conv2d(ndf*2, ndf*4, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf*4),\n            nn.LeakyReLU(0.2, inplace=True),\n            # input is (ndf*4) x 8 x 8\n\n            nn.Conv2d(ndf*4, ndf*4, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.BatchNorm2d(ndf*4),\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        self.discblock3 = nn.Sequential(\n            nn.Conv2d(ndf*4, ndf*8, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf*8),\n            nn.LeakyReLU(0.2, inplace=True),\n\n            nn.Conv2d(ndf*8, ndf*8, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        # self.linear1 = nn.Linear(ndf*8*4*4, 1, bias=bias)\n        # self.linear2 = nn.Linear(label_width_d, 1, bias=bias)\n        # self.sigmoid = nn.Sigmoid()\n\n        # self.linear1 = nn.Linear(ndf*8*4*4, 1, bias=bias)\n        # self.linear2 = nn.Linear(label_width_d, ndf*8*4*4, bias=bias)\n        # self.sigmoid = nn.Sigmoid()\n\n        self.linear = nn.Sequential(\n            nn.Linear(ndf*8*4*4, 1, bias=bias),\n            nn.Sigmoid()\n        )\n","AFTER":"        if img_size == 64:\n            self.inputblock = nn.Sequential(\n                # input is (nc) x 64 x 64\n                nn.Conv2d(nc, ndf, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n                nn.BatchNorm2d(ndf),\n                nn.LeakyReLU(0.2, inplace=True),\n                # input is ndf x 32 x 32\n\n                nn.Conv2d(ndf, ndf, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n                nn.BatchNorm2d(ndf),\n                nn.LeakyReLU(0.2, inplace=True),\n            )\n        elif img_size == 128:\n            self.inputblock = nn.Sequential(\n                # input is (nc) x 128 x 128\n                nn.Conv2d(nc, ndf, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n                nn.BatchNorm2d(ndf),\n                nn.LeakyReLU(0.2, inplace=True),\n                # input is ndf x 64 x 64\n                nn.Conv2d(ndf, ndf, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n                nn.BatchNorm2d(ndf),\n                nn.LeakyReLU(0.2, inplace=True),\n\n                # input is ndf x 64 x 64\n                nn.Conv2d(ndf, ndf, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n                nn.BatchNorm2d(ndf),\n                nn.LeakyReLU(0.2, inplace=True),\n                # input is ndf x 32 x 32\n                nn.Conv2d(ndf, ndf, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n                nn.BatchNorm2d(ndf),\n                nn.LeakyReLU(0.2, inplace=True),\n            )\n\n\n\n        self.discblock1 = nn.Sequential(\n            nn.Conv2d(ndf, ndf*2, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf*2),\n            nn.LeakyReLU(0.2, inplace=True),\n            # input is (ndf*2) x 16 x 16\n\n            nn.Conv2d(ndf*2, ndf*2, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.BatchNorm2d(ndf*2),\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        self.discblock2 = nn.Sequential(\n            nn.Conv2d(ndf*2, ndf*4, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf*4),\n            nn.LeakyReLU(0.2, inplace=True),\n            # input is (ndf*4) x 8 x 8\n\n            nn.Conv2d(ndf*4, ndf*4, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.BatchNorm2d(ndf*4),\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        self.discblock3 = nn.Sequential(\n            nn.Conv2d(ndf*4, ndf*8, kernel_size=4, stride=2, padding=1, bias=bias), #h=h\/2\n            nn.BatchNorm2d(ndf*8),\n            nn.LeakyReLU(0.2, inplace=True),\n\n            nn.Conv2d(ndf*8, ndf*8, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.LeakyReLU(0.2, inplace=True),\n        )\n\n        # self.linear1 = nn.Linear(ndf*8*4*4, 1, bias=bias)\n        # self.linear2 = nn.Linear(label_width_d, 1, bias=bias)\n        # self.sigmoid = nn.Sigmoid()\n\n        self.linear1 = nn.Linear(ndf*8*4*4, 1, bias=bias)\n        self.linear2 = nn.Linear(label_width_d, ndf*8, bias=bias)\n        ## self.linear2 = nn.Linear(label_width_d, ndf*8*4*4, bias=bias)\n        self.sigmoid = nn.Sigmoid()\n"}