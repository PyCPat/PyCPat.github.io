{"BEFORE":"        self.conv3 = nn.Conv2d(planes, planes * 4, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(planes * 4)\n        self.relu = nn.ReLU(inplace=True)\n        self.downsample = downsample\n        self.stride = stride\n\n        if use_cbam:\n            self.cbam = CBAM(planes * 4, 16)\n        else:\n            self.cbam = None\n\n    def forward(self, x):\n","AFTER":"        expansion,\n        use_att=False,\n    ):\n\n        super(Bottleneck, self).__init__()\n        width_ratio = out_channels \/ (expansion * 64.0)\n        D = cardinality * int(base_width * width_ratio)\n\n        self.relu = nn.ReLU(inplace=True)\n        if use_att:\n            self.cbam_module = CBAM(out_channels)\n        else:\n            self.cbam_module = None\n        self.conv_reduce = nn.Conv2d(\n            in_channels, D, kernel_size=1, stride=1, padding=0, bias=False\n        )\n        self.bn_reduce = nn.BatchNorm2d(D)\n        self.conv_conv = nn.Conv2d(\n            D,\n            D,\n            kernel_size=3,\n            stride=stride,\n            padding=1,\n            groups=cardinality,\n            bias=False,\n        )\n        self.bn = nn.BatchNorm2d(D)\n        self.conv_expand = nn.Conv2d(\n            D, out_channels, kernel_size=1, stride=1, padding=0, bias=False\n        )\n        self.bn_expand = nn.BatchNorm2d(out_channels)\n\n        self.shortcut = nn.Sequential()\n        if in_channels != out_channels:\n            self.shortcut.add_module(\n                \"shortcut_conv\",\n                nn.Conv2d(\n                    in_channels,\n                    out_channels,\n                    kernel_size=1,\n                    stride=stride,\n                    padding=0,\n                    bias=False,\n                ),\n            )\n            self.shortcut.add_module(\"shortcut_bn\", nn.BatchNorm2d(out_channels))\n\n    def forward(self, x):\n"}