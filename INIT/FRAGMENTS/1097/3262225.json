{"BEFORE":"        hdim = hidden_dim\n\n        self.encoder = nn.Sequential(\n            nn.Conv2d(3, hdim, 4, stride = 2, padding = 1),\n            nn.ReLU(),\n            nn.Conv2d(hdim, hdim, 4, stride = 2, padding = 1),\n            nn.ReLU(),\n            nn.Conv2d(hdim, hdim, 4, stride = 2, padding = 1),\n            nn.ReLU(),\n            nn.Conv2d(hdim, num_tokens, 1)\n        )\n\n        self.decoder = nn.Sequential(\n            nn.ConvTranspose2d(dim, hdim, 4, stride = 2, padding = 1),\n            nn.ReLU(),\n            nn.ConvTranspose2d(hdim, hdim, 4, stride = 2, padding = 1),\n            nn.ReLU(),\n            nn.ConvTranspose2d(hdim, hdim, 4, stride = 2, padding = 1),\n            nn.ReLU(),\n            nn.Conv2d(hdim, 3, 1)\n        )\n","AFTER":"        num_layers = 3\n    ):\n        super().__init__()\n        hdim = hidden_dim\n        \n        assert num_layers >= 1\n        \n        encoder_layers = []\n        decoder_layers = []\n        for i in range(num_layers):\n            enc_in = 3 if i == 0 else hdim\n            dec_in = dim if i == 0 else hdim\n            encoder_layers += [\n                nn.Conv2d(enc_in, hdim, 4, stride = 2, padding = 1),\n                nn.ReLU(),\n            ]\n            \n            dec_in = dim if i == 0 else hdim\n            decoder_layers += [\n                nn.ConvTranspose2d(dec_in, hdim, 4, stride = 2, padding = 1),\n                nn.ReLU(),\n            ]\n            \n        encoder_layers.append(nn.Conv2d(hdim, num_tokens, 1))\n        decoder_layers.append(nn.Conv2d(hdim, 3, 1))\n\n        self.encoder = nn.Sequential(*encoder_layers)\n        self.decoder = nn.Sequential(*decoder_layers)\n"}