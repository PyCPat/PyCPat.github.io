{"BEFORE":"        self.block_depth = (depth - 4) \/\/ (3 * 2)\n\n        self.conv = nn.Conv2d(in_channels, self.filters[0], (3, 3), stride=1, padding=1, bias=False)\n        self.blocks = nn.Sequential(\n            Block(self.filters[0], self.filters[1], 1, self.block_depth, dropout),\n            Block(self.filters[1], self.filters[2], 2, self.block_depth, dropout),\n            Block(self.filters[2], self.filters[3], 2, self.block_depth, dropout),\n            nn.BatchNorm2d(self.filters[3]),\n            nn.ReLU(inplace=True),\n            nn.AvgPool2d(kernel_size=8),\n        )\n\n        self.classification = nn.Linear(in_features=self.filters[3], out_features=labels)\n","AFTER":"        self.block_depth = (depth - 4) \/\/ (3 * 2)\n\n        self.f = nn.Sequential(OrderedDict([\n            (\"0_convolution\", nn.Conv2d(in_channels, self.filters[0], (3, 3), stride=1, padding=1, bias=False)),\n            (\"1_block\", Block(self.filters[0], self.filters[1], 1, self.block_depth, dropout)),\n            (\"2_block\", Block(self.filters[1], self.filters[2], 2, self.block_depth, dropout)),\n            (\"3_block\", Block(self.filters[2], self.filters[3], 2, self.block_depth, dropout)),\n            (\"4_normalization\", nn.BatchNorm2d(self.filters[3])),\n            (\"5_activation\", nn.ReLU(inplace=True)),\n            (\"6_pooling\", nn.AvgPool2d(kernel_size=8)),\n            (\"7_flattening\", nn.Flatten()),\n            (\"8_classification\", nn.Linear(in_features=self.filters[3], out_features=labels)),\n        ]))\n"}