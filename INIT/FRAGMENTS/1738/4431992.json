{"BEFORE":"        linearInSize = hidden_size\n        if bidirectional:\n            linearInSize = linearInSize * 2\n\n        self.out = nn.Sequential(\n            nn.Linear(linearInSize, int(linearInSize \/ 3)),\n            nn.ReLU(),\n            nn.Dropout(dropout),\n            nn.Linear(int(linearInSize \/ 3), num_classes)\n            # nn.Sigmoid()\n        )\n","AFTER":"        self.modality_weights = nn.Linear(len(modalities), 1, bias=False)\n        self.modality_weights.weight = nn.Parameter(F.softmax(torch.ones(len(modalities)), dim=0))\n"}