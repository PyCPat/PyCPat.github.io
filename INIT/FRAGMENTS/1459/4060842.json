{"BEFORE":"            self.conv_block = nn.Sequential(\n                nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, stride=1,\n                          padding=((kernel_size - 1) \/\/ 2)),\n                nn.BatchNorm3d(out_planes),\n                nn.ReLU(inplace=True),\n                nn.Conv3d(out_planes, out_planes, kernel_size=kernel_size, stride=1,\n                          padding=((kernel_size - 1) \/\/ 2)),\n                nn.BatchNorm3d(out_planes),\n                nn.ReLU(inplace=True)\n            )\n        else:\n            self.conv_block = nn.Sequential(\n                nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, stride=1,\n                          padding=((kernel_size - 1) \/\/ 2)),\n                nn.BatchNorm3d(out_planes),\n                nn.ReLU(inplace=True))\n","AFTER":"    def __init__(self, in_planes, out_planes, kernel_size=3, double=True, norm=nn.BatchNorm3d, skip=True):\n        super().__init__()\n        self.skip = skip\n        self.downsample = in_planes != out_planes\n        self.final_activation = nn.LeakyReLU(negative_slope=0.01,inplace=True) \n        padding = (kernel_size - 1) \/\/ 2\n        if double:\n            self.conv_block = nn.Sequential(\n                nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, stride=1,\n                          padding=padding),\n                norm(out_planes),\n                nn.LeakyReLU(negative_slope=0.01,inplace=True),\n                nn.Conv3d(out_planes, out_planes, kernel_size=kernel_size, stride=1,\n                          padding=padding),\n                norm(out_planes))\n        else:\n            self.conv_block = nn.Sequential(\n                nn.Conv3d(in_planes, out_planes, kernel_size=kernel_size, stride=1,\n                          padding=padding),\n                norm(out_planes))\n\n        if self.skip and self.downsample:\n            self.conv_down = nn.Sequential(\n                nn.Conv3d(in_planes, out_planes, kernel_size=1, stride=1,\n                          padding=0),\n                norm(out_planes))\n\n    def forward(self, x):\n"}