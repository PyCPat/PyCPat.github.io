{"BEFORE":"            self.stride = stride\n        else:\n            self.stride = 1 if input_channel == output_channel else 2\n\n        self.padding = padding if padding is not None else 1\n        self.norm = nn.BatchNorm2d if norm_layer is None else norm_layer\n        self.down_sampling = nn.Sequential(\n            nn.Conv2d(input_channel, output_channel, 1, self.stride),\n            self.norm(output_channel)\n        ) if self.stride != 1 else None\n","AFTER":"        self,\n        in_channel,\n        out_channel,\n        *,\n        stride=None,\n        padding=None,\n        norm_layer=None,\n        remain_dim=False  # False when want to increase the number of channels but remain width and height\n    ):\n        super().__init__()\n\n        if stride is not None:\n            self.stride = stride\n        else:\n            self.stride = 1\n            if (in_channel != out_channel) and not remain_dim:\n                self.stride = 2\n\n        self.padding = padding if padding is not None else 1\n        self.norm = norm_layer if norm_layer is not None else nn.BatchNorm2d\n\n        if remain_dim:\n            self.skip = nn.Conv2d(in_channel, out_channel, 1)\n        else:\n            self.skip = nn.Conv2d(in_channel, out_channel, 1, self.stride) if self.stride > 1 else nn.Identity()\n\n\nclass ResNetBlock(ResNetBlockBase):\n"}