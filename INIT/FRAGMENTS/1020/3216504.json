{"BEFORE":"    def __init__(self, setting, width_mult,input_channel,output_channel,last_channel, n_class=100):\n        super(RMobileNet, self).__init__()\n        self.features = [conv_bn(3, input_channel, 2 if n_class==1000 else 1)]\n        self.features.append(nn.Sequential(\n                # dw\n                nn.Conv2d(input_channel, input_channel, 3, stride=1, padding=1, groups=input_channel, bias=False),\n                nn.BatchNorm2d(input_channel),\n                nn.ReLU6(inplace=True),\n                # pw-linear\n                nn.Conv2d(input_channel, output_channel, 1, 1, 0, bias=False),\n                nn.BatchNorm2d(output_channel),\n            ))\n        input_channel = output_channel\n        for t, c, n, s in setting:\n            output_channel = int(c * width_mult)\n            for i in range(n):\n                self.features.append(InvertedResidual(input_channel, output_channel, s, expand_ratio=t))\n                input_channel = output_channel\n        self.features.append(conv_1x1_bn(input_channel, last_channel))\n","AFTER":"    def __init__(self, setting, input_channel, output_channel, last_channel, t_free=1, n_class=100):\n        super(RMobileNet, self).__init__()\n        self.features = [\n            nn.Sequential(\n                nn.Conv2d(3, input_channel, 3, 2 if n_class==1000 else 1, 1, bias=False),\n                nn.BatchNorm2d(input_channel),\n                nn.ReLU6(inplace=True)\n            )\n        ]\n        self.features.append(\n            nn.Sequential(\n                # dw\n                nn.Conv2d(input_channel, input_channel, 3, stride=1, padding=1, groups=input_channel, bias=False),\n                nn.BatchNorm2d(input_channel),\n                nn.ReLU6(inplace=True),\n                # pw-linear\n                nn.Conv2d(input_channel, output_channel * t_free, 1, 1, 0, bias=False),\n                nn.BatchNorm2d(output_channel * t_free),\n            )\n        )\n        input_channel = output_channel\n        for t, output_channel, n, s in setting:\n            for i in range(n):\n                self.features.append(InvertedResidual(input_channel, output_channel, s, expand_ratio=t,free=t_free))\n                input_channel = output_channel\n        self.features.append(\n            nn.Sequential(\n                nn.Conv2d(input_channel * t_free, last_channel, 1, 1, 0, bias=False),\n                nn.BatchNorm2d(last_channel),\n                nn.ReLU6(inplace=True)\n            )\n"}