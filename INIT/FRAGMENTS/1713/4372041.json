{"BEFORE":"                 num_filters=(64, ),\n                 with_distance=False,\n                 with_cluster_center=True,\n                 with_voxel_center=True,\n                 voxel_size=(0.2, 0.2, 4),\n                 point_cloud_range=(0, -40, -3, 70.4, 40, 1),\n                 mode='max'):\n        \"\"\" Pillar Feature Net.\n        The network prepares the pillar features and performs forward pass\n        through PFNLayers.\n\n        Args:\n            num_input_features (int). Number of input features,\n                either x, y, z or x, y, z, r.\n            use_norm (bool). Whether to include BatchNorm.\n            num_filters (list[int]). Number of features in each of the\n                N PFNLayers.\n            with_distance (bool). Whether to include Euclidean distance\n                to points.\n            voxel_size (list[float]). Size of voxels, only utilize x and y\n                size.\n            point_cloud_range (list[float>]). Point cloud range, only\n                utilize x and y min.\n        \"\"\"\n\n        super(PillarFeatureNet, self).__init__()\n        assert len(num_filters) > 0\n        if with_cluster_center:\n            num_input_features += 3\n        if with_voxel_center:\n            num_input_features += 2\n        if with_distance:\n            num_input_features += 1\n        self._with_distance = with_distance\n        self._with_cluster_center = with_cluster_center\n        self._with_voxel_center = with_voxel_center\n\n        # Create PillarFeatureNet layers\n        self.num_input_features = num_input_features\n        num_filters = [num_input_features] + list(num_filters)\n        pfn_layers = []\n        for i in range(len(num_filters) - 1):\n            in_filters = num_filters[i]\n            out_filters = num_filters[i + 1]\n            if i < len(num_filters) - 2:\n                last_layer = False\n            else:\n                last_layer = True\n            pfn_layers.append(\n                PFNLayer(\n                    in_filters,\n                    out_filters,\n                    use_norm,\n","AFTER":"                 norm_cfg=dict(type='BN1d', eps=1e-3, momentum=0.01),\n                 mode='max'):\n        super(PillarFeatureNet, self).__init__()\n        assert len(feat_channels) > 0\n        if with_cluster_center:\n            in_channels += 3\n        if with_voxel_center:\n            in_channels += 2\n        if with_distance:\n            in_channels += 1\n        self._with_distance = with_distance\n        self._with_cluster_center = with_cluster_center\n        self._with_voxel_center = with_voxel_center\n\n        # Create PillarFeatureNet layers\n        self.in_channels = in_channels\n        feat_channels = [in_channels] + list(feat_channels)\n"}