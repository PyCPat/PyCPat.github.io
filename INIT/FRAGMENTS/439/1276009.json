{"BEFORE":"        super(Discriminator, self).__init__()\n        negative_slope = 0.03\n        self.conv1 = nn.Conv1d(in_channels=2, out_channels=32, kernel_size=31, stride=2, padding=15)\n        self.vbn1 = VirtualBatchNorm1d(32)\n        self.lrelu1 = nn.LeakyReLU(negative_slope)\n        self.conv2 = nn.Conv1d(32, 64, 31, 2, 15)\n        self.vbn2 = VirtualBatchNorm1d(64)\n        self.lrelu2 = nn.LeakyReLU(negative_slope)\n        self.conv3 = nn.Conv1d(64, 64, 31, 2, 15)\n        self.dropout1 = nn.Dropout()\n        self.vbn3 = VirtualBatchNorm1d(64)\n        self.lrelu3 = nn.LeakyReLU(negative_slope)\n        self.conv4 = nn.Conv1d(64, 128, 31, 2, 15)\n        self.vbn4 = VirtualBatchNorm1d(128)\n        self.lrelu4 = nn.LeakyReLU(negative_slope)\n        self.conv5 = nn.Conv1d(128, 128, 31, 2, 15)\n        self.vbn5 = VirtualBatchNorm1d(128)\n        self.lrelu5 = nn.LeakyReLU(negative_slope)\n        self.conv6 = nn.Conv1d(128, 256, 31, 2, 15)\n        self.dropout2 = nn.Dropout()\n        self.vbn6 = VirtualBatchNorm1d(256)\n        self.lrelu6 = nn.LeakyReLU(negative_slope)\n        self.conv7 = nn.Conv1d(256, 256, 31, 2, 15)\n        self.vbn7 = VirtualBatchNorm1d(256)\n        self.lrelu7 = nn.LeakyReLU(negative_slope)\n        self.conv8 = nn.Conv1d(256, 512, 31, 2, 15)\n        self.vbn8 = VirtualBatchNorm1d(512)\n        self.lrelu8 = nn.LeakyReLU(negative_slope)\n        self.conv9 = nn.Conv1d(512, 512, 31, 2, 15)\n        self.dropout3 = nn.Dropout()\n        self.vbn9 = VirtualBatchNorm1d(512)\n        self.lrelu9 = nn.LeakyReLU(negative_slope)\n        self.conv10 = nn.Conv1d(512, 1024, 31, 2, 15)\n        self.vbn10 = VirtualBatchNorm1d(1024)\n        self.lrelu10 = nn.LeakyReLU(negative_slope)\n        self.conv11 = nn.Conv1d(1024, 2048, 31, 2, 15)\n        self.vbn11 = VirtualBatchNorm1d(2048)\n        self.lrelu11 = nn.LeakyReLU(negative_slope)\n        self.conv_final = nn.Conv1d(2048, 1, kernel_size=1, stride=1)\n        self.lrelu_final = nn.LeakyReLU(negative_slope)\n        self.fully_connected = nn.Linear(in_features=8, out_features=1)\n        self.dropout4 = nn.Dropout()\n","AFTER":"        super().__init__()\n"}