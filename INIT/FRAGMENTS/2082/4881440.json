{"BEFORE":"        L = [2, 4, 3]\r\n\r\n        self.conv1 = Conv_BN_ReLU(3, channels[0], kernel=3, stride=2)\r\n\r\n        self.mv2 = nn.ModuleList([])\r\n        self.mv2.append(MV2Block(channels[0], channels[1], 1, expansion))\r\n        self.mv2.append(MV2Block(channels[1], channels[2], 2, expansion))\r\n        self.mv2.append(MV2Block(channels[2], channels[3], 1, expansion))\r\n        self.mv2.append(MV2Block(channels[2], channels[3], 1, expansion))\r\n        self.mv2.append(MV2Block(channels[3], channels[4], 2, expansion))\r\n        self.mv2.append(MV2Block(channels[5], channels[6], 2, expansion))\r\n        self.mv2.append(MV2Block(channels[7], channels[8], 2, expansion))\r\n\r\n        self.mvit = nn.ModuleList([])\r\n        self.mvit.append(MobileViTBlock(dims[0], L[0], channels[5], kernel_size, patch_size, int(dims[0] * 2)))\r\n        self.mvit.append(MobileViTBlock(dims[1], L[1], channels[7], kernel_size, patch_size, int(dims[1] * 4)))\r\n        self.mvit.append(MobileViTBlock(dims[2], L[2], channels[9], kernel_size, patch_size, int(dims[2] * 4)))\r\n\r\n        self.conv2 = conv_1x1_bn(channels[-2], channels[-1])\r\n\r\n        self.pool = nn.AvgPool2d(ih \/\/ 32, 1)\r\n        self.fc = nn.Linear(channels[-1], num_classes, bias=False)\r\n","AFTER":"        depths = (2, 4, 3)\r\n    ):\r\n        super().__init__()\r\n        assert len(dims) == 3, 'dims must be a tuple of 3'\r\n        assert len(depths) == 3, 'depths must be a tuple of 3'\r\n\r\n        ih, iw = image_size\r\n        ph, pw = patch_size\r\n        assert ih % ph == 0 and iw % pw == 0\r\n\r\n        init_dim, *_, last_dim = channels\r\n\r\n        self.conv1 = conv_bn_relu(3, init_dim, kernel=3, stride=2)\r\n\r\n        self.stem = nn.ModuleList([])\r\n        self.stem.append(MV2Block(channels[0], channels[1], 1, expansion))\r\n        self.stem.append(MV2Block(channels[1], channels[2], 2, expansion))\r\n        self.stem.append(MV2Block(channels[2], channels[3], 1, expansion))\r\n        self.stem.append(MV2Block(channels[2], channels[3], 1, expansion))\r\n    \r\n        self.trunk = nn.ModuleList([])\r\n        self.trunk.append(nn.ModuleList([\r\n            MV2Block(channels[3], channels[4], 2, expansion),\r\n            MobileViTBlock(dims[0], depths[0], channels[5], kernel_size, patch_size, int(dims[0] * 2))\r\n        ]))\r\n\r\n        self.trunk.append(nn.ModuleList([\r\n            MV2Block(channels[5], channels[6], 2, expansion),\r\n            MobileViTBlock(dims[1], depths[1], channels[7], kernel_size, patch_size, int(dims[1] * 4))\r\n        ]))\r\n\r\n        self.trunk.append(nn.ModuleList([\r\n            MV2Block(channels[7], channels[8], 2, expansion),\r\n            MobileViTBlock(dims[2], depths[2], channels[9], kernel_size, patch_size, int(dims[2] * 4))\r\n        ]))\r\n\r\n        self.to_logits = nn.Sequential(\r\n            conv_1x1_bn(channels[-2], last_dim),\r\n            Reduce('b c h w -> b c', 'mean'),\r\n            nn.Linear(channels[-1], num_classes, bias=False)\r\n        )\r\n"}