{"BEFORE":"        self.kernel_size = 3\n        self.scale_factor = 0.25*128\/self.block_size # TODO\n        self.use_frame_state = True\n        self.use_prev_output = True\n        self.output_num_classes = settings['block_num_classes']\n        self.use_prev_grid = True\n        \n        \n        in_channels = 3 # input image RGB\n        if self.use_frame_state:\n            in_channels += 3\n        if self.use_prev_output:\n            in_channels += self.output_num_classes\n        if self.use_prev_grid:\n            in_channels += 1\n        \n        self.backbone = backbones.__dict__[settings['block_net']](pretrained=False, in_channels=in_channels, width_factor=1)\n        \n        mid_channels = self.backbone.OUT_CHANNELS\/\/2\n        \n        strides = [2,2,2]\n        head = []\n        head.append(self._make_layer(self.backbone.OUT_CHANNELS, mid_channels, kernel_size=self.kernel_size, stride=strides[0]))\n        head.append(self._make_layer(mid_channels, mid_channels, kernel_size=self.kernel_size, stride=strides[1]))\n        head.append(self._make_layer(mid_channels, 1, kernel_size=self.kernel_size, stride=strides[2], bnrelu=False))\n","AFTER":"        in_channels = 3 # input image RGB\n        if self.use_frame_state:\n            in_channels += 3\n        if self.use_prev_output:\n            in_channels += self.output_num_classes\n        if self.use_prev_grid:\n            in_channels += 1\n        \n        self.backbone = backbones.__dict__[settings['block_net']](pretrained=False, in_channels=in_channels, width_factor=1)\n        \n        # mid_channels = self.backbone.OUT_CHANNELS\/\/2\n        planes = 96\n        kernel_sizes = [3,3,5,5,5,5,3]\n        strides      = [2,2,2,1,2,2,1]\n        assert len(strides) > 3\n        layers = []\n        layers.append(self._make_layer(in_channels, 32, kernel_size=kernel_sizes[0], stride=strides[0]))\n        layers.append(self._make_layer(32, planes, kernel_size=kernel_sizes[1], stride=strides[1]))\n        for i in range(2, len(strides)-2):\n            print('i', i)\n            print('strides', strides[i])\n            layers.append(self._make_layer(planes, planes, kernel_size=kernel_sizes[i], stride=strides[i]))\n        layers.append(self._make_layer(planes, 1, kernel_size=kernel_sizes[-1], stride=strides[-1], bnrelu=False))\n"}