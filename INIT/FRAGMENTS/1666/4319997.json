{"BEFORE":"    def __init__(self, n_in, n_out=1, layers=(), dropout_rate=0.0, context=1, n_in_base=4, mix_base=0):\n        super(CNNUnpairedLayer, self).__init__()\n        self.context = context\n        self.mix_base = mix_base\n        if len(layers)>0 and layers[0]==0:\n            layers = ()\n\n        n = n_in\n        n += n_in_base*mix_base\n\n        l = []\n        for m in layers:\n            l += [ \n                nn.Conv1d(n, m, context, padding=context\/\/2), \n                nn.GroupNorm(1, m),\n                nn.ELU(), \n                nn.Dropout(p=dropout_rate) ]\n            n = m\n        l += [ nn.Conv1d(n, n_out, context, padding=context\/\/2), nn.GroupNorm(1, n_out) ]\n        self.net = nn.Sequential(*l)\n","AFTER":"        conv = []\n        for n_out, f_sz in zip(num_filters_2d, filter_size_2d):\n            conv += [\n                nn.Conv1d(n_in, n_out, f_sz, padding=f_sz\/\/2), \n                nn.GroupNorm(1, n_out),\n                nn.CELU(), \n                nn.Dropout(p=dropout_rate)\n            ]\n            n_in = n_out\n        self.conv = nn.Sequential(*conv) if len(conv) > 0 else nn.Identity()\n"}