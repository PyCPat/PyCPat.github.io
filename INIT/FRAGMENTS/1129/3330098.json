{"BEFORE":"                 bn_eval=True,\n                 bn_frozen=False,\n                 with_cp=False):\n        super(ResNet, self).__init__()\n        if depth not in self.arch_settings:\n            raise KeyError('invalid depth {} for resnet'.format(depth))\n        assert num_stages >= 1 and num_stages <= 4\n        block, stage_blocks = self.arch_settings[depth]\n        stage_blocks = stage_blocks[:num_stages]\n        assert len(strides) == len(dilations) == num_stages\n        assert max(out_indices) < num_stages\n\n        self.out_indices = out_indices\n        self.style = style\n        self.frozen_stages = frozen_stages\n        self.bn_eval = bn_eval\n        self.bn_frozen = bn_frozen\n        self.with_cp = with_cp\n\n        self.inplanes = 64\n        self.conv1 = nn.Conv2d(\n            3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        self.bn1 = nn.BatchNorm2d(64)\n","AFTER":"        assert isinstance(normalize, dict) and 'type' in normalize\n        assert normalize['type'] in ['BN', 'GN']\n        if normalize['type'] == 'GN':\n            assert 'num_groups' in normalize\n        else:\n            assert (set(['type', 'frozen_stages', 'bn_eval', 'bn_frozen'])\n                    == set(normalize))\n\n        self.out_indices = out_indices\n        self.style = style\n        self.with_cp = with_cp\n        if normalize['type'] == 'BN':\n            self.frozen_stages = normalize['frozen_stages']\n            self.bn_eval = normalize['bn_eval']\n            self.bn_frozen = normalize['bn_frozen']\n        self.normalize = normalize\n\n        self.inplanes = 64\n        self.conv1 = nn.Conv2d(\n            3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        stem_norm = build_norm_layer(normalize, 64)\n        self.stem_norm_name = 'gn1' if normalize['type'] == 'GN' else 'bn1'\n        self.add_module(self.stem_norm_name, stem_norm)\n"}