{"BEFORE":"        super(ResNet50M, self).__init__()\n        self.loss = loss\n        resnet50 = torchvision.models.resnet50(pretrained=True)\n        base = nn.Sequential(*list(resnet50.children())[:-2])\n        self.layers1 = nn.Sequential(base[0], base[1], base[2])\n        self.layers2 = nn.Sequential(base[3], base[4])\n        self.layers3 = base[5]\n        self.layers4 = base[6]\n        self.layers5a = base[7][0]\n        self.layers5b = base[7][1]\n        self.layers5c = base[7][2]\n        self.fc_fuse = nn.Sequential(nn.Linear(4096, 1024), nn.BatchNorm1d(1024), nn.ReLU())\n        self.classifier = nn.Linear(3072, num_classes)\n        self.feat_dim = 3072 # feature dimension\n","AFTER":"    def __init__(self, num_classes, loss, block, layers,\n                 last_stride=2,\n                 fc_dims=None,\n                 **kwargs):\n        self.inplanes = 64\n        super(ResNet, self).__init__()\n        self.loss = loss\n        self.feature_dim = 512 * block.expansion\n        \n        # backbone network\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        self.bn1 = nn.BatchNorm2d(64)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=last_stride)\n        \n        self.global_avgpool = nn.AdaptiveAvgPool2d(1)\n        self.fc = self._construct_fc_layer(fc_dims, 512 * block.expansion)\n        self.classifier = nn.Linear(self.feature_dim, num_classes)\n\n        self._init_params()\n"}