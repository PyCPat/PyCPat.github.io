{"BEFORE":"                 device: str) -> None:\n        super(GraphRNNEncoder, self).__init__()\n\n        self.time_steps = time_steps\n        self.number_of_nodes = number_of_nodes\n        self.number_of_node_features = number_of_node_features\n        self.fully_connected_layer_input_size = fully_connected_layer_input_size\n        self.fully_connected_layer_output_size = fully_connected_layer_output_size\n        self.device = device\n\n        self.w_graph_node_features = nn.Parameter(\n            nn.init.kaiming_normal_(to.zeros([number_of_node_features, number_of_node_features], device=self.device)),\n            requires_grad=True)\n        self.w_graph_neighbor_messages = nn.Parameter(\n            nn.init.kaiming_normal_(to.zeros([number_of_node_features, number_of_node_features], device=self.device)),\n            requires_grad=True)\n        self.u_graph_node_features = nn.Parameter(\n            nn.init.kaiming_normal_(to.zeros([number_of_nodes, number_of_nodes], device=self.device)),\n            requires_grad=True)\n        self.u_graph_neighbor_messages = nn.Parameter(\n            nn.init.kaiming_normal_(to.zeros([number_of_node_features, number_of_node_features], device=self.device)),\n            requires_grad=True)\n        self.linear = to.nn.Linear(self.fully_connected_layer_input_size, self.fully_connected_layer_output_size)\n        self.sigmoid = to.nn.Sigmoid()\n","AFTER":"        self.fully_connected_layer_input_size = fully_connected_layer_input_size\n        self.fully_connected_layer_output_size = fully_connected_layer_output_size\n\n        self.w_graph_node_features = nn.Parameter(\n            to.empty([number_of_node_features, number_of_node_features]),\n            requires_grad=True)\n        self.w_graph_neighbor_messages = nn.Parameter(\n            to.empty([number_of_node_features, number_of_node_features]),\n            requires_grad=True)\n        self.u_graph_node_features = nn.Parameter(\n            to.empty([number_of_nodes, number_of_nodes]),\n            requires_grad=True)\n        self.u_graph_neighbor_messages = nn.Parameter(\n            to.empty([number_of_node_features, number_of_node_features]),\n            requires_grad=True)\n        self.linear_weight = nn.Parameter(\n            to.empty([self.fully_connected_layer_output_size, self.fully_connected_layer_input_size]),\n            requires_grad=True)\n        self.linear_bias = nn.Parameter(\n            to.empty(self.fully_connected_layer_output_size),\n            requires_grad=True)\n        self.reset_parameters()\n"}