{"BEFORE":"        self.conv51 = nn.Conv2d(128, 128, 5, stride=2, padding=2)\n\n        # input 16x16x128 output 8x8x128\n        self.conv52 = nn.Conv2d(128, 128, 5, stride=2, padding=2)\n\n        # input 8x8x128 output 1x1x128\n        self.conv53 = nn.Conv2d(128, 128, 8, stride=2, padding=0)\n\n        self.fc = nn.Sequential(\n            nn.Linear(1, 1),\n            nn.SELU(inplace=True),\n            nn.Linear(1, 1),\n        )\n\n        # input 32x32x128 output 32x32x128\n        # the global features should be concatenated to the feature map after this layer\n        # the output after concat would be 32x32x256\n        self.conv6 = nn.Conv2d(128, 128, 5, stride=1, padding=2)\n\n        # input 32x32x256 output 32x32x128\n        self.conv7 = nn.Conv2d(256, 128, 5, stride=1, padding=2)\n\n        # deconvolutional layers\n        # input 32x32x128 output 64x64x128\n        self.dconv1 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(128),\n            nn.ConvTranspose2d(128, 128, 4, stride=2, padding=1)\n        )\n\n        # input 64x64x128 ouput 128x128x128\n        self.dconv2 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(256),\n            nn.ConvTranspose2d(256, 128, 4, stride=2, padding=1)\n        )\n\n        # input 128x128x192 output 256x256x64\n        self.dconv3 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(192),\n            nn.ConvTranspose2d(192, 64, 4, stride=2, padding=1)\n        )\n\n        # input 256x256x96 ouput 512x512x32\n        self.dconv4 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(96),\n            nn.ConvTranspose2d(96, 32, 4, stride=2, padding=1)\n        )\n\n        # final convolutional layers\n        # input 512x512x48 output 512x512x16\n        self.conv8 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(48),\n            nn.Conv2d(48, 16, 5, stride=1, padding=2)\n        )\n\n        # input 512x512x16 output 512x512x3\n        self.conv9 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(16),\n            nn.Conv2d(16, 3, 5, stride=1, padding=2)\n","AFTER":"            nn.ReplicationPad2d(2),\n            nn.Conv2d(3, 16, 5, stride=1, padding=0),\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(16)\n        )\n\n        # input 512x512x16  output 256x256x32\n        self.conv2 = nn.Sequential(\n            nn.ReplicationPad2d(2),\n            nn.Conv2d(16, 32, 5, stride=2, padding=0),\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(32)\n        )\n\n        # input 256x256x32  output 128x128x64\n        self.conv3 = nn.Sequential(\n            nn.ReplicationPad2d(2),\n            nn.Conv2d(32, 64, 5, stride=2, padding=0),\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(64)\n        )\n\n        # input 128x128x64  output 64x64x128\n        self.conv4 = nn.Sequential(\n            nn.ReplicationPad2d(2),\n            nn.Conv2d(64, 128, 5, stride=2, padding=0),\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(128)\n        )\n\n        # input 64x64x128  output 32x32x128\n        # the output of this layer we need layers for global features\n        self.conv5 = nn.Sequential(\n            nn.ReplicationPad2d(2),\n            nn.Conv2d(128, 128, 5, stride=2, padding=0),\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(128)\n        )\n\n        # convs for global features\n        # input 32x32x128 output 16x16x128\n        self.conv51 = nn.Sequential(\n            nn.ReplicationPad2d(2), \n            nn.Conv2d(128, 128, 5, stride=2, padding=0))\n\n        # input 16x16x128 output 8x8x128\n        self.conv52 = nn.Sequential(\n            nn.ReplicationPad2d(2),\n            nn.Conv2d(128, 128, 5, stride=2, padding=0))\n\n        # input 8x8x128 output 1x1x128\n        self.conv53 = nn.Conv2d(128, 128, 8, stride=1, padding=0)\n        \n        # revise this linear laye rin the orginal they appear to use a convoltion\n        self.fc = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.Conv2d(128,128,1,1)\n        )\n\n        # input 32x32x128 output 32x32x128\n        # the global features should be concatenated to the feature map after this layer\n\n        #add resizing over here with mode neares torch.nn.Upsample(size=None, scale_factor=None, mode='nearest', align_corners=False)\n\n\n\n        # the output after concat would be 32x32x256\n        self.conv6 =  nn.Sequential(  \n            nn.Conv2d(128, 128, 1, stride=1, padding=0) )\n\n        # input 32x32x256 output 32x32x128\n        self.conv7 = nn.Sequential(  nn.ReplicationPad2d(2), \n            nn.Conv2d(256, 128, 3, stride=1, padding=0) )\n\n        # deconvolutional layers\n        # input 32x32x128 output 64x64x128\n        self.dconv1 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(128),\n            nn.ReplicationPad2d(1),\n            nn.Conv2d(128, 128, 3, stride=1, padding=0),\n            nn.Upsample(scale_factor=2,  mode='nearest') \n        )\n\n        # input 64x64x128 ouput 128x128x128\n        self.dconv2 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(256),\n           \n            nn.ReplicationPad2d(1),\n\n            nn.Conv2d(256, 128, 3, stride=1, padding=0),\n            nn.Upsample(scale_factor=2, mode='nearest')\n        )\n\n        # input 128x128x192 output 256x256x96\n        self.dconv3 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(192),\n            nn.ReplicationPad2d(1),\n            nn.Conv2d(192, 64, 3, stride=1, padding=0),\n            nn.Upsample(scale_factor=2, mode='nearest')\n        )\n\n        # input 256x256x96 ouput 512x512x32\n        self.dconv4 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(96),\n            nn.ReplicationPad2d(1),\n            nn.Conv2d(96, 32, 3, stride=1, padding=0),\n            nn.Upsample(scale_factor=2, mode='nearest')\n        )\n\n        # final convolutional layers\n        # input 512x512x48 output 512x512x16\n        self.conv8 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(48),\n            #nn.ReplicationPad2d(1),\n            nn.Conv2d(48, 16, 1, stride=1, padding=0)\n        )\n\n        # input 512x512x16 output 512x512x3\n        self.conv9 = nn.Sequential(\n            nn.SELU(inplace=True),\n            nn.InstanceNorm2d(16),\n            #nn.ReplicationPad2d(1),\n            nn.Conv2d(16, 3, 1, stride=1, padding=0)\n"}