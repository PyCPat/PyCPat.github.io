{"BEFORE":"    def __init__(self):\n        super(VAE, self).__init__()\n\n        self.fc1 = nn.Linear(784, 400)\n        self.fc21 = nn.Linear(400, 20)\n        self.fc22 = nn.Linear(400, 20)\n        self.fc3 = nn.Linear(20, 400)\n        self.fc4 = nn.Linear(400, 784)\n","AFTER":"    def __init__(self, mode='train'):\n        super(VAE, self).__init__()\n        self.mode = mode\n        self.encoder = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(32, 64, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(128),\n            nn.ReLU(inplace=True),\n            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True)\n        )\n\n        self.sigma = nn.Conv2d(256, 1024, kernel_size=4, bias=False)\n        self.mu = nn.Conv2d(256, 1024, kernel_size=4, bias=False)\n\n        self.decoder = nn.Sequential(\n            nn.ConvTranspose2d(1024, 256, kernel_size=4, bias=False),\n            nn.BatchNorm2d(256),\n            nn.ReLU(inplace=True),\n            nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(128),\n            nn.ReLU(inplace=True),\n            nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(64),\n            nn.ReLU(inplace=True),\n            nn.ConvTranspose2d(64, 32, kernel_size=4, stride=2, padding=1, bias=False),\n            nn.BatchNorm2d(32),\n            nn.ReLU(inplace=True),\n            nn.ConvTranspose2d(32, 3, kernel_size=4, stride=2, padding=1, bias=False)\n        )\n\n        self.output = nn.Tanh()\n"}