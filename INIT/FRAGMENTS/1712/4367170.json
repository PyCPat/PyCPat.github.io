{"BEFORE":"        actor_layer_size = [input_dim] + hidden_layer + [action_dim]\n        actor_layers = nn.ModuleList([layer_init(nn.Linear(actor_layer_size[i], actor_layer_size[i+1])) for i in range(len(actor_layer_size)-1)])\n        self.actor = nn.Sequential(*actor_layers)\n    \n        critic_layer_size = [input_dim] + hidden_layer + [1]\n        critic_layers = nn.ModuleList([layer_init(nn.Linear(critic_layer_size[i], critic_layer_size[i+1])) for i in range(len(critic_layer_size)-1)])\n        self.critic = nn.Sequential(*critic_layers)\n","AFTER":"    def __init__(self, input_channels, action_dim,  hidden_size = 512, flatten_size = 64*7*7):\n        super(CatACConvNet, self).__init__()\n        self.main = ConvBody(input_channels = input_channels, hidden_size = hidden_size, flatten_size = flatten_size)\n        self.actor = layer_init(nn.Linear(hidden_size, action_dim), gain = 0.01)\n        self.critic = layer_init(nn.Linear(hidden_size, 1))\n        self.actor_params = list(self.main.parameters()) + list(self.actor.parameters())\n        self.critic_params = list(self.main.parameters()) + list(self.critic.parameters())\n"}