{"BEFORE":"        self.use_affine_level = use_affine_level\n        if self.use_affine_level:\n            self.noise_func = Conv1dWithInitialization(\n                in_channels=noise_channel,\n                out_channels=out_channels*2,\n                kernel_size=3,\n                stride=1,\n                padding=1\n            )\n        else:\n            self.noise_func = Conv1dWithInitialization(\n                in_channels=noise_channel,\n                out_channels=out_channels,\n                kernel_size=3,\n                stride=1,\n                padding=1\n            )\n\n        self.conv1 = nn.Conv2d(in_channels, out_channels, 3, 1, padding=1)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, 3, 1, padding=1)\n\n        # Batch Normalization\n        self.bn1 = nn.BatchNorm2d(in_channels)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n\n        self.model1 = nn.Sequential(\n            self.bn1,\n            nn.ReLU(),\n            nn.Upsample(scale_factor=2) if stride > 1 else nn.Identity(),\n            self.conv1,\n        )\n        self.model2 = nn.Sequential(\n            self.bn2,\n            nn.ReLU(),\n            nn.Dropout(dropout) if dropout > 0 else nn.Identity(),\n            self.conv2\n        )\n        self.bypass = nn.Sequential()\n        if stride != 1:\n            self.bypass = nn.Upsample(scale_factor=2)\n\n    def forward(self, x_in, noise_embed):\n","AFTER":"        self.noise_func = FeatureWiseAffine(\n            noise_channel, out_channels, use_affine_level)\n\n        self.model1 = nn.Sequential(\n            nn.BatchNorm2d(in_channels),\n            nn.ReLU(),\n            nn.Upsample(scale_factor=2) if stride > 1 else nn.Identity(),\n            nn.Conv2d(in_channels, out_channels, 3, 1, padding=1)\n        )\n        self.model2 = nn.Sequential(\n            nn.BatchNorm2d(out_channels),\n            nn.ReLU(),\n            nn.Dropout(dropout) if dropout > 0 else nn.Identity(),\n            nn.Conv2d(out_channels, out_channels, 3, 1, padding=1)\n        )\n        self.bypass = nn.Sequential(\n            nn.Upsample(scale_factor=2) if stride > 1 else nn.Identity(),\n            nn.Conv2d(in_channels, out_channels, 1, 1)\n        )\n"}