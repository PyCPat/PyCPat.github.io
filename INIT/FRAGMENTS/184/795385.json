{"BEFORE":"        self.bn1 = nn.BatchNorm2d(planes)\n        self.bn2 = nn.BatchNorm2d(planes)\n        self.conv3 = nn.Conv2d(\n            planes, planes * self.expansion, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(planes * self.expansion)\n","AFTER":"                 normalize=dict(type='BN')):\n        \"\"\"Bottleneck block.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"\n        super(Bottleneck, self).__init__()\n        assert style in ['pytorch', 'caffe']\n        if style == 'pytorch':\n            conv1_stride = 1\n            conv2_stride = stride\n        else:\n            conv1_stride = stride\n            conv2_stride = 1\n        self.conv1 = nn.Conv2d(\n            inplanes, planes, kernel_size=1, stride=conv1_stride, bias=False)\n        self.conv2 = nn.Conv2d(\n            planes,\n            planes,\n            kernel_size=3,\n            stride=conv2_stride,\n            padding=dilation,\n            dilation=dilation,\n            bias=False)\n\n        norm_layers = []\n        norm_layers.append(build_norm_layer(normalize, planes))\n        norm_layers.append(build_norm_layer(normalize, planes))\n        norm_layers.append(build_norm_layer(normalize, planes*self.expansion))\n        self.norm_names = (['gn1', 'gn2', 'gn3'] if normalize['type'] == 'GN'\n                           else ['bn1', 'bn2', 'bn3'])\n        for name, layer in zip(self.norm_names, norm_layers):\n            self.add_module(name, layer)\n\n        self.conv3 = nn.Conv2d(\n            planes, planes * self.expansion, kernel_size=1, bias=False)\n        self.relu = nn.ReLU(inplace=True)\n        self.downsample = downsample\n        self.stride = stride\n        self.dilation = dilation\n        self.with_cp = with_cp\n        self.normalize = normalize\n"}