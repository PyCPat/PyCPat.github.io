{"BEFORE":"        for i in range(time_dim):\n            if i > 0:\n                self.T_s[0][i-1][i] = 1\n                self.T_s[0][i][i-1] = 1\n\n            if i < time_dim - 1:\n                self.T_s[0][i+1][i] = 1\n                self.T_s[0][i][i+1] = 1\n            \n            self.T_s[0][i][i] = 1\n\n        self.joints_dim = joints_dim\n","AFTER":"                 version='long'\n    ):\n        super(ConvTemporalGraphicalEnhanced,self).__init__()\n        \n        self.A=nn.Parameter(torch.FloatTensor(time_dim, joints_dim, joints_dim)) #learnable, graph-agnostic 3-d adjacency matrix(or edge importance matrix)\n        stdv = 1. \/ math.sqrt(self.A.size(1))\n        self.A.data.uniform_(-stdv,stdv)\n\n        self.T=nn.Parameter(torch.FloatTensor(joints_dim, time_dim, time_dim)) \n        stdv = 1. \/ math.sqrt(self.T.size(1))\n        self.T.data.uniform_(-stdv,stdv)\n        '''\n        self.prelu = nn.PReLU()\n        \n        self.Z=nn.Parameter(torch.FloatTensor(joints_dim, joints_dim, time_dim, time_dim)) \n        stdv = 1. \/ math.sqrt(self.Z.size(2))\n        self.Z.data.uniform_(-stdv,stdv)\n        '''\n        self.A_s = torch.zeros((1,joints_dim,joints_dim), requires_grad=False)\n        for i, dim in enumerate(dim_used):\n            self.A_s[0][i][i] = 1\n            if parents[dim] in dim_used:\n                parent_index = dim_used.index(parents[dim])\n                self.A_s[0][i][parent_index] = 1\n                self.A_s[0][parent_index][i] = 1\n            if dim in joints_left:\n                index = joints_left.index(dim)\n                right_dim = joints_right[index]\n                right_index = dim_used.index(right_dim)\n                if right_dim in dim_used:\n                    self.A_s[0][i][right_index] = 1\n                    self.A_s[0][right_index][i] = 1\n        self.T_s = torch.zeros((1,time_dim,time_dim), requires_grad=False)\n        if version == 'long':\n            for i in range(time_dim):\n                if i > 0:\n                    self.T_s[0][i-1][i] = 1\n                    self.T_s[0][i][i-1] = 1\n\n                if i < time_dim - 1:\n                    self.T_s[0][i+1][i] = 1\n                    self.T_s[0][i][i+1] = 1\n                \n                self.T_s[0][i][i] = 1\n        elif version == 'short':\n            self.T_s = self.T_s + 1\n        else:\n            raise Exception(\"model type should be long or short\")\n\n        self.joints_dim = joints_dim\n"}