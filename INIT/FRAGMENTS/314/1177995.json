{"BEFORE":"        self.use_adapters = config.use_adapters\n        if config.add_cross_attention:\n            self.crossattention = GPT2Attention(config, is_cross_attention=True)\n            self.ln_cross_attn = nn.LayerNorm(hidden_size, eps=config.layer_norm_epsilon)\n\n        self.mlp = GPT2MLP(inner_dim, config)\n        adapter_dict = {}\n        if self.use_adapters:\n            for key, value in self.domain_dict:\n                adapter_dict[key] = Adapter(config)\n        self.adapter_dict = adapter_dict\n\n        # self.domain_dict = config.domain_dict\n        self.domain_dict = {4: 2, 5: 2, 6: 3, 7: 3, 2: 1, 3: 1, 1: 0}\n","AFTER":"        self.use_adapters = config.use_adapters\n        if config.add_cross_attention:\n            self.crossattention = GPT2Attention(config, is_cross_attention=True)\n            self.ln_cross_attn = nn.LayerNorm(hidden_size, eps=config.layer_norm_epsilon)\n\n        self.mlp = GPT2MLP(inner_dim, config)\n\n        self.domain_dict = config.domain_dict\n        adapter_list = []\n        if self.use_adapters:\n            for _ in self.domain_dict.keys():\n                adapter_list.append(Adapter(config))\n            self.adapter_module = nn.ModuleList(adapter_list)\n\n            logger.info(f\"I was given a tree with {len(self.domain_dict.keys())} nodes and I initialized {len(adapter_list)} adapters!\")\n\n    def forward(\n"}