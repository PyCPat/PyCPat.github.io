{"BEFORE":"    def __init__(self, upscale_factor, num_residual_block=16, init_weights=True):\n        r\"\"\" This is an esrgan model defined by the author himself.\n\n        We use two settings for our generator \u2013 one of them contains 16 residual blocks, with a capacity similar\n        to that of SRGAN and the other is a deeper model with 23 RRDB blocks.\n\n        Args:\n            upscale_factor (int): Image magnification factor. (Default: 4).\n            num_residual_block (int): How many residual blocks are combined. (Default: 16).\n            init_weights (optional, bool): Whether to initialize the initial neural network. (Default: ``True``).\n        \"\"\"\n        num_upsample_block = int(math.log(upscale_factor, 2))\n\n        super(Generator, self).__init__()\n        # First layer\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(3, 64, kernel_size=9, padding=4, bias=False),\n            nn.PReLU()\n        )\n\n        # 16 Residual blocks\n        residual_blocks = []\n        for _ in range(num_residual_block):\n            residual_blocks.append(ResidualBlock(64))\n        self.residual_blocks = nn.Sequential(*residual_blocks)\n\n        # Second conv layer post residual blocks\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),\n            nn.BatchNorm2d(64)\n        )\n\n        # Upsampling layers\n        upsampling = []\n        for out_features in range(num_upsample_block):\n            upsampling += [\n                nn.Conv2d(64, 256, kernel_size=3, stride=1, padding=1, bias=False),\n                nn.BatchNorm2d(256),\n                nn.PixelShuffle(upscale_factor=2),\n                nn.PReLU(),\n            ]\n        self.upsampling = nn.Sequential(*upsampling)\n\n        # Final output layer\n        self.conv3 = nn.Conv2d(64, 3, kernel_size=9, stride=1, padding=4, bias=False)\n\n        if init_weights:\n            self._initialize_weights()\n\n    def _initialize_weights(self):\n","AFTER":"        self.conv3 = nn.Sequential(\n            nn.Conv2d(64, 3, kernel_size=9, stride=1, padding=4, bias=False),\n            nn.Tanh()\n        )\n"}