{"BEFORE":"        self.mlp = nn.Sequential(\n            nn.Linear(in_channels, hid_channels),\n            nn.BatchNorm1d(hid_channels, momentum=0.001, affine=False),\n            nn.ReLU(inplace=True), nn.Dropout(),\n            nn.Linear(hid_channels, out_channels), nn.ReLU(inplace=True))\n","AFTER":"                 sync_bn=False,\n                 with_avg_pool=True):\n        super(NonLinearNeckV0, self).__init__()\n        self.with_avg_pool = with_avg_pool\n        if with_avg_pool:\n            self.avgpool = nn.AdaptiveAvgPool2d((1, 1))\n\n        if version.parse(torch.__version__) < version.parse(\"1.4.0\"):\n            self.expand_for_syncbn = True\n        else:\n            self.expand_for_syncbn = False\n\n        self.fc0 = nn.Linear(in_channels, hid_channels)\n        if sync_bn:\n            _, self.bn0 = build_norm_layer(\n                dict(type='SyncBN', momentum=0.001, affine=False),\n                hid_channels)\n        else:\n            self.bn0 = nn.BatchNorm1d(\n                hid_channels, momentum=0.001, affine=False)\n\n        self.fc1 = nn.Linear(hid_channels, out_channels)\n        self.relu = nn.ReLU(inplace=True)\n        self.drop = nn.Dropout()\n        self.sync_bn = sync_bn\n"}