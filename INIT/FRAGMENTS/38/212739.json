{"BEFORE":"        n_channels = observation_shape[0]\n        self.conv1 = nn.Conv2d(n_channels, 32, kernel_size=8, stride=4)\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=4, stride=2)\n        self.conv3 = nn.Conv2d(64, 64, kernel_size=3, stride=1)\n\n        if use_batch_norm:\n            self.bn1 = nn.BatchNorm2d(32)\n            self.bn2 = nn.BatchNorm2d(64)\n            self.bn3 = nn.BatchNorm2d(64)\n            self.bn4 = nn.BatchNorm1d(512)\n\n        self.fc = nn.Linear(self._get_linear_input_size(), 512)\n","AFTER":"                 filters=None,\n                 feature_size=None,\n                 use_batch_norm=True):\n        super().__init__()\n\n        # default architecture is based on Nature DQN paper.\n        if filters is None:\n            filters = [(32, 8, 4), (64, 4, 2), (64, 3, 1)]\n        if feature_size is None:\n            feature_size = 512\n\n        self.observation_shape = observation_shape\n        self.use_batch_norm = use_batch_norm\n        self.feature_size = feature_size\n\n        # convolutional layers\n        in_channels = [observation_shape[0]] + [f[0] for f in filters[:-1]]\n        self.convs = nn.ModuleList()\n        self.conv_bns = nn.ModuleList()\n        for in_channel, f in zip(in_channels, filters):\n            out_channel, kernel_size, stride = f\n            conv = nn.Conv2d(in_channel,\n                             out_channel,\n                             kernel_size=kernel_size,\n                             stride=stride)\n            self.convs.append(conv)\n\n            if use_batch_norm:\n                self.conv_bns.append(nn.BatchNorm2d(out_channel))\n\n        # last dense layer\n        self.fc = nn.Linear(self._get_linear_input_size(), feature_size)\n        if use_batch_norm:\n            self.fc_bn = nn.BatchNorm1d(feature_size)\n\n    def _get_linear_input_size(self):\n"}