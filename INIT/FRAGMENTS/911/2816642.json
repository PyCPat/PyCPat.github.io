{"BEFORE":"        self.conv = nn.Sequential(conv2(12, 3, 64, 1), nn.ReLU())\n        self.num = FLAGS.num_resblock\n        self.resid = {}\n        for i in range(1, FLAGS.num_resblock + 1, 1):\n            if i == 1:\n                net = nn.Sequential(residual_block(64, 64, 1), conv2_tran(64, 3, 64, 2), nn.ReLU(),\n                                    conv2_tran(64, 3, 64, 2), nn.ReLU(), conv2(64, 3, gen_output_channels, 1))\n            else:\n                net = nn.Sequential(residual_block(gen_output_channels, 64, 1), conv2_tran(64, 3, 64, 2), nn.ReLU(),\n                                    conv2_tran(64, 3, 64, 2), nn.ReLU(), conv2(64, 3, gen_output_channels, 1))\n\n            self.resid[str(i)] = net\n\n    def forward(self, x):\n","AFTER":"        self.conv = nn.Sequential(conv2(51, 3, 64, 1), nn.ReLU())\n        self.num = FLAGS.num_resblock\n        self.resid = residual_block(64, 64, 1)\n        self.conv_trans = nn.Sequential(conv2_tran(64, 3, 64, stride=2, output_padding=1), nn.ReLU()\n                                        ,conv2_tran(64, 3, 64, stride=2, output_padding=1), nn.ReLU())\n        self.output = conv2(64, 3, gen_output_channels, 1)\n"}