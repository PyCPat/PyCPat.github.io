{"BEFORE":"        pad_size = [get_padding(filt_size, stride, dilation=1)] * 4\n        self.padding = nn.ReflectionPad2d(pad_size)\n        self._coeffs = torch.tensor((np.poly1d((0.5, 0.5)) ** (self.filt_size - 1)).coeffs)  # for torchscript compat\n        self.filt = {}  # lazy init by device for DataParallel compat\n","AFTER":"        self.channels = channels\n        self.filt_size = filt_size\n        self.stride = stride\n        self.padding = [get_padding(filt_size, stride, dilation=1)] * 4\n        coeffs = torch.tensor((np.poly1d((0.5, 0.5)) ** (self.filt_size - 1)).coeffs.astype(np.float32))\n        blur_filter = (coeffs[:, None] * coeffs[None, :])[None, None, :, :].repeat(self.channels, 1, 1, 1)\n        self.register_buffer('filt', blur_filter, persistent=False)\n"}