{"BEFORE":"        spectral_kernels = np.fft.fft(temporal_kernels, axis=-1) \/ fft_length\n        assert np.all(spectral_kernels.imag == 0)\n        spectral_kernels = spectral_kernels.astype(default_complex_dtype())\n        self.register_buffer(\"kernel\", torch.from_numpy(spectral_kernels).t())\n","AFTER":"        spectral_kernels = np.fft.fft(temporal_kernels, axis=-1) \/ fft_length\n        assert np.all(spectral_kernels.imag == 0)\n        self.register_buffer(\"kernel\", numpy_to_torch(spectral_kernels.T))\n"}