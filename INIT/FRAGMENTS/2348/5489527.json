{"BEFORE":"        self.version = version\n        if self.version == 'A0':\n            num_blocks=[2, 4, 14, 1]\n            width_multiplier=[0.75, 0.75, 0.75, 2.5]\n        elif self.version == 'A1':\n            num_blocks=[2, 4, 14, 1]\n            width_multiplier=[1, 1, 1, 2.5]\n        elif self.version == 'A2':\n            num_blocks=[2, 4, 14, 1]\n            width_multiplier=[1.5, 1.5, 1.5, 2.75]\n        elif self.version == 'B1':\n            num_blocks=[4, 6, 16, 1]\n            width_multiplier=[2, 2, 2, 4]\n        elif self.version == 'B2':\n            num_blocks=[4, 6, 16, 1]\n            width_multiplier=[2.5, 2.5, 2.5, 5]\n        else:\n            raise ValueError\n","AFTER":"        self.version = version\n        if self.version == \"repvgg-A0\":\n            num_blocks = [2, 4, 14, 1]\n            width_multiplier = [0.75, 0.75, 0.75, 2.5]\n            self.out_channels = (192, 1280)\n        elif self.version == \"repvgg-A1\":\n            num_blocks = [2, 4, 14, 1]\n            width_multiplier = [1, 1, 1, 2.5]\n            self.out_channels = (256, 1280)\n        elif self.version == \"repvgg-A2\":\n            num_blocks = [2, 4, 14, 1]\n            width_multiplier = [1.5, 1.5, 1.5, 2.75]\n            self.out_channels = (384, 1280)\n        else:\n            raise ValueError\n\n        assert len(width_multiplier) == 4\n\n        self.deploy = deploy\n        self.override_groups_map = override_groups_map or dict()\n\n        assert 0 not in self.override_groups_map\n\n        self.in_planes = min(64, int(64 * width_multiplier[0]))\n\n        self.stage0 = RepVGGBlock(\n            in_channels=3,\n            out_channels=self.in_planes,\n            kernel_size=3,\n            stride=2,\n            padding=1,\n            deploy=self.deploy,\n        )\n        self.cur_layer_idx = 1\n        self.stage1 = self._make_stage(\n            int(64 * width_multiplier[0]), num_blocks[0], stride=2\n        )\n        self.stage2 = self._make_stage(\n            int(128 * width_multiplier[1]), num_blocks[1], stride=2\n        )\n        self.stage3 = self._make_stage(\n            int(256 * width_multiplier[2]), num_blocks[2], stride=2\n        )\n        self.stage4 = self._make_stage(\n            int(512 * width_multiplier[3]), num_blocks[3], stride=2\n        )\n\n        if pretrained:\n            self.load_pre_trained_weights()\n\n            self.stage0.eval()\n            for param in self.stage0.parameters():\n                param.requires_grad = False\n            self.stage0.switch_to_deploy()\n            self.stage1.eval()\n            for param in self.stage1.parameters():\n                param.requires_grad = False\n            self.stage1[0].switch_to_deploy()\n            self.stage1[1].switch_to_deploy()\n"}