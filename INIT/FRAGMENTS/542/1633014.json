{"BEFORE":"        out_channels = config['start_channels']\n\n        num_stages = len(config['conv_kernels'])\n\n        # Down\n        self._stages = nn.ModuleList()\n        for stage_id in range(num_stages):\n\n            stage = EncoderBlock(\n                in_channels=in_channels,\n                out_channels=out_channels,\n                kernel_size=config['conv_kernels'][stage_id],\n                stride=config['strides'][stage_id]\n            )\n            self._stages.append(stage)\n\n            in_channels = out_channels\n            out_channels = floor(out_channels * config['channel_gain'])\n\n            if out_channels > config['max_channels']:\n                out_channels = config['max_channels']\n\n    def forward(self, x):\n","AFTER":"        out_channels = config['start_channels']\n\n        # Get number of encoder stages\n        num_stages = len(config['conv_kernels'])\n\n        # Define stochastic depth for drop path of swin blocks\n        swin_depth = config['depths']\n        drop_path_rate = [x.item() for x in torch.linspace(0, config['drop_path_rate'], sum(swin_depth))]\n\n        # Define downsample operation for swin blocks\n        downsample_layer = ConvPatchMerging if config['conv_merging'] else PatchMerging\n\n        # Down\n        self._stages = nn.ModuleList()\n        for stage_id in range(num_stages):\n\n            # Get encoder blocks\n            if config['use_encoder_attn'] and stage_id > 1: # Initial patch embedding done with convs\n                stage = EncoderSwinBlock(\n                    dim=in_channels,\n                    depth=config['depths'][stage_id - 2],\n                    num_heads=config['num_heads'][stage_id - 2],\n                    window_size=config['window_size'],\n                    mlp_ratio=config['mlp_ratio'],\n                    qkv_bias=config['qkv_bias'],\n                    qk_scale=config['qk_scale'],\n                    drop=config['drop_rate'],\n                    attn_drop=config['attn_drop_rate'],\n                    drop_path=drop_path_rate[sum(swin_depth[:stage_id - 2]):sum(swin_depth[:stage_id - 1])],\n                    downsample=downsample_layer\n                )\n            else:\n                stage = EncoderCnnBlock(\n                    in_channels=in_channels,\n                    out_channels=out_channels,\n                    kernel_size=config['conv_kernels'][stage_id],\n                    stride=config['strides'][stage_id]\n                )\n\n            self._stages.append(stage)\n\n            in_channels = out_channels\n            out_channels *= 2\n"}