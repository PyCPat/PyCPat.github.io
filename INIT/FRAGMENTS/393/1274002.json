{"BEFORE":"            norm(input_channels \/\/ 2, **norm_kwargs)\n            if norm is not None\n            else nn.Identity()\n        )\n        self.in_2 = (\n            norm(input_channels \/\/ 2, **norm_kwargs)\n            if norm is not None\n            else nn.Identity()\n        )\n        self.in_3 = (\n            norm(input_channels \/\/ 2, **norm_kwargs)\n            if norm is not None\n            else nn.Identity()\n        )\n\n        self.act = self.act(**act_kwargs)\n","AFTER":"            network_kwargs = {\"res\": False}\n\n        self.res = network_kwargs[\"res\"]\n\n        self.conv0 = conv(input_channels, input_channels \/\/ 2, **conv_kwargs)\n        self.conv1 = conv(input_channels \/\/ 2, input_channels \/\/ 2, **conv_kwargs)\n        self.conv2 = conv(input_channels \/\/ 2, input_channels \/\/ 2, **conv_kwargs)\n        self.conv3 = conv(input_channels \/\/ 2, output_channels, **conv_kwargs)\n\n        self.in_0 = (\n            norm(input_channels, **norm_kwargs) if norm is not None else nn.Identity()\n        )\n        self.in_1 = norm(input_channels \/\/ 2, **norm_kwargs)\n        self.in_2 = norm(input_channels \/\/ 2, **norm_kwargs)\n        self.in_3 = norm(input_channels \/\/ 2, **norm_kwargs)\n\n        self.act = act(**act_kwargs)\n\n        self.final_convolution_layer = final_convolution_layer\n"}