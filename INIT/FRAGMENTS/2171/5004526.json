{"BEFORE":"        in_sizes = [K * in_dim] + projections[:-1]\n        activations = [self.relu] * (len(projections) - 1) + [None]\n        self.conv1d_projections = nn.ModuleList(\n            [BatchNormConv1d(in_size, out_size, kernel_size=3, stride=1,\n                             padding=1, activation=ac)\n             for (in_size, out_size, ac) in zip(\n                 in_sizes, projections, activations)])\n\n        self.pre_highway = nn.Linear(projections[-1], in_dim, bias=False)\n        self.highways = nn.ModuleList(\n            [Highway(in_dim, in_dim) for _ in range(4)])\n","AFTER":"    def __init__(self, in_features, K=16, projections=[128, 128], num_highways=4):\n        super(CBHG, self).__init__()\n        self.in_features = in_features\n        self.relu = nn.ReLU()\n\n        # list of conv1d bank with filter size k=1...K\n        # TODO: try dilational layers instead\n        self.conv1d_banks = nn.ModuleList(\n            [BatchNormConv1d(in_features, in_features, kernel_size=k, stride=1,\n                             padding=k \/\/ 2, activation=self.relu)\n                for k in range(1, K + 1)])\n\n        # max pooling of conv bank\n        # TODO: try average pooling OR larger kernel size\n        self.max_pool1d = nn.MaxPool1d(kernel_size=2, stride=1, padding=1)\n\n        out_features = [K * in_features] + projections[:-1]\n        activations = [self.relu] * (len(projections) - 1) \n        activations += [None]\n\n        # setup conv1d projection layers\n        layer_set = []\n        for (in_size, out_size, ac) in zip(out_features, projections, activations):\n            layer = BatchNormConv1d(in_size, out_size, kernel_size=3, stride=1,\n                                    padding=1, activation=ac)\n            layer_set.append(layer)\n        self.conv1d_projections = nn.ModuleList(layer_set)\n\n        # setup Highway layers\n        self.pre_highway = nn.Linear(projections[-1], in_features, bias=False)\n        self.highways = nn.ModuleList(\n            [Highway(in_features, in_features) for _ in range(num_highways)])\n"}