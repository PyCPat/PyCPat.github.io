{"BEFORE":"        down_layers = [nn.ReflectionPad2d(3),\n                       nn.Conv2d(in_channels, 64, kernel_size=7, stride=1, padding=0, bias=False),\n                       nn.InstanceNorm2d(64),\n                       nn.ReLU(inplace=True)]\n\n        # Downsampling\n        down_layers += [nn.ReflectionPad2d(1),\n                        nn.Conv2d(64, 128, 3, stride=2, padding=0, bias=False),\n                        nn.InstanceNorm2d(128),\n                        nn.ReLU(inplace=True),\n                        nn.ReflectionPad2d(1),\n                        nn.Conv2d(128, 256, 3, stride=2, padding=0, bias=False),\n                        nn.InstanceNorm2d(256),\n                        nn.ReLU(inplace=True)]\n\n        # Down sampling residual blocks\n        for _ in range(4):\n            down_layers += [ResNetBlock(256)]\n\n        # Class Activation Map\n        self.gap_fc = nn.Linear(256, 1, bias=False)\n        self.gmp_fc = nn.Linear(256, 1, bias=False)\n        self.conv1x1 = nn.Conv2d(512, 256, kernel_size=1, stride=1, bias=True)\n        self.relu = nn.ReLU(inplace=True)\n\n        # Gamma, Beta block\n        fc = nn.Sequential(nn.Linear(64 * 64 * 256, 256, bias=False),\n                           nn.ReLU(True),\n                           nn.Linear(256, 256, bias=False),\n                           nn.ReLU(True))\n","AFTER":"        self.light = light\n\n        down_layer = [\n            nn.ReflectionPad2d(3),\n            nn.Conv2d(3, 64, 7, 1, 0, bias=False),\n            nn.InstanceNorm2d(64),\n            nn.ReLU(inplace=True),\n\n            # Down-Sampling\n            nn.ReflectionPad2d(1),\n            nn.Conv2d(64, 128, 3, 2, 0, bias=False),\n            nn.InstanceNorm2d(256),\n            nn.ReLU(inplace=True),\n            nn.ReflectionPad2d(1),\n            nn.Conv2d(128, 256, 3, 2, 0, bias=False),\n            nn.InstanceNorm2d(256),\n            nn.ReLU(inplace=True),\n\n            # Down-Sampling Bottleneck\n            ResNetBlock(256),\n            ResNetBlock(256),\n            ResNetBlock(256),\n            ResNetBlock(256),\n        ]\n\n        # Class Activation Map\n        self.gap_fc = nn.Linear(256, 1, bias=False)\n        self.gmp_fc = nn.Linear(256, 1, bias=False)\n        self.conv1x1 = nn.Conv2d(512, 256, 1, 1, bias=True)\n        self.relu = nn.ReLU(inplace=True)\n\n        # Gamma, Beta block\n        if self.light:\n            fc = [nn.Linear(256, 256, bias=False),\n                  nn.ReLU(inplace=True),\n                  nn.Linear(256, 256, bias=False),\n                  nn.ReLU(inplace=True)]\n        else:\n            fc = [nn.Linear(image_size * image_size * 16, 256, bias=False),\n                  nn.ReLU(inplace=True),\n                  nn.Linear(256, 256, bias=False),\n                  nn.ReLU(inplace=True)]\n        self.gamma = nn.Linear(256, 256, bias=False)\n"}