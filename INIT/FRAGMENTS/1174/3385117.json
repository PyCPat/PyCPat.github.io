{"BEFORE":"        self.input_path = nn.ModuleList([\n            LinearBlock(in_features=latent_dimensions, out_features=256, feature_size=365),\n            LinearBlock(in_features=256, out_features=256, feature_size=4096),\n            nn.Sequential(spectral_norm(nn.Linear(in_features=256, out_features=int(512 \/\/ channels_factor) * 4 * 4)),\n                          nn.LeakyReLU(negative_slope=0.2))\n        ])\n        # Init main residual path\n        self.main_path = nn.ModuleList([\n            GeneratorResidualBlock(in_channels=int(512 \/\/ channels_factor), out_channels=int(512 \/\/ channels_factor),\n                                   feature_channels=513, number_of_classes=number_of_classes),\n            GeneratorResidualBlock(in_channels=int(512 \/\/ channels_factor), out_channels=int(512 \/\/ channels_factor),\n                                   feature_channels=513, number_of_classes=number_of_classes),\n            GeneratorResidualBlock(in_channels=int(512 \/\/ channels_factor), out_channels=int(256 \/\/ channels_factor),\n                                   feature_channels=257, number_of_classes=number_of_classes),\n            SelfAttention(channels=int(256 \/\/ channels_factor)),\n            GeneratorResidualBlock(in_channels=int(256 \/\/ channels_factor), out_channels=int(128 \/\/ channels_factor),\n                                   feature_channels=129, number_of_classes=number_of_classes),\n            GeneratorResidualBlock(in_channels=int(128 \/\/ channels_factor), out_channels=int(64 \/\/ channels_factor),\n                                   feature_channels=65, number_of_classes=number_of_classes)\n        ])\n        # Init final block\n        self.final_block = nn.Sequential(\n            nn.UpsamplingBilinear2d(scale_factor=2),\n            spectral_norm(nn.BatchNorm2d(int(64 \/\/ channels_factor))),\n            spectral_norm(nn.Conv2d(in_channels=int(64 \/\/ channels_factor), out_channels=int(64 \/\/ channels_factor),\n                                    kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)),\n            nn.LeakyReLU(negative_slope=0.2),\n            spectral_norm(\n                nn.Conv2d(in_channels=int(64 \/\/ channels_factor), out_channels=out_channels, kernel_size=(1, 1),\n                          stride=(1, 1), padding=(0, 0), bias=False))\n        )\n        # Init embedding layer for label\n        self.embedding = nn.Embedding(num_embeddings=number_of_classes, embedding_dim=number_of_classes)\n","AFTER":"        self.linear_layer = spectral_norm(nn.Linear(in_features=latent_dimensions, out_features=latent_dimensions))\n        self.linear_block_1 = LinearBlock(in_features=latent_dimensions, out_features=365, feature_size=365)\n        self.linear_block_2 = LinearBlock(in_features=365, out_features=2048, feature_size=4096)\n        self.convolution_layer = spectral_norm(\n            nn.Conv2d(in_channels=128, out_channels=int(512 \/\/ channels_factor), kernel_size=(1, 1), padding=(0, 0),\n                      stride=(1, 1), bias=True))\n        # Init main residual path\n        self.main_path = nn.ModuleList([\n            GeneratorResidualBlock(in_channels=int(512 \/\/ channels_factor), out_channels=int(512 \/\/ channels_factor),\n                                   feature_channels=513, number_of_classes=number_of_classes),\n            GeneratorResidualBlock(in_channels=int(512 \/\/ channels_factor), out_channels=int(512 \/\/ channels_factor),\n                                   feature_channels=513, number_of_classes=number_of_classes),\n            GeneratorResidualBlock(in_channels=int(512 \/\/ channels_factor), out_channels=int(256 \/\/ channels_factor),\n                                   feature_channels=257, number_of_classes=number_of_classes),\n            SelfAttention(channels=int(256 \/\/ channels_factor)),\n            GeneratorResidualBlock(in_channels=int(256 \/\/ channels_factor), out_channels=int(128 \/\/ channels_factor),\n                                   feature_channels=129, number_of_classes=number_of_classes),\n            GeneratorResidualBlock(in_channels=int(128 \/\/ channels_factor), out_channels=int(64 \/\/ channels_factor),\n                                   feature_channels=65, number_of_classes=number_of_classes)\n        ])\n        # Init final block\n        self.final_block = nn.Sequential(\n            nn.UpsamplingNearest2d(scale_factor=2),\n            nn.BatchNorm2d(int(64 \/\/ channels_factor)),\n            nn.LeakyReLU(negative_slope=0.2),\n            spectral_norm(nn.Conv2d(in_channels=int(64 \/\/ channels_factor), out_channels=int(64 \/\/ channels_factor),\n                                    kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=True)),\n            nn.LeakyReLU(negative_slope=0.2),\n            spectral_norm(\n                nn.Conv2d(in_channels=int(64 \/\/ channels_factor), out_channels=out_channels, kernel_size=(1, 1),\n                          stride=(1, 1), padding=(0, 0), bias=True))\n        )\n        # Init weights\n        self.apply(init_weights)\n"}