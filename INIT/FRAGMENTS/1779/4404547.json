{"BEFORE":"        dropout=nn.Dropout2d,\n        dropout_kwargs=None,\n        network_kwargs=None,\n    ):\n        nn.Module.__init__(self)\n        if conv_kwargs is None:\n            conv_kwargs = {\"kernel_size\": 3, \"stride\": 1, \"padding\": 1, \"bias\": True}\n        if norm_kwargs is None:\n            norm_kwargs = {\n                \"eps\": 1e-5,\n                \"affine\": True,\n                \"momentum\": 0.1,\n                \"track_running_stats\": True,\n            }\n        if act_kwargs is None:\n            act_kwargs = {\"negative_slope\": 1e-2, \"inplace\": True}\n        if dropout_kwargs is None:\n            dropout_kwargs = {\"p\": 0.5, \"inplace\": True}\n        if network_kwargs is None:\n            network_kwargs = {\"res\": False}\n\n        self.conv0 = conv(input_channels, output_channels, **conv_kwargs)\n        self.conv1 = Conv(output_channels, output_channels, **conv_kwargs)\n        self.conv2 = Conv(output_channels, output_channels, **conv_kwargs)\n\n        self.in_0 = (\n            norm(input_channels, **norm_kwargs) if norm is not None else nn.Identity()\n        )\n        self.in_1 = (\n            norm(output_channels, **norm_kwargs) if norm is not None else nn.Identity()\n        )\n        self.in_2 = (\n            norm(output_channels, **norm_kwargs) if norm is not None else nn.Identity()\n        )\n\n        self.act = self.act(**act_kwargs)\n","AFTER":"            network_kwargs = {\"res\": False}\n\n        self.res = network_kwargs[\"res\"]\n\n        self.conv0 = conv(input_channels, output_channels, **conv_kwargs)\n        self.conv1 = conv(output_channels, output_channels, **conv_kwargs)\n        self.conv2 = conv(output_channels, output_channels, **conv_kwargs)\n\n        self.in_0 = norm(input_channels, **norm_kwargs)\n        self.in_1 = norm(output_channels, **norm_kwargs)\n        self.in_2 = norm(output_channels, **norm_kwargs)\n"}