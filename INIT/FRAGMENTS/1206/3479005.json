{"BEFORE":"        if with_cluster_center:\n            num_input_features += 3\n        if with_voxel_center:\n            num_input_features += 3\n        if with_distance:\n            num_input_features += 3\n        self.num_input_features = num_input_features\n        self._with_distance = with_distance\n        self._with_cluster_center = with_cluster_center\n        self._with_voxel_center = with_voxel_center\n        self.return_point_feats = return_point_feats\n\n        # Need pillar (voxel) size and x\/y offset in order to calculate offset\n        self.vx = voxel_size[0]\n        self.vy = voxel_size[1]\n        self.vz = voxel_size[2]\n        self.x_offset = self.vx \/ 2 + point_cloud_range[0]\n        self.y_offset = self.vy \/ 2 + point_cloud_range[1]\n        self.z_offset = self.vz \/ 2 + point_cloud_range[2]\n        self.point_cloud_range = point_cloud_range\n        self.scatter = DynamicScatter(voxel_size, point_cloud_range, True)\n\n        num_filters = [self.num_input_features] + list(num_filters)\n","AFTER":"        assert len(feat_channels) > 0\n        if with_cluster_center:\n            in_channels += 3\n        if with_voxel_center:\n            in_channels += 3\n        if with_distance:\n            in_channels += 3\n        self.in_channels = in_channels\n        self._with_distance = with_distance\n        self._with_cluster_center = with_cluster_center\n        self._with_voxel_center = with_voxel_center\n        self.return_point_feats = return_point_feats\n\n        # Need pillar (voxel) size and x\/y offset in order to calculate offset\n        self.vx = voxel_size[0]\n        self.vy = voxel_size[1]\n        self.vz = voxel_size[2]\n        self.x_offset = self.vx \/ 2 + point_cloud_range[0]\n        self.y_offset = self.vy \/ 2 + point_cloud_range[1]\n        self.z_offset = self.vz \/ 2 + point_cloud_range[2]\n        self.point_cloud_range = point_cloud_range\n        self.scatter = DynamicScatter(voxel_size, point_cloud_range, True)\n\n        feat_channels = [self.in_channels] + list(feat_channels)\n"}