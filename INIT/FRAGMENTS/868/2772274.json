{"BEFORE":"        window = torch.kaiser_window(kernel_size, beta=beta,periodic=False)\n        #ratio = 0.5\/cutroff\n        time = (torch.arange(-self.half_size, self.half_size)+0.5)\/(0.5\/cutoff) #*(cutoff*4)\n        if cutoff == 0:\n            filter_ = torch.zeros_like(time)\n        else:\n            filter_ = 2 * cutoff * window * torch.sinc(2 * cutoff  * time)\n            # Normalize filter to have sum = 1, otherwise we will have a small leakage\n            # of the constant component in the input signal.\n            filter_ \/= filter_.sum()\n            filter=filter_.view(1,1,-1)\n","AFTER":"        self.kernel_size = kernel_size\n        self.half_size = kernel_size \/\/ 2\n        self.stride = stride\n\n        #For kaiser window\n        delta_f = 4 * half_width\n        A = 2.285 * (self.half_size - 1) * math.pi * delta_f + 7.95\n        if A > 50.:\n            beta = 0.1102 * (A - 8.7)\n        elif A >= 21.:\n            beta = 0.5842 * (A - 21)**0.4 + 0.07886 * (A - 21.)\n        else:\n            beta = 0.\n\n        #rotation equivariant grid\n        time = (torch.stack(torch.meshgrid(\n            torch.arange(-self.half_size, self.half_size) + 0.5,\n            torch.arange(-self.half_size, self.half_size) + 0.5),\n                            dim=-1))  #*(cutoff*4)\n        time = torch.norm(time, dim=-1)\n        #rotation equivariant window\n        window = torch.i0(\n            beta * torch.sqrt(1 -\n                              (time \/ self.half_size \/ 2**0.5)**2)) \/ torch.i0(\n                                  torch.tensor([beta]))\n        #ratio = 0.5\/cutroff\n        time = time \/ (0.5 \/ cutoff)\n        #using sinc instead jinc\n        if cutoff == 0:\n            filter_ = torch.zeros_like(time)\n        else:\n            filter_ = 2 * cutoff * window * torch.sinc(2 * cutoff * time)\n            # Normalize filter to have sum = 1, otherwise we will have a small leakage\n            # of the constant component in the input signal.\n            filter_ \/= filter_.sum()\n            filter = filter_.view(1, 1, self.kernel_size, self.kernel_size)\n"}