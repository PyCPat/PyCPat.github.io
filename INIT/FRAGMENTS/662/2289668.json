{"BEFORE":"        if self.config['global_pool'] == 'max':\n            self.global_pool = geometric.global_max_pool\n        elif self.config['global_pool'] == 'avg':\n            self.global_pool = geometric.global_mean_pool\n        elif self.config['global_pool'] == 'sum':\n            self.global_pool = geometric.global_add_pool\n        else: # max\n            raise ValueError('{} pooling is not supported' )\n\n    def forward(self, positions):\n","AFTER":"        self.config = {\n            'conv_depth': 3, \n            'k_neighbors': 10, \n            'EConv_hidden': 64, \n            'EConv_hidden_depth' : 2, \n            'EConv_feature': 64, \n            'EConv_aggr': 'max', \n            'global_pool': 'max', \n            'skip_connections': True, \n            'graph_pooling': True,\n            'pool_ratio': 0.5  # only used when the graph pooling is enabled\n            }  # defaults for this net\n        self.config.update(config)  # from input\n\n        # MLP Schemes\n        first_layer_mpl = [2 * 3] + [self.config['EConv_hidden'] for _ in range(self.config['EConv_hidden_depth'])] + [self.config['EConv_feature']]\n        other_layers_mpl = ([2 * self.config['EConv_feature']] \n            + [self.config['EConv_hidden'] for _ in range(self.config['EConv_hidden_depth'])] + [self.config['EConv_feature']])\n\n        # Contruct the net\n        # Conv layers\n        self.conv_layers = nn.ModuleList()\n        # first is always there\n        self.conv_layers.append(\n            geometric.DynamicEdgeConv(_MLP(first_layer_mpl), k=self.config['k_neighbors'], aggr=self.config['EConv_aggr']))\n\n        for _ in range(1, self.config['conv_depth']):\n            self.conv_layers.append(\n                geometric.DynamicEdgeConv(_MLP(other_layers_mpl), k=self.config['k_neighbors'], aggr=self.config['EConv_aggr']))\n\n        # pooling layers\n        if self.config['graph_pooling']:\n            self.gpool_layers = nn.ModuleList()\n            for _ in range(0, self.config['conv_depth']):\n                self.gpool_layers.append(\n                    DynamicTopKPool(self.config['EConv_feature'], k=self.config['k_neighbors'], pool_ratio=self.config['pool_ratio']))\n\n        # global pooling layer based on config\n        if self.config['global_pool'] == 'max':\n            self.global_pool = geometric.global_max_pool\n        elif self.config['global_pool'] == 'mean':\n            self.global_pool = geometric.global_mean_pool\n        elif self.config['global_pool'] == 'add':\n            self.global_pool = geometric.global_add_pool\n        else: # max\n            raise ValueError('{} pooling is not supported'.format(self.config['global_pool']))\n            \n        # Output linear layer\n        out_features = self.config['EConv_feature'] * self.config['conv_depth'] if self.config['skip_connections'] else self.config['EConv_feature']\n"}