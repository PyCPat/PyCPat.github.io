{"BEFORE":"        pool2d = nn.AvgPool2d\n        self.gap = nn.AdaptiveAvgPool2d(1)\n\n        reduction = nn.Sequential(nn.Conv2d(2048, 256, 1, bias=False), nn.BatchNorm2d(256))  # , nn.ReLU())\n        self._init_reduction(reduction)\n        fc_layer = nn.Sequential(nn.Dropout(), nn.Linear(256, num_classes))\n        self._init_fc(fc_layer)\n\n        self.branches = nn.Sequential()\n        for stripe_id, stripe in enumerate(stripes):\n            branch = nn.Sequential()\n            branch.add_module('branch_backbone', nn.Sequential(copy.deepcopy(res_conv4), copy.deepcopy(resnet.layer4)))\n            branch.add_module('branch_pool', pool2d(kernel_size=(24 \/\/ stripe, 8)))\n            branch_reduces, branch_stripe_fc = nn.Sequential(), nn.Sequential()\n            for i in range(stripe + 1): # global + local\n                branch_reduces.add_module(str(i), copy.deepcopy(reduction))\n                branch_stripe_fc.add_module(str(i), copy.deepcopy(fc_layer))\n            branch.add_module('branch_reduce', branch_reduces)\n            branch.add_module('branch_fc',branch_stripe_fc)\n            self.branches.add_module(str(stripe_id), branch)\n        # self.branches = nn.Sequential(*self.branches)\n\n    @staticmethod\n","AFTER":"        reduction = nn.Sequential(nn.Conv2d(2048, 256, 1, bias=False), nn.BatchNorm2d(256))  # , nn.ReLU())\n        self._init_reduction(reduction)\n        fc_layer = nn.Sequential(nn.Dropout(), nn.Linear(256, num_classes))\n        self._init_fc(fc_layer)\n\n        branches = []\n        for stripe_id, stripe in enumerate(stripes):\n            embedding_layers = nn.ModuleList([copy.deepcopy(reduction) for _ in range(stripe+1)])\n            fc_layers = nn.ModuleList([copy.deepcopy(fc_layer) for _ in range(stripe+1)])\n            branches.append(\n                nn.ModuleList([\n                    nn.Sequential(copy.deepcopy(res_conv4), copy.deepcopy(resnet.layer4)),\n                    embedding_layers, fc_layers])\n            )\n        self.branches = nn.ModuleList(branches)\n"}