{"BEFORE":"            growth_rate = [growth_rate] * depth\n        elif type(growth_rate) is list:\n            if depth is not None:\n                assert depth == len(growth_rate), \"`depth` is different from `len(growth_rate)`\"\n            depth = len(growth_rate)\n        else:\n            raise ValueError(\"Not support growth_rate={}\".format(growth_rate))\n        \n        if type(norm) is bool:\n            assert depth is not None, \"Specify `depth`\"\n            norm = [norm] * depth\n        elif type(norm) is list:\n            if depth is not None:\n                assert depth == len(norm), \"`depth` is different from `len(norm)`\"\n            depth = len(norm)\n        else:\n            raise ValueError(\"Not support norm={}\".format(norm))\n\n        if type(nonlinear) is bool or type(nonlinear) is str:\n            assert depth is not None, \"Specify `depth`\"\n            nonlinear = [nonlinear] * depth\n        elif type(nonlinear) is list:\n            if depth is not None:\n                assert depth == len(nonlinear), \"`depth` is different from `len(nonlinear)`\"\n            depth = len(nonlinear)\n        else:\n            raise ValueError(\"Not support nonlinear={}\".format(nonlinear))\n        \n        self.growth_rate = growth_rate\n        self.depth = depth\n\n        net = []\n        _in_channels = in_channels\n\n        for idx in range(depth):\n            _out_channels = sum(growth_rate[idx:])\n            conv_block = ConvBlock2d(_in_channels, _out_channels, kernel_size=kernel_size, stride=1, dilation=dilation, norm=norm[idx], nonlinear=nonlinear[idx], eps=eps)\n            net.append(conv_block)\n            _in_channels = growth_rate[idx]\n\n        self.net = nn.ModuleList(net)\n","AFTER":"            growth_rate = [growth_rate] * depth\n        elif type(growth_rate) is list:\n            if depth is not None:\n                assert depth == len(growth_rate), \"`depth` is different from `len(growth_rate)`\"\n            depth = len(growth_rate)\n        else:\n            raise ValueError(\"Not support growth_rate={}\".format(growth_rate))\n        \n        if not type(dilation) is int:\n            raise ValueError(\"Not support dilated={}\".format(dilated))\n        \n        if type(norm) is bool:\n            assert depth is not None, \"Specify `depth`\"\n            norm = [norm] * depth\n        elif type(norm) is list:\n            if depth is not None:\n                assert depth == len(norm), \"`depth` is different from `len(norm)`\"\n            depth = len(norm)\n        else:\n            raise ValueError(\"Not support norm={}\".format(norm))\n\n        if type(nonlinear) is bool or type(nonlinear) is str:\n            assert depth is not None, \"Specify `depth`\"\n            nonlinear = [nonlinear] * depth\n        elif type(nonlinear) is list:\n            if depth is not None:\n                assert depth == len(nonlinear), \"`depth` is different from `len(nonlinear)`\"\n            depth = len(nonlinear)\n        else:\n            raise ValueError(\"Not support nonlinear={}\".format(nonlinear))\n        \n        self.growth_rate = growth_rate\n        self.depth = depth\n\n        net = []\n        _in_channels = in_channels - sum(growth_rate)\n\n        for idx in range(depth):\n            if idx == 0:\n                _in_channels = in_channels\n            else:\n                _in_channels = growth_rate[idx - 1]\n            _out_channels = sum(growth_rate[idx:])\n            \n            conv_block = ConvBlock2d(_in_channels, _out_channels, kernel_size=kernel_size, stride=1, dilation=dilation, norm=norm[idx], nonlinear=nonlinear[idx], eps=eps)\n            net.append(conv_block)\n        \n        self.net = nn.Sequential(*net)\n"}