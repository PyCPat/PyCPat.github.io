{"BEFORE":"        self.block2 = discriminator_block(64, 64, 4, 2)\n\n        # block3\n        self.block3 = discriminator_block(64, 128, 4, 2)\n\n        # block4\n        self.block4 = discriminator_block(128, 256, 4, 2)\n\n        self.block5 = discriminator_block(256, 256, 4, 2)\n\n        self.resid1 = residual_block(256, 256, 1)\n        self.bn1 = batchnorm(256, True)\n        self.resid2 = residual_block(256, 256, 1)\n        self.bn2 = batchnorm(256, True)\n        self.resid3 = residual_block(256, 128, 1)\n        self.bn3 = batchnorm(128, True)\n        self.resid4 = residual_block(128, 128, 1)\n        self.bn4 = batchnorm(128, True)\n        self.resid5 = residual_block(128, 3, 1)\n        self.bn5 = batchnorm(3, True)\n        self.relu = lrelu(0.2)\n","AFTER":"        self.resids1 = nn.ModuleList([nn.Sequential(residual_block(64, 64, 1), batchnorm(64, True)) for i in range(int(args.num_resblock\/4))])\n\n        # block2\n        self.block2 = discriminator_block(64, 128, 4, 2)\n        self.resids2 = nn.ModuleList([nn.Sequential(residual_block(128, 128, 1), batchnorm(128, True)) for i in range(int(args.num_resblock \/ 4))])\n\n        # block3\n        self.block3 = discriminator_block(128, 256, 4, 2)\n        self.resids3 = nn.ModuleList([nn.Sequential(residual_block(256, 256, 1), batchnorm(256, True)) for i in range(int(args.num_resblock \/ 4))])\n\n        self.block4 = discriminator_block(256, 64, 4, 2)\n"}