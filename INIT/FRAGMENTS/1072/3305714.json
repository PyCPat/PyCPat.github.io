{"BEFORE":"            shortcut = [spectral_norm(nn.Linear(input_size, output_size)) if spect_norm else\n                        nn.Linear(input_size, output_size)]\n            shortcut += batch_norm * [nn.BatchNorm1d(output_size)]\n\n        block = [spectral_norm(nn.Linear(input_size, output_size)) if spect_norm else\n                 nn.Linear(input_size, output_size)]\n        block += batch_norm * [nn.BatchNorm1d(output_size)] + [activation]\n        block += [spectral_norm(nn.Linear(input_size, output_size)) if spect_norm else\n                  nn.Linear(input_size, output_size)]\n        block += batch_norm * [nn.BatchNorm1d(output_size)]\n","AFTER":"            shortcut = [spectral_norm(nn.Linear(input_size, output_size)) if spect_norm else\n                        nn.Linear(input_size, output_size)]\n            if norm:\n                shortcut += [norm(output_size)]\n\n        block = [spectral_norm(nn.Linear(input_size, output_size)) if spect_norm else\n                 nn.Linear(input_size, output_size)]\n        if norm:\n            block += [norm(output_size)]\n        block += [activation]\n\n        block += [spectral_norm(nn.Linear(output_size, output_size)) if spect_norm else\n                  nn.Linear(output_size, output_size)]\n        if norm:\n            block += [norm(output_size)]\n\n        self.shortcut = nn.Sequential(*shortcut)\n"}