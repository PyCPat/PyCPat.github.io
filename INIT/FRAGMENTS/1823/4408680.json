{"BEFORE":"        assert (not use_attention) or (\n            exists(attention_heads)\n            and exists(attention_features)\n            and exists(attention_multiplier)\n        )\n\n        self.use_pre_downsample = use_pre_downsample\n        self.use_attention = use_attention\n\n        channels = out_channels if use_pre_downsample else in_channels\n\n        self.blocks = nn.ModuleList(\n            [\n                ResnetBlock(\n                    in_channels=channels,\n                    out_channels=channels,\n                    dilation=dilation,\n                    num_groups=num_groups,\n                    time_context_features=time_context_features,\n                )\n                for dilation in dilations\n            ]\n        )\n\n        self.transformer = (\n            ConvTransformerBlock(\n                channels=channels,\n                num_heads=attention_heads,\n                head_features=attention_features,\n                multiplier=attention_multiplier,\n            )\n            if use_attention\n            else nn.Identity()\n        )\n\n        self.downsample = Downsample(\n            in_channels=in_channels,\n            out_channels=out_channels,\n            factor=factor,\n            kernel_multiplier=kernel_multiplier,\n        )\n","AFTER":"            nn.Sequential(\n                nn.SiLU(),\n                nn.Linear(\n                    in_features=time_context_features, out_features=out_channels * 2\n                ),\n            )\n            if exists(time_context_features)\n            else nn.Identity()\n        )\n\n        self.block1 = ConvBlock1d(\n            in_channels=in_channels,\n            out_channels=out_channels,\n            num_groups=num_groups,\n            dilation=dilation,\n        )\n\n        self.block2 = ConvBlock1d(\n            in_channels=out_channels, out_channels=out_channels, num_groups=num_groups\n        )\n\n        self.to_out = (\n            Conv1d(in_channels=in_channels, out_channels=out_channels, kernel_size=1)\n            if in_channels != out_channels\n            else nn.Identity()\n        )\n"}