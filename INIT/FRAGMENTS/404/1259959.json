{"BEFORE":"        kernel_size = model_dict['kernel_size']\n        n_filters = model_dict['n_filters']\n        dropout = model_dict['dropout']\n        pooling_layer_type = model_dict['pooling_layer_type']\n\n        # Encoding of amino acid sequence to vector space\n        self.encoding = AminoAcidWordEmbedding(embedding_dim=encoding_dim)\n        # Convolutional layer\n        self.conv1 = nn.Conv1d(in_channels=encoding_dim,\n                               out_channels=n_filters,\n                               kernel_size=kernel_size, )\n        # Non-linearity\n        self.activation1 = nn.SELU()\n        # Max Pooling layer\n        if 'avg' in pooling_layer_type:\n            self.pool1 = nn.AdaptiveAvgPool1d(output_size=1)\n        elif 'max' in pooling_layer_type:\n            self.pool1 = nn.AdaptiveMaxPool1d(output_size=1)\n        else:\n            raise ValueError(f'Unknown pooling_layer_type: '\n                             + f'{pooling_layer_type}')\n\n        # Regularization with dropout\n        self.dropout1 = nn.Dropout(p=dropout)\n        # Classifcation layer\n        self.classification1 = nn.Linear(in_features=n_filters,\n                                         out_features=n_classes[0])\n\n        # Initialize weights for SELU activation\n        self.conv1.weight.data.normal_(0.0,\n                                    np.sqrt(1.\/np.prod(self.conv1.kernel_size)))\n\n        # Softmax-Layer\n        self.softmax = nn.Softmax(dim=1)\n\n        # Threshold for deciding below which confidence NN should be undecided\n        if 'threshold' in model_dict:\n            self.threshold = model_dict['threshold']\n\n    def forward(self, x):\n","AFTER":"    def __init__(self, model_dict, device='cpu'):\n        super(deepencoding, self).__init__()\n\n        # Read hyperparameter dictionary\n        n_classes = model_dict['n_classes']\n        encoding_dim = model_dict['encoding_dim']\n        kernel_sizes = model_dict['kernel_size']\n        n_filters = model_dict['n_filters']\n        dropout = model_dict['dropout']\n        pooling_layer_type = model_dict['pooling_layer_type']\n\n        # Encoding of amino acid sequence to vector space\n        self.encoding = AminoAcidWordEmbedding(embedding_dim=encoding_dim)\n        # Convolutional Layers\n        for i, kernel in enumerate(kernel_sizes):\n            conv_layer = nn.Conv1d(in_channels=encoding_dim,\n                               out_channels=n_filters,\n                               kernel_size=kernel)\n            # Initialize Convolution Layers for SELU activation\n            conv_layer.weight.data.normal_(0.0, np.sqrt(1. \/ np.prod(conv_layer.kernel_size)))\n            self.add_module(f'conv{i+1}', conv_layer)\n        self.n_conv_layers = i + 1\n"}