{"BEFORE":"        self.disc = nn.Sequential(\n            # input: N x channels_img x 64 x 64\n            nn.Conv2d(\n                channels_img, features_d, kernel_size=4, stride=2, padding=1\n            ),\n            nn.LeakyReLU(0.2),\n            # _block(in_channels, out_channels, kernel_size, stride, padding)\n            self._block(features_d, features_d * 2, 4, 2, 1),\n            self._block(features_d * 2, features_d * 4, 4, 2, 1),\n            self._block(features_d * 4, features_d * 8, 4, 2, 1),\n            # After all _block img output is 4x4 (Conv2d below makes into 1x1)\n            nn.Conv2d(features_d * 8, 1, kernel_size=4, stride=2, padding=0),\n            nn.Sigmoid(),\n        )\n","AFTER":"        self.disc = nn.Sequential(OrderedDict([\n            # input: N x channels_img x 64 x 64\n            ('conv_in', nn.Conv2d(\n                channels_img, features_d, kernel_size=4, stride=2, padding=1\n            )),\n            ('leaky_relu', nn.LeakyReLU(0.2)),\n            # _block(in_channels, out_channels, kernel_size, stride, padding)\n            ('block1', self._block(features_d, features_d * 2, 4, 2, 1)),\n            ('block2', self._block(features_d * 2, features_d * 4, 4, 2, 1)),\n            ('block3', self._block(features_d * 4, features_d * 8, 4, 2, 1)),\n            # After all _block img output is 4x4 (Conv2d below makes into 1x1)\n            ('conv_out', nn.Conv2d(features_d * 8, 1, kernel_size=4, stride=2, padding=0)),\n            ('sigmoid', nn.Sigmoid()),\n            ]))\n"}