{"BEFORE":"        assert 'linear' in order\n\n        self._in_features = in_features\n        self._out_features = out_features\n        self._order = order\n        self._with_norm = 'norm' in order and norm_cfg is not None\n        self._with_act = 'act' in order and act_cfg is not None\n\n        if bias != 'auto':\n            self._bias = bias\n        elif self._with_norm:\n            self._bias = norm_cfg['type'] if isinstance(\n                norm_cfg, dict) else norm_cfg in NORMS.group('drop')\n        else:\n            self._bias = True\n\n        self.linear = nn.Linear(in_features, out_features, bias=self._bias)\n\n        if self._with_norm:\n            self.norm = build_norm_layer(norm_cfg, dims=out_features)\n\n        if self._with_act:\n            self.act = build_act_layer(act_cfg)\n\n        self.init_weights()\n","AFTER":"        _map = dict(linear=True, norm=norm_cfg, act=act_cfg)\n        self._order = tuple(o for o in order if _map[o] is not None)\n\n        if bias != 'auto':\n            self._bias = bias\n        elif self.with_norm:\n            _t = norm_cfg['type'] if isinstance(norm_cfg, dict) else norm_cfg\n            _d = self._order.index('norm') - self._order.index('linear')\n            self._bias = _t in NORMS.group('drop') or _d != 1\n        else:\n            self._bias = True\n\n        for layer in self._order:\n            if layer == 'linear':\n                self.linear = nn.Linear(\n                    in_features, out_features, bias=self._bias)\n            elif layer == 'norm':\n                self.norm = build_norm_layer(norm_cfg, dims=out_features)\n            else:\n                self.act = build_act_layer(act_cfg)\n\n        self.init_weights()\n"}