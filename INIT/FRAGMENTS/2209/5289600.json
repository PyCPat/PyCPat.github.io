{"BEFORE":"    def __init__(self, device=\"cpu\", **model_kwargs):\n        r\"\"\"\n\n        Args:\n            device ():\n            **model_kwargs ():\n        \"\"\"\n        super(VideoPredictionModel, self).__init__()\n\n        # set required parameters\n        self.device = device\n        for required_arg in self.REQUIRED_ARGS:\n            if required_arg not in model_kwargs.keys():\n                raise ValueError(f\"model {self.NAME} requires parameter '{required_arg}'\")\n            required_val = model_kwargs[required_arg]\n\n            # pre-setattr checks\n            if required_arg == \"tensor_value_range\":\n                if type(required_val) not in [tuple, list] or len(required_val) != 2:\n                    raise ValueError(\"value for argument 'tensor_value_range' needs to be tuple or list with 2 elems\")\n\n            # set parameter\n            setattr(self, required_arg, required_val)\n\n            # post-setattr logic\n            if required_arg == \"img_shape\":\n                self.img_c, self.img_h, self.img_w = self.img_shape\n\n        # set optional parameters\n        self.action_conditional = model_kwargs.get(\"action_conditional\", False)\n        for model_arg, model_arg_val in model_kwargs.items():\n            if model_arg in self.REQUIRED_ARGS:\n                continue  # skip required args as they have been set up already\n            elif hasattr(self, model_arg):\n                setattr(self, model_arg, model_arg_val)\n            else:\n                print(f\"model_arg '{model_arg}' is not usable for init of model '{self.NAME}' -> skipping\")\n\n    @property\n","AFTER":"    def __init__(self, device: str, **model_kwargs):\n        r\"\"\"\n        Initializes the model by first setting all model hyperparameters, attributes and the like.\n        Then, the model-specific init will actually create the model from the given hyperparameters\n\n        Args:\n            device (str): The device identifier for the module.\n            **model_kwargs (Any): Model arguments such as hyperparameters, input shapes etc.\n        \"\"\"\n        super(VideoPredictionModel, self).__init__()\n\n        # set required parameters\n        self.device = device\n        for required_arg in self.REQUIRED_ARGS:\n\n            # pre-setattr checks\n            if required_arg == \"tensor_value_range\":\n                required_val = model_kwargs.get(required_arg, (0, 0))\n                if type(required_val) not in [tuple, list] or len(required_val) != 2:\n                    raise ValueError(\"value for argument 'tensor_value_range' needs to be tuple or list with 2 elems\")\n\n            # set parameter\n            set_from_kwarg(self, model_kwargs, required_arg, required=True)\n\n            # post-setattr logic\n            if required_arg == \"img_shape\":\n                self.img_c, self.img_h, self.img_w = self.img_shape\n\n        # set optional parameters\n        optional_args = [arg for arg in model_kwargs.keys() if arg not in self.REQUIRED_ARGS]\n        for model_arg in optional_args:\n            set_from_kwarg(self, model_kwargs, model_arg)\n"}