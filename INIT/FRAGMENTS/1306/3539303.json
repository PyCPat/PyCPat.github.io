{"BEFORE":"            sparsity = 1\n\n        self.encoder = Encoder(\n            n_features, nn_layer1, nn_layer2, latent_dim, dropout_prob\n        )\n        self.decoder = Decoder(\n            n_features,\n            nn_layer1,\n            nn_layer2,\n            latent_dim,\n            dropout_prob,\n            count_model,\n            sparsity,\n        )\n\n        if verbose:\n            print(\"..Running VAE using the following param set:\")\n            print(\"......denoised count type: \", feature_type)\n            print(\"......count model: \", count_model)\n            print(\"......num_input_feature: \", n_features)\n            print(\"......NN_layer1: \", nn_layer1)\n            print(\"......NN_layer2: \", nn_layer2)\n            print(\"......latent_space: \", latent_dim)\n            print(\"......dropout_prob: \", dropout_prob)\n            print(\"......expected data sparsity: \", sparsity)\n\n    def forward(self, input_matrix):\n","AFTER":"        vae_logger = get_logger(\"VAE\", verbose=verbose)\n\n        vae_logger.info(\"Running VAE using the following param set:\")\n        vae_logger.info(f\"...denoised count type: {feature_type}\")\n        vae_logger.info(f\"...count model: {count_model}\")\n        vae_logger.info(f\"...num_input_feature: {n_features:d}\")\n        vae_logger.info(f\"...NN_layer1: {nn_layer1:d}\")\n        vae_logger.info(f\"...NN_layer2: {nn_layer2:d}\")\n        vae_logger.info(f\"...latent_space: {latent_dim:d}\")\n        vae_logger.info(f\"...dropout_prob: {dropout_prob:.2f}\")\n        vae_logger.info(f\"...expected data sparsity: {sparsity:.2f}\")\n"}