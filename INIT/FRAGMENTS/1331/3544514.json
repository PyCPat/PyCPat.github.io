{"BEFORE":"        time_cond_dim = dim * 4\n\n        self.to_time_hiddens = nn.Sequential(\n            SinusoidalPosEmb(dim),\n            nn.Linear(dim, time_cond_dim),\n            nn.SiLU()\n        )\n\n        self.to_lowres_time_hiddens = None\n        if lowres_cond:\n            self.to_lowres_time_hiddens = nn.Sequential(\n                SinusoidalPosEmb(dim),\n                nn.Linear(dim, time_cond_dim),\n                nn.SiLU()\n            )\n            time_cond_dim *= 2\n\n        # project to time tokens as well as time hiddens\n\n        self.to_time_tokens = nn.Sequential(\n","AFTER":"        time_cond_dim = dim * 4\n\n        # embedding time for discrete gaussian diffusion or log(snr) noise for continuous version\n\n        self.fourier_embed_time_or_noise = fourier_embed_time_or_noise\n\n        if fourier_embed_time_or_noise:\n            self.to_time_hiddens = nn.Sequential(\n                SinusoidalPosEmb(dim),\n                nn.Linear(dim, time_cond_dim),\n                nn.SiLU()\n            )\n        else:\n            self.to_time_hiddens = nn.Sequential(\n                Rearrange('... -> ... 1'),\n                nn.Linear(1, time_cond_dim),\n                nn.SiLU(),\n                nn.LayerNorm(time_cond_dim),\n                nn.Linear(time_cond_dim, time_cond_dim),\n                nn.SiLU(),\n                nn.LayerNorm(time_cond_dim)\n            )\n\n        self.to_lowres_time_hiddens = None\n        if lowres_cond:\n            self.to_lowres_time_hiddens = copy.deepcopy(self.to_time_hiddens)\n            time_cond_dim *= 2\n\n        # project to time tokens as well as time hiddens\n\n        self.to_time_tokens = nn.Sequential(\n"}