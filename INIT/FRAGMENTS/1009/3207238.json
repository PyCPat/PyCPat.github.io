{"BEFORE":"        assert squeeze_ratio >= 1\n        assert inplanes > 0\n        if size is not None:\n            self.global_avgpool = nn.AvgPool2d(size)\n        else:\n            self.global_avgpool = nn.AdaptiveAvgPool2d(1)\n        self.conv1 = nn.Conv2d(inplanes, int(inplanes \/ squeeze_ratio), kernel_size=1, stride=1)\n        self.conv2 = nn.Conv2d(int(inplanes \/ squeeze_ratio), inplanes, kernel_size=1, stride=1)\n        self.relu = make_activation(activation)\n        self.sigmoid = nn.Sigmoid()\n","AFTER":"    def __init__(self, in_planes, out_planes, kernel_size, padding, bias=False):\n        super(DepthwiseSeparableConv, self).__init__()\n        self.depthwise = nn.Conv2d(in_planes, in_planes, kernel_size=kernel_size, padding=padding, groups=in_planes,\n                                   bias=bias)\n        self.pointwise = nn.Conv2d(in_planes, out_planes, kernel_size=1, bias=bias)\n        self.bn1 = nn.BatchNorm2d(in_planes)\n        self.bn2 = nn.BatchNorm2d(out_planes)\n        self.relu = nn.ReLU()\n"}