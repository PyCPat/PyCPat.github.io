{"BEFORE":"            raise \" For TResNet models, please install InplaceABN: 'pip install git+https:\/\/github.com\/mapillary\/inplace_abn.git@v1.0.11' \"\n\n        super(TResNet, self).__init__()\n\n        # JIT layers\n        space_to_depth = SpaceToDepthModule()\n        anti_alias_layer = partial(AntiAliasDownsampleLayer, remove_aa_jit=remove_aa_jit)\n        global_pool_layer = FastGlobalAvgPool2d(flatten=True)\n\n        # TResnet stages\n        self.inplanes = int(64 * width_factor)\n        self.planes = int(64 * width_factor)\n        conv1 = conv2d_ABN(in_chans * 16, self.planes, stride=1, kernel_size=3)\n        layer1 = self._make_layer(BasicBlock, self.planes, layers[0], stride=1, use_se=True,\n                                  anti_alias_layer=anti_alias_layer)  # 56x56\n        layer2 = self._make_layer(BasicBlock, self.planes * 2, layers[1], stride=2, use_se=True,\n                                  anti_alias_layer=anti_alias_layer)  # 28x28\n        layer3 = self._make_layer(Bottleneck, self.planes * 4, layers[2], stride=2, use_se=True,\n                                  anti_alias_layer=anti_alias_layer)  # 14x14\n        layer4 = self._make_layer(Bottleneck, self.planes * 8, layers[3], stride=2, use_se=False,\n                                  anti_alias_layer=anti_alias_layer)  # 7x7\n\n        # body\n        self.body = nn.Sequential(OrderedDict([\n            ('SpaceToDepth', space_to_depth),\n            ('conv1', conv1),\n            ('layer1', layer1),\n            ('layer2', layer2),\n            ('layer3', layer3),\n            ('layer4', layer4)]))\n\n        # head\n        self.embeddings = []\n        self.global_pool = nn.Sequential(OrderedDict([('global_pool_layer', global_pool_layer)]))\n        self.num_features = (self.planes * 8) * Bottleneck.expansion\n        fc = nn.Linear(self.num_features, num_classes)\n        self.head = nn.Sequential(OrderedDict([('fc', fc)]))\n","AFTER":"                 global_pool='avg', drop_rate=0.):\n        if not has_iabn:\n            raise ImportError(\n                \"For TResNet models, please install InplaceABN: \"\n                \"'pip install git+https:\/\/github.com\/mapillary\/inplace_abn.git@v1.0.11'\")\n        self.num_classes = num_classes\n        self.drop_rate = drop_rate\n        super(TResNet, self).__init__()\n\n        # JIT layers\n        space_to_depth = SpaceToDepthModule()\n        anti_alias_layer = partial(AntiAliasDownsampleLayer, no_jit=no_aa_jit)\n\n        # TResnet stages\n        self.inplanes = int(64 * width_factor)\n        self.planes = int(64 * width_factor)\n        conv1 = conv2d_ABN(in_chans * 16, self.planes, stride=1, kernel_size=3)\n        layer1 = self._make_layer(\n            BasicBlock, self.planes, layers[0], stride=1, use_se=True, anti_alias_layer=anti_alias_layer)  # 56x56\n        layer2 = self._make_layer(\n            BasicBlock, self.planes * 2, layers[1], stride=2, use_se=True, anti_alias_layer=anti_alias_layer)  # 28x28\n        layer3 = self._make_layer(\n            Bottleneck, self.planes * 4, layers[2], stride=2, use_se=True, anti_alias_layer=anti_alias_layer)  # 14x14\n        layer4 = self._make_layer(\n            Bottleneck, self.planes * 8, layers[3], stride=2, use_se=False, anti_alias_layer=anti_alias_layer)  # 7x7\n\n        # body\n        self.body = nn.Sequential(OrderedDict([\n            ('SpaceToDepth', space_to_depth),\n            ('conv1', conv1),\n            ('layer1', layer1),\n            ('layer2', layer2),\n            ('layer3', layer3),\n            ('layer4', layer4)]))\n\n        # head\n        self.num_features = (self.planes * 8) * Bottleneck.expansion\n        self.global_pool = None\n        self.head = None\n        self.reset_classifier(num_classes, global_pool)\n"}