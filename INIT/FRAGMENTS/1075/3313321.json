{"BEFORE":"        pool = True,\n        liftsamples = 4,\n        fill = 1\/4,\n        knn = False,\n        cache = False,\n        **kwargs\n    ):\n        super().__init__()\n        if isinstance(fill,(float,int)):\n            fill = [fill] * depth\n\n        group = SE3()\n        self.group = group\n        self.liftsamples = liftsamples\n\n        block = lambda dim, fill: nn.Sequential(\n            LieSelfAttentionWrapper(dim, attn = partial(LieSelfAttention, dim, heads = heads, dim_head = dim_head, loc_attn = loc_attn, mc_samples=nbhd, ds_frac=ds_frac, mean=mean, group=group,fill=fill,cache=cache,knn=knn,**kwargs), fill=fill),\n            FeedForward(dim)\n        )\n\n        self.net = nn.Sequential(\n            Pass(nn.Linear(dim, dim)), #embedding layer\n            *[block(dim, fill[i]) for i in range(depth)],\n            Pass(nn.LayerNorm(dim)),\n            Pass(nn.Linear(dim, dim_out)),\n            GlobalPool(mean=mean) if pool else Lambda(lambda x: x[1]),\n","AFTER":"        dim_out = default(dim_out, dim)\n\n        if isinstance(fill,(float,int)):\n            fill = [fill] * depth\n\n        group = SE3()\n        self.group = group\n        self.liftsamples = liftsamples\n\n        block = lambda dim, fill: nn.Sequential(\n            LieSelfAttentionWrapper(dim, attn = partial(LieSelfAttention, dim, heads = heads, dim_head = dim_head, loc_attn = loc_attn, mc_samples=nbhd, ds_frac=ds_frac, mean=mean, group=group,fill=fill,cache=cache,knn=knn,**kwargs), fill=fill),\n            FeedForward(dim)\n        )\n\n        self.net = nn.Sequential(\n            Pass(nn.Linear(dim, dim)), #embedding layer\n            *[block(dim, fill[i]) for i in range(depth)],\n            Pass(nn.LayerNorm(dim)),\n            Pass(nn.Linear(dim, dim_out))\n        )\n\n        self.pool = GlobalPool(mean=mean)\n"}