{"BEFORE":"        self.encoder1 = nn.Conv3d(1, 32, 3, stride=1, padding=1)  # b, 16, 10, 10\n        self.encoder2=   nn.Conv3d(32, 64, 3, stride=1, padding=1)  # b, 8, 3, 3\n        self.encoder3=   nn.Conv3d(64, 128, 3, stride=1, padding=1)\n        self.encoder4=   nn.Conv3d(128, 256, 3, stride=1, padding=1)\n        self.encoder5=   nn.Conv3d(256, 512, 3, stride=1, padding=1)\n        \n        self.decoder1 = nn.Conv3d(512, 256, 3, stride=1,padding=1)  # b, 16, 5, 5\n        self.decoder2 =   nn.Conv3d(256, 128, 3, stride=1, padding=1)  # b, 8, 15, 1\n        self.decoder3 =   nn.Conv3d(128, 64, 3, stride=1, padding=1)  # b, 1, 28, 28\n        self.decoder4 =   nn.Conv3d(64, 32, 3, stride=1, padding=1)\n        self.decoder5 =   nn.Conv3d(32, 2, 3, stride=1, padding=1)\n        \n        self.map4 = nn.Sequential(\n            nn.Conv3d(2, 1, 1, 1),\n            nn.Upsample(scale_factor=(1, 2, 2), mode='trilinear'),\n            nn.Sigmoid()\n        )\n\n        # 128*128 尺度下的映射\n        self.map3 = nn.Sequential(\n            nn.Conv3d(64, 1, 1, 1),\n            nn.Upsample(scale_factor=(4, 8, 8), mode='trilinear'),\n            nn.Sigmoid()\n        )\n\n        # 64*64 尺度下的映射\n        self.map2 = nn.Sequential(\n            nn.Conv3d(128, 1, 1, 1),\n            nn.Upsample(scale_factor=(8, 16, 16), mode='trilinear'),\n            nn.Sigmoid()\n        )\n\n        # 32*32 尺度下的映射\n        self.map1 = nn.Sequential(\n            nn.Conv3d(256, 1, 1, 1),\n","AFTER":"        self.encoder1 = nn.Conv3d(in_channel, 32, 3, stride=1, padding=1)  # b, 16, 10, 10\n        self.encoder2=   nn.Conv3d(32, 64, 3, stride=1, padding=1)  # b, 8, 3, 3\n        self.encoder3=   nn.Conv3d(64, 128, 3, stride=1, padding=1)\n        self.encoder4=   nn.Conv3d(128, 256, 3, stride=1, padding=1)\n        # self.encoder5=   nn.Conv3d(256, 512, 3, stride=1, padding=1)\n        \n        # self.decoder1 = nn.Conv3d(512, 256, 3, stride=1,padding=1)  # b, 16, 5, 5\n        self.decoder2 =   nn.Conv3d(256, 128, 3, stride=1, padding=1)  # b, 8, 15, 1\n        self.decoder3 =   nn.Conv3d(128, 64, 3, stride=1, padding=1)  # b, 1, 28, 28\n        self.decoder4 =   nn.Conv3d(64, 32, 3, stride=1, padding=1)\n        self.decoder5 =   nn.Conv3d(32, 2, 3, stride=1, padding=1)\n        \n        self.map4 = nn.Sequential(\n            nn.Conv3d(2, out_channel, 1, 1),\n            nn.Upsample(scale_factor=(1, 2, 2), mode='trilinear'),\n            nn.Softmax(dim =1)\n        )\n\n        # 128*128 尺度下的映射\n        self.map3 = nn.Sequential(\n            nn.Conv3d(64, out_channel, 1, 1),\n            nn.Upsample(scale_factor=(4, 8, 8), mode='trilinear'),\n            nn.Softmax(dim =1)\n        )\n\n        # 64*64 尺度下的映射\n        self.map2 = nn.Sequential(\n            nn.Conv3d(128, out_channel, 1, 1),\n            nn.Upsample(scale_factor=(8, 16, 16), mode='trilinear'),\n            nn.Softmax(dim =1)\n        )\n\n        # 32*32 尺度下的映射\n        self.map1 = nn.Sequential(\n            nn.Conv3d(256, out_channel, 1, 1),\n"}