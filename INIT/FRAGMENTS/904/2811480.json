{"BEFORE":"        self.kernel_size = kernel_size\n        self.pool_axis = pool_axis\n        self.ceil_mode = ceil_mode\n        self.padding = padding\n        self.dilation = dilation\n        self.pool1d = False\n        self.pool2d = False\n        self.combine_batch_time = False\n\n        if isinstance(self.kernel_size, int):\n            self.kernel_size = (self.kernel_size,)\n        if isinstance(self.pool_axis, int):\n            self.pool_axis = (self.pool_axis,)\n\n        if stride is None:\n","AFTER":"        self.pool_type = pool_type\n        self.kernel_size = kernel_size\n        self.pool_axis = pool_axis\n        self.ceil_mode = ceil_mode\n        self.padding = padding\n        self.dilation = dilation\n        self.combine_batch_time = False\n\n        if stride is None:\n            self.stride = kernel_size\n        else:\n            self.stride = stride\n\n        if self.pool_type == \"avg\":\n\n            self.pool_layer = torch.nn.AvgPool1d(\n                self.kernel_size,\n                stride=self.stride,\n                padding=self.padding,\n                ceil_mode=self.ceil_mode,\n            )\n\n        else:\n            self.pool_layer = torch.nn.MaxPool1d(\n                self.kernel_size,\n                stride=self.stride,\n                padding=self.padding,\n                ceil_mode=self.ceil_mode,\n            )\n\n    def forward(self, x, init_params=False):\n"}