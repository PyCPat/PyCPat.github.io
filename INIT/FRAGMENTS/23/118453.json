{"BEFORE":"            nn.Dropout(dropout),\n            SiLU(),\n            nn.Linear(edge_input_dim * 2, m_dim),\n            SiLU()\n        )\n\n        self.node_mlp = nn.Sequential(\n            nn.Linear(dim + m_dim, dim * 2),\n            nn.Dropout(dropout),\n            SiLU(),\n            nn.Linear(dim * 2, dim),\n        )\n\n        self.norm_rel_coors = norm_rel_coors\n        if norm_rel_coors:\n            self.rel_coors_scale = nn.Parameter(torch.ones(1))\n\n        last_coor_linear = nn.Linear(m_dim * 4, 1)\n        self.coors_mlp = nn.Sequential(\n            nn.Linear(m_dim, m_dim * 4),\n            nn.Dropout(dropout),\n","AFTER":"        dropout = nn.Dropout(dropout) if dropout > 0 else nn.Identity()\n\n        self.edge_mlp = nn.Sequential(\n            nn.Linear(edge_input_dim, edge_input_dim * 2),\n            dropout,\n            SiLU(),\n            nn.Linear(edge_input_dim * 2, m_dim),\n            SiLU()\n        )\n\n        self.node_mlp = nn.Sequential(\n            nn.Linear(dim + m_dim, dim * 2),\n            dropout,\n            SiLU(),\n            nn.Linear(dim * 2, dim),\n        )\n\n        self.norm_rel_coors = norm_rel_coors\n        if norm_rel_coors:\n            self.rel_coors_scale = nn.Parameter(torch.ones(1))\n\n        last_coor_linear = nn.Linear(m_dim * 4, 1)\n        self.coors_mlp = nn.Sequential(\n            nn.Linear(m_dim, m_dim * 4),\n            dropout,\n"}