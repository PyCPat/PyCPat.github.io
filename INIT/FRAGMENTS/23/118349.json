{"BEFORE":"        self.dropout = dropout\n        self.causal = causal\n        self.residual = residual\n        self.use_stride_conv = use_stride_conv\n\n        self.pad = (kernel_size - 1) * dilation \/\/ 2\n        if use_stride_conv:\n            self.stride = kernel_size\n            self.causal_shift = kernel_size \/\/ 2 if causal else 0\n            self.dilation = 1\n        else:\n            self.stride = 1\n            self.causal_shift = kernel_size \/\/ 2 * dilation if causal else 0\n\n        self.conv1 = nn.Sequential(\n            ConvModule(\n                in_channels,\n                mid_channels,\n                kernel_size=kernel_size,\n                stride=self.stride,\n                dilation=self.dilation,\n                bias=False,\n                conv_cfg=conv_cfg,\n                norm_cfg=norm_cfg), nn.Dropout(self.dropout))\n        self.conv2 = nn.Sequential(\n            ConvModule(\n                mid_channels,\n                out_channels,\n                kernel_size=1,\n                bias=False,\n                conv_cfg=conv_cfg,\n                norm_cfg=norm_cfg), nn.Dropout(self.dropout))\n","AFTER":"        self.dropout = nn.Dropout(dropout) if dropout > 0 else None\n"}