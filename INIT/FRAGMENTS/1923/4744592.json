{"BEFORE":"\t\tself.initial_size = config['img_shape'][0] \/\/ (2 ** 4)\n\n\t\tself.content_embedding = nn.Embedding(config['n_imgs'], config['content_dim'])\n\t\t# self.style_embedding = nn.Embedding(config['n_imgs'], config['style_dim'])\n\t\tself.class_embedding = nn.Embedding(config['n_classes'], config['class_dim'])\n\n\t\tself.class_style_modulation = nn.Sequential(\n\t\t\tnn.Linear(in_features=config['class_dim'] + config['style_dim'], out_features=config['style_dim'] * 2),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\n\t\t\tnn.Linear(in_features=config['style_dim'] * 2, out_features=config['style_dim']),\n\t\t\tnn.LeakyReLU(negative_slope=0.2)\n\n\t\t)\n\n\t\tself.projection = nn.Sequential(\n\t\t\tnn.Linear(in_features=config['content_dim'], out_features=256),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\n\t\t\tnn.Linear(in_features=256, out_features=256 * self.initial_size * self.initial_size),\n\t\t\tnn.LeakyReLU(negative_slope=0.2)\n\t\t)\n\n\t\tself.decoder = nn.Sequential(\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=False),\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=False),\n\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=256, dim_out=128, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=128, dim_out=64, style_dim=config['style_dim'], upsample=True)\n\t\t)\n\n\t\tself.to_rgb = nn.Sequential(\n\t\t\tnn.InstanceNorm2d(num_features=64, affine=True),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\t\t\tnn.Conv2d(in_channels=64, out_channels=3, kernel_size=1, stride=1, padding=0),\n\t\t\tnn.Tanh()\n\t\t)\n\n\t\tself.apply(he_init)\n","AFTER":"\t\tself.modulation = Modulation(config['style_dim'], n_adain_layers=4, adain_dim=256)\n\t\tself.decoder = Decoder(config['content_dim'], n_adain_layers=4, adain_dim=256, img_shape=config['img_shape'])\n\n\t\tself.apply(self.weights_init)\n"}