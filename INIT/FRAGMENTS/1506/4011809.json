{"BEFORE":"            nn.Conv2d(in_channels=in_depth, out_channels=12*model_size, kernel_size=5, stride=1),\n            nn.LeakyReLU(),\n            nn.MaxPool2d(2, 2),\n            WideImpalaCNNBlock(12*model_size, 40*model_size, norm_func=norm_func),\n            WideImpalaCNNBlock(40*model_size, 64*model_size, norm_func=norm_func),\n            nn.ReLU()\n        )\n\n        self.pool = torch.nn.AdaptiveMaxPool2d((6, 6))\n        self.dueling = DuelingAlt(linear_layer(64*model_size*6*6, 384), linear_layer(384, actions + 1))\n","AFTER":"            BNImpalaCNNBlock(in_depth, 16 * model_size, norm_func=norm_func),\n            BNImpalaCNNBlock(16 * model_size, 32 * model_size, norm_func=norm_func),\n            BNImpalaCNNBlock(32 * model_size, 32 * model_size, norm_func=norm_func),\n            nn.ReLU()\n        )\n\n        self.pool = torch.nn.AdaptiveMaxPool2d((8, 8))\n        self.dueling = Dueling(\n            nn.Sequential(linear_layer(2048*model_size, 256),\n                          nn.ReLU(),\n                          linear_layer(256, 1)),\n            nn.Sequential(linear_layer(2048*model_size, 256),\n                          nn.ReLU(),\n                          linear_layer(256, actions))\n"}