{"BEFORE":"        self.dropout = nn.Dropout(p=dropout_rate)\n        self.context = context\n        self.mix_base = mix_base\n        self.join = join\n        if len(layers)>0 and layers[0]==0:\n            layers = ()\n\n        if join=='cat':\n            n = n_in*2 # concat\n        else:\n            n = n_in # add or mul\n        n += n_in_base*mix_base*2\n        \n        conv = []\n        for m in layers:\n            conv.append(nn.Conv2d(n, m, context, padding=context\/\/2))\n            n = m\n        conv.append(nn.Conv2d(n, n_out, context, padding=context\/\/2))\n        self.conv = nn.ModuleList(conv)\n","AFTER":"        l = []\n        for m in layers:\n            l += [ \n                nn.Conv2d(n, m, context, padding=context\/\/2), \n                nn.GroupNorm(1, m),\n                nn.ELU(), \n                nn.Dropout(p=dropout_rate) ]\n            n = m\n        l += [ nn.Conv2d(n, n_out, context, padding=context\/\/2), nn.GroupNorm(1, n_out) ]\n        self.net = nn.Sequential(*l)\n"}