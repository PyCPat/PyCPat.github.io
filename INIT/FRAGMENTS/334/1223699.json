{"BEFORE":"    def __init__(self, input_channels, action_dim,  hidden_size = 512, flatten_size = 64*7*7):\n        super(CategoricalActorCriticConvNet, self).__init__()\n        self.main = ConvBody(input_channels = input_channels, hidden_size = hidden_size, flatten_size = flatten_size)\n        self.actor = layer_init(nn.Linear(hidden_size, action_dim), gain = 0.01)\n        self.critic = layer_init(nn.Linear(hidden_size, 1))\n","AFTER":"        actor_layer_size = [input_dim] + hidden_layer + [action_dim]\n        self.actor = make_linear_model(actor_layer_size, output_gain = 0.01)\n        critic_layer_size = [input_dim] + hidden_layer + [1]\n        self.critic = make_linear_model(critic_layer_size)\n        self.actor_params =  list(self.actor.parameters())\n        self.critic_params =  list(self.critic.parameters())\n"}