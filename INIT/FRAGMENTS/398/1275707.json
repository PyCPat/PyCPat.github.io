{"BEFORE":"        SA_cfg = self.model_cfg.SA_LAYER\n\n        self.SA_layers = nn.ModuleList()\n        self.SA_layer_names = []\n        self.downsample_times_map = {}\n        c_in = 0\n        for src_name in self.model_cfg.FEATURES_SOURCE:\n            if src_name in ['bev', 'raw_points']:\n                continue\n            self.downsample_times_map[src_name] = SA_cfg[src_name].DOWNSAMPLE_FACTOR\n            mlps = SA_cfg[src_name].MLPS\n            for k in range(len(mlps)):\n                mlps[k] = [mlps[k][0]] + mlps[k]\n            cur_layer = pointnet2_stack_modules.StackSAModuleMSG(\n                radii=SA_cfg[src_name].POOL_RADIUS,\n                nsamples=SA_cfg[src_name].NSAMPLE,\n                mlps=mlps,\n                use_xyz=True,\n                pool_method='max_pool',\n            )\n            self.SA_layers.append(cur_layer)\n            self.SA_layer_names.append(src_name)\n\n            c_in += sum([x[-1] for x in mlps])\n\n        if 'bev' in self.model_cfg.FEATURES_SOURCE:\n            c_bev = num_bev_features\n            c_in += c_bev\n\n        if 'raw_points' in self.model_cfg.FEATURES_SOURCE:\n            mlps = SA_cfg['raw_points'].MLPS\n            for k in range(len(mlps)):\n                mlps[k] = [num_rawpoint_features - 3] + mlps[k]\n\n            self.SA_rawpoints = pointnet2_stack_modules.StackSAModuleMSG(\n                radii=SA_cfg['raw_points'].POOL_RADIUS,\n                nsamples=SA_cfg['raw_points'].NSAMPLE,\n                mlps=mlps,\n                use_xyz=True,\n                pool_method='max_pool'\n            )\n            c_in += sum([x[-1] for x in mlps])\n","AFTER":"        SA_cfg = self.model_cfg.SA_LAYER\n\n        self.SA_layers = nn.ModuleList()\n        self.SA_layer_names = []\n        self.downsample_times_map = {}\n        c_in = 0\n        for src_name in self.model_cfg.FEATURES_SOURCE:\n            if src_name in ['bev', 'raw_points']:\n                continue\n            self.downsample_times_map[src_name] = SA_cfg[src_name].DOWNSAMPLE_FACTOR\n\n            if SA_cfg[src_name].get('INPUT_CHANNELS', None) is None:\n                input_channels = SA_cfg[src_name].MLPS[0][0] \\\n                    if isinstance(SA_cfg[src_name].MLPS[0], list) else SA_cfg[src_name].MLPS[0]\n            else:\n                input_channels = SA_cfg[src_name]['INPUT_CHANNELS']\n\n            cur_layer, cur_num_c_out = pointnet2_stack_modules.build_local_aggregation_module(\n                input_channels=input_channels, config=SA_cfg[src_name]\n            )\n            self.SA_layers.append(cur_layer)\n            self.SA_layer_names.append(src_name)\n\n            c_in += cur_num_c_out\n\n        if 'bev' in self.model_cfg.FEATURES_SOURCE:\n            c_bev = num_bev_features\n            c_in += c_bev\n\n        if 'raw_points' in self.model_cfg.FEATURES_SOURCE:\n            self.SA_rawpoints, cur_num_c_out = pointnet2_stack_modules.build_local_aggregation_module(\n                input_channels=num_rawpoint_features - 3, config=SA_cfg['raw_points']\n            )\n\n            c_in += cur_num_c_out\n"}