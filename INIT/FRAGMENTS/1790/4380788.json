{"BEFORE":"        if 'in_channels' in kwargs:\n            self.in_channels = kwargs['in_channels']\n        else:\n            self.in_channels = 1\n        \n        self.n_basis = n_basis\n","AFTER":"        rnn_type='lstm',\n        n_sources=2,\n        eps=EPS,\n        **kwargs\n    ):\n        super().__init__()\n        \n        if stride is None:\n            stride = kernel_size \/\/ 2\n        \n        assert kernel_size % stride == 0, \"kernel_size is expected divisible by stride\"\n        assert enc_basis in ['trainable', 'trainableGated']  and dec_basis == 'trainable', \"enc_basis is expected 'trainable' or 'trainableGated'. dec_basis is expected 'trainable'.\"\n        \n        self.in_channels = kwargs.get('in_channels', 1)\n        \n        self.n_basis = n_basis\n        self.kernel_size, self.stride = kernel_size, stride\n        self.enc_basis, self.dec_basis = enc_basis, dec_basis\n        self.sep_num_blocks, self.sep_num_layers = sep_num_blocks, sep_num_layers\n        self.sep_hidden_channels = sep_hidden_channels\n        self.causal = causal\n        self.mask_nonlinear = mask_nonlinear\n        self.rnn_type = rnn_type\n"}