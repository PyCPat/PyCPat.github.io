{"BEFORE":"        layer_sizes = layer_sizes + [latent_size]\n\n        if kernel_sizes is None:\n            kernel_sizes = [5] * (len(layer_sizes) - 1)\n        if stride is None:\n            stride = [1] * (len(layer_sizes) - 1)\n        if padding is None:\n            padding = [2] * (len(layer_sizes) - 1)\n\n        current_size = input_size\n        current_channels = 1\n        for l_id in range(len(layer_sizes) - 1):\n            if l_id == len(layer_sizes) - 2:\n                layers.append(nn.Sequential(\n                    nn.Linear(int(current_size * current_size * current_channels), layer_sizes[l_id + 1]),\n","AFTER":"        layer_sizes = layer_sizes + [latent_size]\n\n        if kernel_sizes is None:\n            kernel_sizes = [5] * (len(layer_sizes) - 1)\n        if stride is None:\n            stride = [1] * (len(layer_sizes) - 1)\n        if padding is None:\n            padding = [2] * (len(layer_sizes) - 1)\n\n        current_size = input_size\n        current_channels = 1\n        for l_id in range(len(layer_sizes)):\n            if l_id == len(layer_sizes) - 1:\n                layers.append(nn.Sequential(\n                    nn.Linear(int(current_size * current_size * current_channels), layer_sizes[l_id]),\n"}