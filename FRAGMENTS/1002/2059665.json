{"BEFORE":"        self.nl = len(anchors)  # number of detection layers\n        self.na = len(anchors[0]) * self.nl  # number of anchors\n        self.naxs = len(anchors[0])\n        self.grid = [torch.empty(1)] * self.nl  # init grid\n        self.anchor_grid = [torch.empty(1)] * self.nl  # init anchor grid\n\n        # https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.Module.html command+f register_buffer\n        # has the same result as self.anchors = anchors but, it's a way to register a buffer (make\n        # a variable available in runtime) that should not be considered a model parameter\n        self.anchors = torch.tensor(anchors, device=config.DEVICE).float().view(self.nl, -1, 2)  # shape(nl,na,2)\n","AFTER":"        self.nl = len(anchors)  # number of detection layers\n        self.na = len(anchors[0]) * self.nl  # number of anchors\n        self.naxs = len(anchors[0])\n        self.grid = [torch.empty(1)] * self.nl  # init grid\n        self.anchor_grid = [torch.empty(1)] * self.nl  # init anchor grid\n\n        # https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.Module.html command+f register_buffer\n        # has the same result as self.anchors = anchors but, it's a way to register a buffer (make\n        # a variable available in runtime) that should not be considered a model parameter\n        #self.anchors = torch.tensor(anchors, device=config.DEVICE).float().view(self.nl, -1, 2)  # shape(nl,na,2)\n        self.register_buffer('anchors', torch.tensor(anchors).float().view(self.nl, -1, 2))  # shape(nl,na,2)\n"}