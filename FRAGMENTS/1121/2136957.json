{"BEFORE":"    def __init__(self, in_channels, out_channels, g_spectral_norm, activation_fn, conditional_bn, z_dims_after_concat,\n                 upsample, channel_ratio=4):\n        super(GenBlock, self).__init__()\n        self.conditional_bn = conditional_bn\n        self.in_channels, self.out_channels = in_channels, out_channels\n        self.upsample = upsample\n        self.hidden_channels = self.in_channels\/\/channel_ratio\n\n        if self.conditional_bn:\n            self.bn1 = ConditionalBatchNorm2d_for_skip_and_shared(num_features=in_channels, z_dims_after_concat=z_dims_after_concat,\n                                                                  spectral_norm=g_spectral_norm)\n            self.bn2 = ConditionalBatchNorm2d_for_skip_and_shared(num_features=self.hidden_channels, z_dims_after_concat=z_dims_after_concat,\n                                                                  spectral_norm=g_spectral_norm)\n            self.bn3 = ConditionalBatchNorm2d_for_skip_and_shared(num_features=self.hidden_channels, z_dims_after_concat=z_dims_after_concat,\n                                                                  spectral_norm=g_spectral_norm)\n            self.bn4 = ConditionalBatchNorm2d_for_skip_and_shared(num_features=self.hidden_channels, z_dims_after_concat=z_dims_after_concat,\n                                                                  spectral_norm=g_spectral_norm)\n        else:\n            self.bn1 = batchnorm_2d(in_features=in_channels)\n            self.bn2 = batchnorm_2d(in_features=self.hidden_channels)\n            self.bn3 = batchnorm_2d(in_features=self.hidden_channels)\n            self.bn4 = batchnorm_2d(in_features=self.hidden_channels)\n\n        if activation_fn == \"ReLU\":\n            self.activation = nn.ReLU(inplace=True)\n        elif activation_fn == \"Leaky_ReLU\":\n            self.activation = nn.LeakyReLU(negative_slope=0.1, inplace=True)\n        elif activation_fn == \"ELU\":\n            self.activation = nn.ELU(alpha=1.0, inplace=True)\n        elif activation_fn == \"GELU\":\n            self.activation = nn.GELU()\n        else:\n            raise NotImplementedError\n\n        if g_spectral_norm:\n            self.conv2d1 = snconv2d(in_channels=in_channels, out_channels=self.hidden_channels, kernel_size=1, stride=1, padding=0)\n            self.conv2d2 = snconv2d(in_channels=self.hidden_channels, out_channels=self.hidden_channels, kernel_size=3, stride=1, padding=1)\n            self.conv2d3 = snconv2d(in_channels=self.hidden_channels, out_channels=self.hidden_channels, kernel_size=3, stride=1, padding=1)\n            self.conv2d4 = snconv2d(in_channels=self.hidden_channels, out_channels=out_channels, kernel_size=1, stride=1, padding=0)\n        else:\n            self.conv2d1 = conv2d(in_channels=in_channels, out_channels=self.hidden_channels, kernel_size=1, stride=1, padding=0)\n            self.conv2d2 = conv2d(in_channels=self.hidden_channels, out_channels=self.hidden_channels, kernel_size=3, stride=1, padding=1)\n            self.conv2d3 = conv2d(in_channels=self.hidden_channels, out_channels=self.hidden_channels, kernel_size=3, stride=1, padding=1)\n            self.conv2d4 = conv2d(in_channels=self.hidden_channels, out_channels=out_channels, kernel_size=1, stride=1, padding=0)\n\n\n    def forward(self, x, label):\n","AFTER":"    def __init__(self, in_channels, out_channels, g_cond_mtd, hier_z_dim, upsample, MODULES, channel_ratio=4):\n        super(GenBlock, self).__init__()\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.g_cond_mtd = g_cond_mtd\n        self.upsample = upsample\n        self.hidden_channels = self.in_channels\/\/channel_ratio\n\n        if self.g_cond_mtd == \"W\/O\":\n            self.bn1 = MODULES.g_bn(in_features=self.in_channels)\n            self.bn2 = MODULES.g_bn(in_features=self.hidden_channels)\n            self.bn3 = MODULES.g_bn(in_features=self.hidden_channels)\n            self.bn4 = MODULES.g_bn(in_features=self.hidden_channels)\n        elif self.g_cond_mtd == \"cBN\":\n            self.bn1 = MODULES.g_bn(hier_z_dim, self.in_channels, MODULES)\n            self.bn2 = MODULES.g_bn(hier_z_dim, self.hidden_channels, MODULES)\n            self.bn3 = MODULES.g_bn(hier_z_dim, self.hidden_channels, MODULES)\n            self.bn4 = MODULES.g_bn(hier_z_dim, self.hidden_channels, MODULES)\n        else:\n            raise NotImplementedError\n\n        self.activation = MODULES.g_act_fn\n\n        self.conv2d1 = MODULES.g_conv2d(in_channels=self.in_channels,\n                                        out_channels=self.hidden_channels,\n                                        kernel_size=1,\n                                        stride=1,\n                                        padding=0)\n\n        self.conv2d2 = MODULES.g_conv2d(in_channels=self.hidden_channels,\n                                        out_channels=self.hidden_channels,\n                                        kernel_size=3,\n                                        stride=1,\n                                        padding=1)\n\n        self.conv2d3 = MODULES.g_conv2d(in_channels=self.hidden_channels,\n                                        out_channels=self.hidden_channels,\n                                        kernel_size=3,\n                                        stride=1,\n                                        padding=1)\n\n        self.conv2d4 = MODULES.g_conv2d(in_channels=self.hidden_channels,\n                                        out_channels=self.out_channels,\n                                        kernel_size=1,\n                                        stride=1,\n                                        padding=0)\n"}