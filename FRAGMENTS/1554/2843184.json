{"BEFORE":"        padding: int = 1\n    ):\n        super().__init__()\n\n        self.layer = nn.Sequential(\n            nn.Conv2d(in_channels, in_channels, kernel_size=kernel_size,\n                      bias=False, stride=stride, padding=padding, groups=in_channels),\n            nn.ReLU(inplace=True),\n            nn.BatchNorm2d(in_channels),\n            nn.Conv2d(in_channels, out_channels, kernel_size=1,\n                      stride=1, bias=False, padding=0),\n            nn.ReLU(inplace=True),\n            nn.BatchNorm2d(out_channels),\n        )\n","AFTER":"        self.padding = kernel_size \/\/ 2\n        super().__init__()\n\n        self.branch1 = nn.Sequential(\n            blocks.DepthwiseConv2d(inp, inp, kernel_size,\n                                   stride=1, padding=self.padding),\n            blocks.PointwiseBlock(inp, oup, groups=groups)\n        )\n\n        self.branch2 = nn.Identity()\n        self.combine = blocks.Combine('ADD')\n        self.relu = nn.ReLU(inplace=True)\n"}