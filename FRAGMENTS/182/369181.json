{"BEFORE":"        self.translation_table = defaultdict(lambda: defaultdict(lambda: float))\n        \"\"\"\n        Probability(target word | source word). Values accessed as\n        ``translation_table[target_word][source_word].``\n        \"\"\"\n\n        self.alignment_table = defaultdict(\n            lambda: defaultdict(lambda: defaultdict(lambda: defaultdict(\n                lambda: float))))\n","AFTER":"        super(IBMModel2, self).__init__(sentence_aligned_corpus)\n\n        # Get initial translation probability distribution\n        # from a few iterations of Model 1 training.\n        ibm1 = IBMModel1(sentence_aligned_corpus, 10)\n        self.translation_table = ibm1.translation_table\n\n        # Initialize the distribution of alignment probability,\n        # a(i | j,l,m) = 1 \/ (l+1) for all i, j, l, m\n        for aligned_sentence in sentence_aligned_corpus:\n            l = len(aligned_sentence.mots)\n            m = len(aligned_sentence.words)\n            initial_value = 1 \/ (l + 1)\n            for i in range(0, l + 1):\n                for j in range(1, m + 1):\n                    self.alignment_table[i][j][l][m] = initial_value\n\n        self.train(sentence_aligned_corpus, iterations)\n"}