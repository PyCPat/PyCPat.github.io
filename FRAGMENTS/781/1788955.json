{"BEFORE":"        self.inception_window = [0.5, 0.25, 0.125, 0.0625, 0.03125]\r\n        # by setting the convolutional kernel being (1,lenght) and the strids being 1 we can use conv2d to\r\n        # achieve the 1d convolution operation\r\n        self.Tception1 = nn.Sequential(\r\n            nn.Conv2d(1, num_T, kernel_size=(1,int(self.inception_window[0]*sampling_rate)), stride=1, padding=0),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(kernel_size=(1,16), stride=(1,16)))\r\n        self.Tception2 = nn.Sequential(\r\n            nn.Conv2d(1, num_T, kernel_size=(1,int(self.inception_window[1]*sampling_rate)), stride=1, padding=0),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(kernel_size=(1,16), stride=(1,16)))\r\n        self.Tception3 = nn.Sequential(\r\n            nn.Conv2d(1, num_T, kernel_size=(1,int(self.inception_window[2]*sampling_rate)), stride=1, padding=0),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(kernel_size=(1,16), stride=(1,16)))\r\n        \r\n        self.Sception1 = nn.Sequential(\r\n            nn.Conv2d(num_T, num_S, kernel_size=(int(input_size[0]),1), stride=1, padding=0),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(kernel_size=(1,8), stride=(1,8)))\r\n        self.Sception2 = nn.Sequential(\r\n            nn.Conv2d(num_T, num_S, kernel_size=(int(input_size[0]*0.5),1), stride=(int(input_size[0]*0.5),1), padding=0),\r\n            nn.ReLU(),\r\n            nn.AvgPool2d(kernel_size=(1,8), stride=(1,8)))\r\n\r\n        self.BN_t = nn.BatchNorm2d(num_T)\r\n        self.BN_s = nn.BatchNorm2d(num_S)\r\n        size = self.get_size(input_size)\r\n        \r\n        self.fc1 = nn.Sequential(\r\n            nn.Linear(size[1], hiden),\r\n            nn.ReLU(),\r\n            nn.Dropout(dropout_rate))\r\n        self.fc2 = nn.Sequential(\r\n            nn.Linear(hiden, num_classes),\r\n            nn.LogSoftmax())\r\n","AFTER":"        self.pool = 8\r\n        # by setting the convolutional kernel being (1,lenght) and the strids being 1 we can use conv2d to\r\n        # achieve the 1d convolution operation\r\n        self.Tception1 = self.conv_block(1, num_T, (1, int(self.inception_window[0] * sampling_rate)), 1, self.pool)\r\n        self.Tception2 = self.conv_block(1, num_T, (1, int(self.inception_window[1] * sampling_rate)), 1, self.pool)\r\n        self.Tception3 = self.conv_block(1, num_T, (1, int(self.inception_window[2] * sampling_rate)), 1, self.pool)\r\n\r\n        self.Sception1 = self.conv_block(num_T, num_S, (int(input_size[1]), 1), 1, int(self.pool*0.25))\r\n        self.Sception2 = self.conv_block(num_T, num_S, (int(input_size[1] * 0.5), 1), (int(input_size[1] * 0.5), 1),\r\n                                         int(self.pool*0.25))\r\n        self.BN_t = nn.BatchNorm2d(num_T)\r\n        self.BN_s = nn.BatchNorm2d(num_S)\r\n\r\n        size = self.get_size(input_size)\r\n        self.fc = nn.Sequential(\r\n            nn.Linear(size[1], hidden),\r\n            nn.ReLU(),\r\n            nn.Dropout(dropout_rate),\r\n            nn.Linear(hidden, num_classes),\r\n            nn.LogSoftmax(dim=1)\r\n"}