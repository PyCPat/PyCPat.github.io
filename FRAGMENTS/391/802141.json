{"BEFORE":"        relu: bool = True,\n        bn: bool = True,\n        bias: bool = True\n    ) -> None:\n        super(DepthwiseConv, self).__init__()\n\n        if kernel_size == 1:\n            self.conv = nn.Conv2d(\n                in_planes, out_planes, kernel_size=kernel_size, stride=stride,\n                padding=padding, dilation=dilation, groups=groups, bias=bias,\n            )\n        elif kernel_size==3 or kernel_size==5:\n            kernel_size = 5\n            padding = 2\n            self.conv = nn.Sequential(\n                    nn.Conv2d(\n                        in_planes, in_planes, kernel_size=kernel_size, stride=stride,\n                        padding=padding, dilation=dilation, groups=in_planes, bias=bias,\n                    ),\n                    nn.BatchNorm2d(in_planes, eps=1e-5, momentum=0.01, affine=True),\n                    nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False),\n            )\n        else:\n            raise ValueError\n            \n        self.bn = nn.BatchNorm2d(out_planes) if bn else None\n        self.relu = nn.LeakyReLU(0.1, inplace=True) if relu else None\n","AFTER":"        bias: bool = False,\n        act: bool = True,\n        bn: bool = True,\n    ) -> None:\n        super(DepthwiseConv, self).__init__()\n\n        if kernel_size == 1:\n            self.dconv = None\n        else:\n            kernel_size, padding = 5, 2\n            self.dconv = BasicConv(\n                in_planes,\n                in_planes,\n                kernel_size=kernel_size,\n                stride=stride,\n                padding=padding,\n                dilation=dilation,\n                groups=in_planes,\n                bias=bias,\n                act=False,\n                bn=True,\n            )\n        self.pconv = BasicConv(\n            in_planes,\n            out_planes,\n            kernel_size=1,\n            act=act,\n            bn=bn,\n        )\n"}