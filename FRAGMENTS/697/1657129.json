{"BEFORE":"        self.register_buffer('freqs', freqs)\n","AFTER":"        learned_freq = False\n    ):\n        super().__init__()\n        if freqs_for == 'lang':\n            freqs = 1. \/ (theta ** (torch.arange(0, dim, 2).float() \/ dim))\n        elif freqs_for == 'pixel':\n            freqs = torch.logspace(0., log(max_freq \/ 2) \/ log(2), dim \/\/ 2, base = 2) * pi\n        elif exists(custom_freqs):\n            freqs = custom_freqs\n        else:\n            raise ValueError(f'unknown modality {freqs_for}')\n\n        self.cache = dict()\n\n        if learned_freq:\n            self.freqs = nn.Parameter(freqs)\n        else:\n            self.register_buffer('freqs', freqs)\n\n    def forward(self, t, cache_key = None):\n"}