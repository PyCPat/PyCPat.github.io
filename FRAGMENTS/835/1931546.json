{"BEFORE":"    def __init__(self, block, layers, num_classes=1000, cardinality=32, base_width=4, shortcut='C',\n                 drop_rate=0., global_pool='avg'):\n        self.num_classes = num_classes\n        self.inplanes = 64\n        self.cardinality = cardinality\n        self.base_width = base_width\n        self.shortcut = shortcut\n        self.drop_rate = drop_rate\n        super(ResNeXt, self).__init__()\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        self.bn1 = nn.BatchNorm2d(64)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\n        self.avgpool = AdaptiveAvgMaxPool2d(pool_type=global_pool)\n        self.num_features = 512 * block.expansion\n        self.fc = nn.Linear(self.num_features, num_classes)\n\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. \/ n))\n","AFTER":"        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n"}