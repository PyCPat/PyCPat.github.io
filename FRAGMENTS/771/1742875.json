{"BEFORE":"            nn.LayerNorm(node_encoding_size)\n        )\n\n        # Spatial head to process spatial encodings\n        self.spatial_head = nn.Sequential(\n            nn.Conv2d(2, 64, 5),\n            nn.MaxPool2d(2),\n            nn.Conv2d(64, 32, 5),\n            nn.MaxPool2d(2),\n            Flatten(start_dim=1),\n            nn.Linear(5408, 2048)\n        )\n\n        # Bipartite graph\n        self.bipartite_graph = BipartiteGraph(\n            node_encoding_size,\n            representation_size,\n            num_iter\n        )\n","AFTER":"        self.adjacency = nn.Sequential(\n            nn.Linear(node_encoding_size*2, representation_size),\n            nn.ReLU(),\n            nn.Linear(representation_size, int(representation_size\/2)),\n            nn.ReLU(),\n            nn.Linear(int(representation_size\/2), 1),\n            nn.Sigmoid()\n        )\n\n        # Compute messages\n        self.sub_to_obj = nn.Sequential(\n            nn.Linear(node_encoding_size, representation_size),\n            nn.ReLU()\n        )\n        self.obj_to_sub = nn.Sequential(\n            nn.Linear(node_encoding_size, representation_size),\n            nn.ReLU()\n        )\n\n        # Update node hidden states\n        self.sub_update = nn.Linear(\n            node_encoding_size + representation_size,\n            node_encoding_size,\n            bias=False\n        )\n        self.obj_update = nn.Linear(\n            node_encoding_size + representation_size,\n            node_encoding_size,\n            bias=False\n        )\n"}