{"BEFORE":"    def __init__(self, out_channels=255):\n        super(YOLOv4, self).__init__()\n\n        # CSPDarknet53 backbone\n        self.backbone, feature_channels = _BuildCSPDarknet53()\n\n        # head conv\n        self.head_conv = nn.Sequential(\n            Conv(feature_channels[-1], feature_channels[-1]\/\/2, 1),\n            Conv(feature_channels[-1]\/\/2, feature_channels[-1], 3),\n            Conv(feature_channels[-1], feature_channels[-1]\/\/2, 1),\n        )\n\n        # Spatial Pyramid Pooling\n        self.spp = SpatialPyramidPooling()\n\n        # Path Aggregation Net\n        self.panet = PANet(feature_channels)\n\n        # predict\n        self.predict_net = PredictNet(feature_channels, out_channels)\n\n        self.__initialize_weights()\n","AFTER":"    def __init__(self, weight_path=None, out_channels=255, resume=False):\n        super(YOLOv4, self).__init__()\n\n        a = cfg.MODEL_TYPE['TYPE']\n        if cfg.MODEL_TYPE['TYPE'] == 'YOLOv4':\n            # CSPDarknet53 backbone\n            self.backbone, feature_channels = _BuildCSPDarknet53(weight_path=weight_path, resume=resume)\n        elif cfg.MODEL_TYPE[\"TYPE\"] == 'Mobilenet-YOLOv4':\n            # MobilenetV2 backbone\n            self.backbone, feature_channels = _BuildMobilenetV2(weight_path=weight_path, resume=resume)\n        else:\n            assert print('model type must be YOLOv4 or Mobilenet-YOLOv4')\n\n        # Spatial Pyramid Pooling\n        self.spp = SpatialPyramidPooling(feature_channels)\n"}