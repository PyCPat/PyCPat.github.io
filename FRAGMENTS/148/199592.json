{"BEFORE":"        C = False\n        if self._C and word[0].isupper(): C=True\n\n        # if word is known\n        # compute the set of possible tags\n        # and their associated log probabilities\n        if word in self._wd.conditions():\n            self.known += 1\n\n            for (history, curr_sent_logprob) in current_states:\n                logprobs = []\n\n                for t in self._wd[word].keys():\n                    p_uni = self._uni.freq((t,C))\n                    p_bi = self._bi[history[-1]].freq((t,C))\n                    p_tri = self._tri[tuple(history[-2:])].freq((t,C))\n                    p_wd = self._wd[word][t] \/ self._uni[(t,C)]\n                    p = self._l1 *p_uni + self._l2 *p_bi + self._l3 *p_tri\n                    p2 = log(p, 2) + log(p_wd, 2)\n\n                    logprobs.append(((t,C), p2))\n\n\n                # compute the result of appending each tag to this history\n                for (tag, logprob) in logprobs:\n                    new_states.append((history + [tag],\n                                       curr_sent_logprob + logprob))\n\n\n\n\n        # otherwise a new word, set of possible tags is unknown\n        else:\n","AFTER":"        C = False\n        if self._C and word[0].isupper(): C=True\n\n        # if word is known\n        # compute the set of possible tags\n        # and their associated log probabilities\n        if word in self._wd:\n            self.known += 1\n\n            for (history, curr_sent_logprob) in current_states:\n                logprobs = []\n\n                for t in self._wd[word].keys():\n                    tC = (t,C)\n                    p_uni = self._uni.freq(tC)\n                    p_bi = self._bi[history[-1]].freq(tC)\n                    p_tri = self._tri[tuple(history[-2:])].freq(tC)\n                    p_wd = self._wd[word][t] \/ self._uni[tC]\n                    p = self._l1 *p_uni + self._l2 *p_bi + self._l3 *p_tri\n                    p2 = log(p, 2) + log(p_wd, 2)\n\n                    # compute the result of appending each tag to this history\n                    new_states.append((history + [tC],\n                                       curr_sent_logprob + p2))\n"}