{"BEFORE":"        word = (word.replace(\"\\xE4\", \"a\").replace(\"\\xE1\", \"a\")\n                    .replace(\"\\xEB\", \"e\").replace(\"\\xE9\", \"e\")\n                    .replace(\"\\xED\", \"i\").replace(\"\\xEF\", \"i\")\n                    .replace(\"\\xF6\", \"o\").replace(\"\\xF3\", \"o\")\n                    .replace(\"\\xFC\", \"u\").replace(\"\\xFA\", \"u\"))\n\n        # An initial 'y', a 'y' after a vowel,\n        # and an 'i' between self.__vowels is put into upper case.\n        # As from now these are treated as consonants.\n        if word.startswith(\"y\"):\n            word = \"\".join((\"Y\", word[1:]))\n\n        for i in range(1, len(word)):\n            if word[i-1] in self.__vowels and word[i] == \"y\":\n                word = \"\".join((word[:i], \"Y\", word[i+1:]))\n\n        for i in range(1, len(word)-1):\n            if (word[i-1] in self.__vowels and word[i] == \"i\" and\n               word[i+1] in self.__vowels):\n                word = \"\".join((word[:i], \"I\", word[i+1:]))\n\n        r1, r2 = self._r1r2_standard(word, self.__vowels)\n\n        # R1 is adjusted so that the region before it\n        # contains at least 3 letters.\n        for i in range(1, len(word)):\n            if word[i] not in self.__vowels and word[i-1] in self.__vowels:\n                if len(word[:i+1]) < 3 and len(word[:i+1]) > 0:\n                    r1 = word[3:]\n                elif len(word[:i+1]) == 0:\n                    return word\n                break\n\n        # STEP 1\n        for suffix in self.__step1_suffixes:\n            if r1.endswith(suffix):\n                if suffix == \"heden\":\n                    word = \"\".join((word[:-5], \"heid\"))\n                    r1 = \"\".join((r1[:-5], \"heid\"))\n                    if r2.endswith(\"heden\"):\n                        r2 = \"\".join((r2[:-5], \"heid\"))\n","AFTER":"        word = (word.replace(\"\\xE4\", \"a\").replace(\"\\xE1\", \"a\")\n                    .replace(\"\\xEB\", \"e\").replace(\"\\xE9\", \"e\")\n                    .replace(\"\\xED\", \"i\").replace(\"\\xEF\", \"i\")\n                    .replace(\"\\xF6\", \"o\").replace(\"\\xF3\", \"o\")\n                    .replace(\"\\xFC\", \"u\").replace(\"\\xFA\", \"u\"))\n\n        # An initial 'y', a 'y' after a vowel,\n        # and an 'i' between self.__vowels is put into upper case.\n        # As from now these are treated as consonants.\n        if word.startswith(\"y\"):\n            word = \"\".join((\"Y\", word[1:]))\n\n        for i in range(1, len(word)):\n            if word[i-1] in self.__vowels and word[i] == \"y\":\n                word = \"\".join((word[:i], \"Y\", word[i+1:]))\n\n        for i in range(1, len(word)-1):\n            if (word[i-1] in self.__vowels and word[i] == \"i\" and\n               word[i+1] in self.__vowels):\n                word = \"\".join((word[:i], \"I\", word[i+1:]))\n\n        r1, r2 = self._r1r2_standard(word, self.__vowels)\n\n        # R1 is adjusted so that the region before it\n        # contains at least 3 letters.\n        for i in range(1, len(word)):\n            if word[i] not in self.__vowels and word[i-1] in self.__vowels:\n                if len(word[:i+1]) < 3 and len(word[:i+1]) > 0:\n                    r1 = word[3:]\n                elif len(word[:i+1]) == 0:\n                    return word\n                break\n\n        # STEP 1\n        for suffix in self.__step1_suffixes:\n            if r1.endswith(suffix):\n                if suffix == \"heden\":\n                    word = suffix_replace(word, suffix, \"heid\")\n                    r1 = suffix_replace(r1, suffix, \"heid\")\n                    if r2.endswith(\"heden\"):\n                        r2 = suffix_replace(r2, suffix, \"heid\")\n"}