{"BEFORE":"            self.layers.append(\n                nn.Sequential(OrderedDict(conv3x3(in_channel, stage_ch, module_name, i)))\n            )\n","AFTER":"        self, in_ch, stage_ch, concat_ch, layer_per_block, module_name, SE=False, identity=False, depthwise=False\n    ):\n\n        super(_OSA_module, self).__init__()\n\n        self.identity = identity\n        self.depthwise = depthwise\n        self.isReduced = False\n        self.layers = nn.ModuleList()\n        in_channel = in_ch\n        if self.depthwise and in_channel != stage_ch:\n            self.isReduced = True\n            self.conv_reduction = nn.Sequential(\n                OrderedDict(conv1x1(in_channel, stage_ch, \n                  \"{}_reduction\".format(module_name), \"0\")))            \n        for i in range(layer_per_block):\n            if self.depthwise:\n                self.layers.append(\n                    nn.Sequential(OrderedDict(dw_conv3x3(stage_ch, stage_ch, module_name, i))))\n            else:\n                self.layers.append(\n                    nn.Sequential(OrderedDict(conv3x3(in_channel, stage_ch, module_name, i)))\n                )\n            in_channel = stage_ch\n"}