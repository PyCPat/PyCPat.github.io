{"BEFORE":"                layers.append(nn.Sequential(\n                    nn.Linear(input_size, int(current_size * current_size * current_channels)),\n                    nn.Sigmoid()\n                ))\n","AFTER":"                 padding=None, norm_output: bool = False):\n        super(CNNDecoder, self).__init__()\n        if channels is None:\n            channels = [1]\n        if kernel_sizes is None:\n            kernel_sizes = [5] * (len(channels) - 1)\n        if stride is None:\n            stride = [1] * (len(channels) - 1)\n        if padding is None:\n            padding = [2] * (len(channels) - 1)\n\n        layers = []\n        layer_sizes = channels + [latent_size]\n        current_size = input_size\n        current_channels = 1\n        for l_id in range(len(layer_sizes)):\n            if l_id == len(layer_sizes) - 1:\n                if norm_output:\n                    layers.append(nn.Sequential(\n                        nn.Linear(input_size, int(current_size * current_size * current_channels)),\n                        nn.Sigmoid()\n                    ))\n                else:\n                    layers.append(nn.Sequential(\n                        nn.Linear(input_size, int(current_size * current_size * current_channels)),\n                    ))\n            else:\n"}