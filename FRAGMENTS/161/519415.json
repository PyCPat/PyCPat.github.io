{"BEFORE":"    def __init__(self, args, in_channels=512, out_channels=3, depth=5, blocks=1, residual=True, batch_norm=True,\r\n                 transpose=True, concat=True,  norm=nn.BatchNorm2d, act=F.relu, dilations=[1,2,5]):\r\n        super(SharedDecoder, self).__init__()\r\n        self.up_convs = []\r\n        self.im_atts = []\r\n        self.wm_atts = []\r\n        self.mask_atts = []\r\n\r\n        outs = in_channels\r\n        for i in range(depth-1): # depth = 5 [0,1,2,3]\r\n            ins = outs\r\n            outs = ins \/\/ 2\r\n            # 512,256\r\n            # 256,128\r\n            # 128,64\r\n            # 64,32\r\n            up_conv = UpConv(ins, outs, blocks, residual=residual, concat=concat, norm=norm,act=F.relu, dilations=dilations)\r\n            self.up_convs.append(up_conv)\r\n            self.im_atts.append(ECABlock(outs))\r\n            self.wm_atts.append(ECABlock(outs))\r\n            self.mask_atts.append(ECABlock(outs))\r\n       \r\n        up_conv = UpConv(outs, out_channels, blocks, residual=residual,concat=concat, norm=norm,act=F.relu, dilations=dilations)\r\n        self.up_convs.append(up_conv)\r\n        self.im_atts.append(ECABlock(out_channels))\r\n        self.wm_atts.append(ECABlock(out_channels))\r\n        self.mask_atts.append(ECABlock(out_channels))\r\n\r\n        self.up_convs = nn.ModuleList(self.up_convs)\r\n        self.im_atts = nn.ModuleList(self.im_atts)\r\n","AFTER":"    def __init__(self, in_channels=512, depth=5, shared_depth=2, start_filters=32, blocks=1, residual=True,\r\n                 concat=True,  norm=nn.BatchNorm2d, act=F.relu, dilations=[1,2,5]):\r\n        super(SharedBottleNeck, self).__init__()\r\n        self.down_convs = []\r\n        self.up_convs = []\r\n        self.down_im_atts = []\r\n        self.down_mask_atts = []\r\n        self.up_im_atts = []\r\n        self.up_mask_atts = []\r\n\r\n        dilations = [1,2,5]\r\n        start_depth = depth - shared_depth\r\n        max_filters = 512\r\n        for i in range(start_depth, depth): # depth = 5 [0,1,2,3]\r\n            ins = in_channels if i == start_depth else outs\r\n            outs = min(ins * 2, max_filters)\r\n            # Encoder convs\r\n            pooling = True if i < depth-1 else False\r\n            down_conv = DownConv(ins, outs, blocks, pooling=pooling, residual=residual, norm=norm, act=act, dilations=dilations)\r\n            self.down_convs.append(down_conv)\r\n\r\n            # Decoder convs\r\n            if i < depth - 1:\r\n                up_conv = UpConv(min(outs*2, max_filters), outs, blocks, residual=residual, concat=concat, norm=norm,act=F.relu, dilations=dilations)\r\n                self.up_convs.append(up_conv)\r\n                self.up_im_atts.append(ECABlock(outs))\r\n                self.up_mask_atts.append(ECABlock(outs))\r\n       \r\n        self.down_convs = nn.ModuleList(self.down_convs)\r\n"}