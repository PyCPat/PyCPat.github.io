{"BEFORE":"                if not os.path.exists('wav2vec_large.pt'):\n                    # _ = wget.download('https:\/\/dl.fbaipublicfiles.com\/fairseq\/wav2vec\/wav2vec_large.pt')\n                    _ = urllib.request.urlretrieve(\"https:\/\/dl.fbaipublicfiles.com\/fairseq\/wav2vec\/wav2vec_large.pt\", \"wav2vec_large.pt\")\n                cp = torch.load('wav2vec_large.pt', map_location=self.device)\n","AFTER":"            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"fairseq\"])\n            filename = \"wav2vec_large.pt\"\n            if pretrained_path == None:\n                if not os.path.exists(filename):\n                    # _ = wget.download('https:\/\/dl.fbaipublicfiles.com\/fairseq\/wav2vec\/wav2vec_large.pt')\n                    print('Downloading the pretrained weights from fairseq(https:\/\/dl.fbaipublicfiles.com\/fairseq\/wav2vec\/wav2vec_large.pt) ...')\n                    # _ = urllib.request.urlretrieve(\"https:\/\/dl.fbaipublicfiles.com\/fairseq\/wav2vec\/wav2vec_large.pt\", \"wav2vec_large.pt\", MyProgressBar())\n                    with tqdm(unit='B', unit_scale=True, miniters=1, desc=filename) as t:\n                        urllib.request.urlretrieve(\"https:\/\/dl.fbaipublicfiles.com\/fairseq\/wav2vec\/wav2vec_large.pt\", filename, reporthook=_reporthook(t))\n                cp = torch.load(filename, map_location=self.device)\n"}