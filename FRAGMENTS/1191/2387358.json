{"BEFORE":"    def __init__(self, in_channels, out_channels, num_init_features=64, growth_rate=32, n_basic_block=23,\n                 scale_factor=4):\n        r\"\"\"\n\n        Args:\n            in_channels (int): Number of channels in the input image.\n            out_channels (int): Number of channels produced by the convolution.\n            num_init_features (int): The number of filters to learn in the first convolution layer. Default: 64.\n            growth_rate (int): How many filters to add each layer (`k` in paper). Default: 32.\n            n_basic_block (int): How many layers in each residual block. Default: 23.\n            scale_factor (int): Image magnification factor. Default: 4.\n        \"\"\"\n        super(Generator, self).__init__()\n\n        self.conv1 = nn.Sequential(nn.ReflectionPad2d(1), nn.Conv2d(in_channels, num_init_features, 3), nn.ReLU())\n\n        basic_block_layer = []\n\n        for _ in range(n_basic_block):\n            basic_block_layer += [ResidualInResidualDenseBlock(num_init_features, growth_rate)]\n\n        self.basic_block = nn.Sequential(*basic_block_layer)\n\n        self.conv2 = nn.Sequential(nn.ReflectionPad2d(1), nn.Conv2d(num_init_features, num_init_features, 3), nn.ReLU())\n        self.upsample = upsample_block(in_channels=num_init_features, scale_factor=scale_factor)\n        self.conv3 = nn.Sequential(nn.ReflectionPad2d(1), nn.Conv2d(num_init_features, num_init_features, 3), nn.ReLU())\n        self.conv4 = nn.Sequential(nn.ReflectionPad2d(1), nn.Conv2d(num_init_features, out_channels, 3), nn.ReLU())\n","AFTER":"    def __init__(self, upscale_factor):\n        r\"\"\" This is an esrgan model defined by the author himself.\n\n        Args:\n            upscale_factor (int): Image magnification factor. (Default: 4).\n        \"\"\"\n        super(Generator, self).__init__()\n        self.upsample_block_num = int(math.log(upscale_factor, 2))\n\n        # First layer\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=0, bias=False)\n\n        # 23 ResidualInResidualDenseBlock layer\n        rrdb_layers = []\n        for _ in range(23):\n            rrdb_layers += [ResidualInResidualDenseBlock(64, 32)]\n        self.residual_residual_dense_blocks = nn.Sequential(*rrdb_layers)\n\n        # Second conv layer post residual blocks\n        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)\n\n        # Upsampling layers\n        self.upsampling = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)\n\n        # Final output layer\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            nn.Conv2d(64, 3, kernel_size=3, stride=1, padding=1, bias=False)\n        )\n"}