{"BEFORE":"            self.encoders.append(nn.Conv2d(enc_dim_in, enc_dim_out, 4, stride = 2, padding = 1))\n            self.decoders.append(nn.ConvTranspose2d(dec_dim_in, dec_dim_out, 4, stride = 2, padding = 1))\n","AFTER":"        self.encoders = MList([])\n        self.decoders = MList([])\n\n        dims = (dim,) * (num_layers + 1)\n        reversed_dims = tuple(reversed(dims))\n        enc_dim_pairs = zip(dims[:-1], dims[1:])\n        dec_dim_pairs = zip(reversed_dims[:-1], reversed_dims[1:])\n\n        for _, (enc_dim_in, enc_dim_out), (dec_dim_in, dec_dim_out) in zip(range(num_layers), enc_dim_pairs, dec_dim_pairs):\n            self.encoders.append(nn.Sequential(nn.Conv2d(enc_dim_in, enc_dim_out, 4, stride = 2, padding = 1), nn.ReLU()))\n            self.decoders.append(nn.Sequential(nn.ConvTranspose2d(dec_dim_in, dec_dim_out, 4, stride = 2, padding = 1), nn.ReLU()))\n\n        for _ in range(num_resnet_blocks):\n            self.encoders.append(ResBlock(dims[-1]))\n            self.decoders.append(ResBlock(dims[-1]))\n\n        self.encoders.insert(0, nn.Conv2d(channels, dim, 3, padding = 1))\n"}