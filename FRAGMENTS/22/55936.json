{"BEFORE":"            sum_s = float(sum(sentiments))\n            #print sentiments, sum_s\n\n            # check for added emphasis resulting from exclamation points (up to 4 of them)\n            ep_count = text.count(\"!\")\n            if ep_count > 4:\n                ep_count = 4\n            ep_amplifier = ep_count*0.292\n            # (empirically derived mean sentiment intensity rating increase\n            # for exclamation points)\n            if sum_s > 0:\n                sum_s += ep_amplifier\n            elif sum_s < 0:\n                sum_s -= ep_amplifier\n\n            # check for added emphasis resulting from question marks (2 or 3+)\n            qm_count = text.count(\"?\")\n            qm_amplifier = 0\n            if qm_count > 1:\n                if qm_count <= 3:\n                    qm_amplifier = qm_count*0.18\n                else:\n                    qm_amplifier = 0.96\n                if sum_s > 0:\n                    sum_s += qm_amplifier\n                elif  sum_s < 0:\n                    sum_s -= qm_amplifier\n\n            compound = normalize(sum_s)\n\n            # want separate positive versus negative sentiment scores\n            pos_sum = 0.0\n            neg_sum = 0.0\n            neu_count = 0\n            for sentiment_score in sentiments:\n                if sentiment_score > 0:\n                    pos_sum += (float(sentiment_score) +1) # compensates for neutral words that are counted as 1\n                if sentiment_score < 0:\n                    neg_sum += (float(sentiment_score) -1) # when used with math.fabs(), compensates for neutrals\n                if sentiment_score == 0:\n                    neu_count += 1\n\n            if pos_sum > math.fabs(neg_sum):\n                pos_sum += (ep_amplifier+qm_amplifier)\n            elif pos_sum < math.fabs(neg_sum):\n                neg_sum -= (ep_amplifier+qm_amplifier)\n","AFTER":"            sum_s = float(sum(sentiments))\n            # compute and add emphasis from punctuation in text\n            punct_emph_amplifier = self._punctuation_emphasis(sum_s, text)\n            if sum_s > 0:\n                sum_s += punct_emph_amplifier\n            elif  sum_s < 0:\n                sum_s -= punct_emph_amplifier\n\n            compound = normalize(sum_s)\n            # discriminate between positive, negative and neutral sentiment scores\n            pos_sum, neg_sum, neu_count = self._sift_sentiment_scores(sentiments)\n\n            if pos_sum > math.fabs(neg_sum):\n                pos_sum += (punct_emph_amplifier)\n            elif pos_sum < math.fabs(neg_sum):\n                neg_sum -= (punct_emph_amplifier)\n"}