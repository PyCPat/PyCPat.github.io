{"BEFORE":"        nn.init.kaiming_normal_(self.Conv.weight.data)\n        nn.init.zeros_(self.Conv.bias.data)\n","AFTER":"                 first_block=False,    # Delete first convolution\n                 ):\n        super().__init__()\n        assert res_out == res_in or res_out == 2 * res_in\n        self.res_in = res_in\n        self.res_out = res_out\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.latent_size = latent_size\n        self.first_block = first_block\n\n        # Upsampling\n        self.up_sample = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)\n\n        # Creating layers\n        if not first_block:\n            self.Conv1 = nn.Conv2d(in_channels, in_channels, 3, 1, 1)\n            \n        self.AdaIN1 = AdaIN(self.latent_size, in_channels)\n        self.Conv2 = nn.Conv2d(in_channels, out_channels, 3, 1, 1)\n        self.Act = nn.LeakyReLU(0.2)\n        self.AdaIN2 = AdaIN(self.latent_size, out_channels)\n\n        # Initializing weights\n        if not first_block:\n            nn.init.xavier_normal_(self.Conv1.weight.data)\n            nn.init.zeros_(self.Conv1.bias.data) \n            \n        nn.init.xavier_normal_(self.Conv2.weight.data)\n        nn.init.zeros_(self.Conv2.bias.data)\n"}