{"BEFORE":"        encoding = self._encoding\n        \n        # Long Duong : Add for checking but it is unlikely \n        if not path.isfile(self.executable(self._path)):\n            raise ExecutableNotFound(\"Senna executable expected at %s but not found\" % self.executable(self._path))\n        \n         \n        # Build the senna command to run the tagger\n        _senna_cmd = [self.executable(self._path), '-path', self._path, '-usrtokens', '-iobtags']\n        _senna_cmd.extend(['-'+op for op in self.operations])\n\n        # Serialize the actual sentences to a temporary string\n        _input = '\\n'.join((' '.join(x) for x in sentences))+'\\n'\n        if isinstance(_input, compat.text_type) and encoding:\n            _input = _input.encode(encoding)\n\n        # Run the tagger and get the output\n        p = Popen(_senna_cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n","AFTER":"        tagged_sents = super(SennaTagger, self).tag_sents(sentences)\n        for i in range(len(tagged_sents)):\n            for j in range(len(tagged_sents[i])):\n                annotations = tagged_sents[i][j]\n                tagged_sents[i][j] = (annotations['word'], annotations['pos'])\n        return tagged_sents\n"}