{"BEFORE":"        self.n_nodes = n_nodes\n        self.c_node = c_node\n        self._n_node_inputs = 2 # Each node finally has two inputs.\n\n        if cell_type == 'down':\n            self.preprocess0 = ConvOps(c0, c_node, kernel_size=1, stride=2, ops_order='act_weight_norm')\n        else:\n            self.preprocess0 = ConvOps(c0, c_node, kernel_size=1, ops_order='act_weight_norm')\n        self.preprocess1 = ConvOps(c1, c_node, kernel_size=1, ops_order='act_weight_norm')\n\n        self._ops = nn.ModuleList()\n\n        idx_up_or_down_start = 0 if cell_type == 'down' else 1\n        for i in range(self.n_nodes):\n            for j in range(self._n_node_inputs + i): # the input id for remaining meta-node\n                stride = 2 if j < 2 and j >= idx_up_or_down_start else 1\n                op = MixedOp(c_node, stride, use_transpose=True) if cell_type=='up' else MixedOp(c_node, stride)\n                self._ops.append(op)\n    @property\n","AFTER":"        self.preprocess0 = ConvOps(c0, c_node, kernel_size=1, \n                                   stride = 2 if cell_type == 'down' else 1, \n                                   ops_order='act_weight_norm')\n        self.preprocess1 = ConvOps(c1, c_node, kernel_size=1, ops_order='act_weight_norm')\n\n        self._ops = nn.ModuleList()\n        \n        for n_edges in range(2, 2+n_nodes):\n            for i in range(n_edges):\n                if cell_type == 'down':\n                    self._ops.append(MixedOp(c_node, stride = 2 if i <= 1 else 1))\n                else:\n                    self._ops.append(MixedOp(c_node, stride = 2 if i == 1 else 1, transposed = True))\n        return\n"}