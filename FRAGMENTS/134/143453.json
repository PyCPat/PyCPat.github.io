{"BEFORE":"        graphs = []\n        trees = []\n        max_parse = None\n        max_score = 0\n        for parse in chart[len(self._tokens)][0]._entries:\n            conll_format = \"\"\n            malt_format = \"\"\n            for i in range(len(tokens)):\n                malt_format += '%s\\t%s\\t%d\\t%s\\n' % (tokens[i], 'null', parse._arcs[i] + 1, 'null')\n                conll_format += '\\t%d\\t%s\\t%s\\t%s\\t%s\\t%s\\t%d\\t%s\\t%s\\t%s\\n' % (i+1, tokens[i], tokens[i], parse._tags[i], parse._tags[i], 'null', parse._arcs[i] + 1, 'null', '-', '-')\n            dg = DependencyGraph(conll_format)\n            score = self.compute_prob(dg)\n            if score > max_score:\n                max_parse = dg.tree()\n                max_score = score\n        return [max_parse, max_score]\n","AFTER":"        trees = []\n        max_parse = None\n        max_score = 0\n        for parse in chart[len(self._tokens)][0]._entries:\n            conll_format = \"\"\n            malt_format = \"\"\n            for i in range(len(tokens)):\n                malt_format += '%s\\t%s\\t%d\\t%s\\n' % (tokens[i], 'null', parse._arcs[i] + 1, 'null')\n                conll_format += '\\t%d\\t%s\\t%s\\t%s\\t%s\\t%s\\t%d\\t%s\\t%s\\t%s\\n' % (i+1, tokens[i], tokens[i], parse._tags[i], parse._tags[i], 'null', parse._arcs[i] + 1, 'null', '-', '-')\n            dg = DependencyGraph(conll_format)\n            score = self.compute_prob(dg)\n            trees.append((score, dg.tree()))\n        trees.sort()\n        return (tree for (score, tree) in trees)\n"}