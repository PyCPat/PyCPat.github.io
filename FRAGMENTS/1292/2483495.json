{"BEFORE":"        if blur_filter_size == 3:\n            pad_size = [1] * 4\n            blur_matrix = torch.Tensor([[1., 2., 1]]) \/ 4  # binomial filter b2\n        else:\n            pad_size = [2] * 4\n            blur_matrix = torch.Tensor([[1., 4., 6., 4., 1.]]) \/ 16  # binomial filter b4\n\n        self.padding = nn.ReflectionPad2d(pad_size)\n        blur_filter = blur_matrix * blur_matrix.T\n","AFTER":"        pad_size = [get_padding(blur_filter_size, stride, dilation=1)] * 4\n        self.padding = nn.ReflectionPad2d(pad_size)\n\n        blur_matrix = (np.poly1d((0.5, 0.5)) ** (blur_filter_size - 1)).coeffs\n        blur_filter = torch.Tensor(blur_matrix[:, None] * blur_matrix[None, :])\n"}