{"BEFORE":"    def __init__(self, input_features: int, corresponding_unet_filters: int, alpha: float = 1.67) -> None:\n        \"\"\"\n            MultiResblock\n            Arguments:\n              x - input layer\n              corresponding_unet_filters - Unet filters for the same stage\n              alpha - 1.67 - factor used in the paper to dervie number of filters for multiresunet filters from Unet filters\n            Returns - None\n        \"\"\"\n        super().__init__()\n        self.corresponding_unet_filters = corresponding_unet_filters\n        self.alpha = alpha\n        self.W = corresponding_unet_filters * alpha\n        self.conv2d_bn_1x1 = Conv2d_batchnorm(input_features=input_features,\n                                              num_of_filters=int(self.W * 0.167) + int(self.W * 0.333) + int(\n                                                  self.W * 0.5),\n                                              kernel_size=(1, 1), activation='None', padding=0)\n\n        self.conv2d_bn_3x3 = Conv2d_batchnorm(input_features=input_features, num_of_filters=int(self.W * 0.167),\n                                              kernel_size=(3, 3), activation='relu', padding=1)\n        self.conv2d_bn_5x5 = Conv2d_batchnorm(input_features=int(self.W * 0.167), num_of_filters=int(self.W * 0.333),\n                                              kernel_size=(3, 3), activation='relu', padding=1)\n        self.conv2d_bn_7x7 = Conv2d_batchnorm(input_features=int(self.W * 0.333), num_of_filters=int(self.W * 0.5),\n                                              kernel_size=(3, 3), activation='relu', padding=1)\n        self.batch_norm1 = nn.BatchNorm1d(int(self.W * 0.5) + int(self.W * 0.167) + int(self.W * 0.333), affine=False)\n","AFTER":"    def __init__(self, U, in_channel, alpha=2.5):\n        super(MultiResBlock, self).__init__()\n        self.W = alpha * U\n        self.shortcut = conv2d_bn(in_channel, filters=int(self.W * 0.167) + int(self.W * 0.333) + int(self.W * 0.5),\n                                  num_col=1, num_row=1, activation=None, padding='same')\n        self.conv3x3 = conv2d_bn(in_channel, filters=int(self.W * 0.167), num_col=3, num_row=3,\n                                 activation='relu', padding='same')\n        self.conv5x5 = conv2d_bn(int(self.W * 0.167), filters=int(self.W * 0.333), num_col=3, num_row=3,\n                                 activation='relu', padding='same')\n        self.conv7x7 = conv2d_bn(int(self.W * 0.333), filters=int(self.W * 0.5), num_col=3, num_row=3,\n                                 activation='relu', padding='same')\n        self.batchnorm = nn.BatchNorm1d(num_features=int(self.W * 0.167) + int(self.W * 0.333) + int(self.W * 0.5))\n"}