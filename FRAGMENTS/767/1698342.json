{"BEFORE":"        self.obj_preds = nn.ModuleList()\n        self.stems = nn.ModuleList()\n\n        # Efficient decoupled head layers\n        for i in range(num_layers):\n            idx = i*6\n            self.stems.append(head_layers[idx])\n            self.cls_convs.append(head_layers[idx+1])\n            self.reg_convs.append(head_layers[idx+2])\n            self.cls_preds.append(head_layers[idx+3])\n            self.reg_preds.append(head_layers[idx+4])\n            self.obj_preds.append(head_layers[idx+5])\n","AFTER":"    def __init__(self, num_classes=80, anchors=1, num_layers=3, inplace=True, head_layers=None, use_dfl=True, reg_max=16):  # detection layer\n        super().__init__()\n        assert head_layers is not None\n        self.nc = num_classes  # number of classes\n        self.no = num_classes + 5  # number of outputs per anchor\n        self.nl = num_layers  # number of detection layers\n        if isinstance(anchors, (list, tuple)):\n            self.na = len(anchors[0]) \/\/ 2\n        else:\n            self.na = anchors\n        self.anchors = anchors\n        self.grid = [torch.zeros(1)] * num_layers\n        self.prior_prob = 1e-2\n        self.inplace = inplace\n        stride = [8, 16, 32]  # strides computed during build\n        self.stride = torch.tensor(stride)\n        self.use_dfl = use_dfl\n        self.reg_max = reg_max\n        self.proj_conv = nn.Conv2d(self.reg_max + 1, 1, 1, bias=False)\n        self.grid_cell_offset = 0.5\n        self.grid_cell_size = 5.0\n\n        # Init decouple head\n        self.stems = nn.ModuleList()\n"}