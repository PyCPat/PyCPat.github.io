{"BEFORE":"        hidden_dim = round(inp * expand_ratio)\r\n        self.n = n\r\n\r\n\r\n        self.conv1 = nn.Sequential(\r\n            # pw\r\n            nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False),\r\n            nn.BatchNorm2d(hidden_dim),\r\n            nn.ReLU(inplace=True),\r\n            # dw\r\n            nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=True),\r\n            nn.BatchNorm2d(hidden_dim),\r\n            nn.ReLU(inplace=True),\r\n            # pw-linear\r\n            nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),\r\n            nn.BatchNorm2d(oup),\r\n        )\r\n\r\n        self.conv2 = nn.Sequential(\r\n            # pw\r\n            nn.Conv2d(oup, hidden_dim, 1, 1, 0, bias=False),\r\n            nn.BatchNorm2d(hidden_dim),\r\n            nn.ReLU(inplace=False),\r\n            # dw\r\n            nn.Conv2d(hidden_dim, hidden_dim, 3, 1, 1, groups=hidden_dim, bias=False),\r\n            nn.BatchNorm2d(hidden_dim),\r\n            nn.ReLU(inplace=False),\r\n            # pw-linear\r\n            nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),\r\n            nn.BatchNorm2d(oup),\r\n        )\r\n","AFTER":"        hidden_dim = round(inp * expand_ratio)\r\n        self.n = n\r\n\r\n\r\n        self.conv1 = nn.Sequential(\r\n            # pw\r\n            nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False),\r\n            nn.BatchNorm2d(hidden_dim),\r\n            nn.ReLU(inplace=True),\r\n            # dw\r\n            nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=True),\r\n            nn.BatchNorm2d(hidden_dim),\r\n            nn.ReLU(inplace=True),\r\n            # pw-linear\r\n            nn.Conv2d(hidden_dim, oup, 1, 1, 0, bias=False),\r\n            nn.BatchNorm2d(oup),\r\n        )\r\n\r\n        self.conv2 = torch.nn.ModuleList()\r\n        for i in range(n):\r\n            self.conv2.append(IRBlock(oup, hidden_dim))\r\n\r\n    def forward(self, x):\r\n"}