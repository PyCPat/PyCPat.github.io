{"BEFORE":"        path = datasetsDir(self) + 'numerical' + SEP + 'person'\n        disc = discretise.Discretiser(path, path + '.test', '1,4,5,6,7', '3,2,3,4,2')\n        self.assertTrue(disc.attributes[0].is_continuous())\n        self.assertTrue(disc.attributes[1].is_continuous())\n        self.assertTrue(disc.attributes[4].is_continuous())\n        self.assertTrue(disc.attributes[5].is_continuous())\n        self.assertTrue(disc.attributes[6].is_continuous())\n        self.assertTrue(disc.attributes[7].is_continuous())\n        self.assertEqual(25, disc.training[0].value(disc.attributes[1]))\n        self.assertEqual(26, disc.instances[0][0].value(disc.attributes[1]))\n        disc.unsupervised_equal_width()\n        self.assertTrue(disc.attributes[0].is_continuous())\n        self.assertFalse(disc.attributes[1].is_continuous())\n        self.assertFalse(disc.attributes[4].is_continuous())\n        self.assertFalse(disc.attributes[5].is_continuous())\n        self.assertFalse(disc.attributes[6].is_continuous())\n        self.assertFalse(disc.attributes[7].is_continuous())\n        self.assertEqual('a', disc.training[0].value(disc.attributes[1]))\n        self.assertEqual('a', disc.instances[0][0].value(disc.attributes[1]))\n","AFTER":"        path = datasetsDir(self) + 'numerical' + SEP + 'person'\n        training, attributes, klass, test, gold = self.get_instances(path, True, False)\n        disc = discretise.Discretiser(training, attributes, klass, test, gold, [1,4,5,6,7], [3,2,3,4,2])\n        self.assertTrue(disc.attributes[0].is_continuous())\n        self.assertTrue(disc.attributes[1].is_continuous())\n        self.assertTrue(disc.attributes[4].is_continuous())\n        self.assertTrue(disc.attributes[5].is_continuous())\n        self.assertTrue(disc.attributes[6].is_continuous())\n        self.assertTrue(disc.attributes[7].is_continuous())\n        self.assertEqual(25, disc.training[0].value(disc.attributes[1]))\n        self.assertEqual(26, disc.test[0].value(disc.attributes[1]))\n        disc.unsupervised_equal_width()\n        self.assertTrue(disc.attributes[0].is_continuous())\n        self.assertFalse(disc.attributes[1].is_continuous())\n        self.assertFalse(disc.attributes[4].is_continuous())\n        self.assertFalse(disc.attributes[5].is_continuous())\n        self.assertFalse(disc.attributes[6].is_continuous())\n        self.assertFalse(disc.attributes[7].is_continuous())\n        self.assertEqual('a', disc.training[0].value(disc.attributes[1]))\n        self.assertEqual('a', disc.test[0].value(disc.attributes[1]))\n"}