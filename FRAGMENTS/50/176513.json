{"BEFORE":"        self.key_size = key_size\n        self.scale = scale\n        self.offset = offset\n        self.conditional = conditional\n        self.hidden_units = hidden_units\n        if self.conditional:\n            input_shape = input_shape[0]\n\n        if self.offset is True:\n            self.beta = nn.Parameter(torch.zeros(self.key_size,))\n\n        if self.scale is True:\n            self.gamma = self.beta = nn.Parameter(torch.ones(self.key_size,))\n\n        if self.conditional:\n            if self.hidden_units is not None:\n                self.hidden_dense = nn.Linear(\n                    self.key_size,\n                    self.key_size,\n                    bias=False)\n","AFTER":"        self.key_size = key_size\n        self.scale = scale\n        self.offset = offset\n        self.conditional = conditional\n        self.hidden_units = hidden_units\n\n        if self.offset is True:\n            self.beta = nn.Parameter(torch.zeros(self.key_size,))\n\n        if self.scale is True:\n            self.gamma = self.beta = nn.Parameter(torch.ones(self.key_size,))\n\n        if self.conditional:\n            if self.hidden_units is not None:\n                self.hidden_dense = nn.Sequential(\n                    nn.Linear(self.hidden_units, self.hidden_units, bias=False),\n                    hidden_activation)\n\n            if self.offset is not False and self.offset is not None:\n                self.beta_dense = nn.Linear(self.key_size, self.key_size, bias=False)\n                self.beta_dense.weight = nn.Parameter(torch.zeros(self.key_size, self.size))\n\n            if self.scale is not False and self.scale is not None:\n                self.gamma_dense = nn.Linear(self.key_size, self.key_size, bias=False)\n                self.gamma_dense.weight = nn.Parameter(torch.zeros(self.key_size, self.size))\n"}