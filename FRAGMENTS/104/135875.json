{"BEFORE":"        candidate_ngrams = list(ngrams(candidate, n))\n        c_words = set(candidate_ngrams)\n\n        if not c_words:\n            return 0\n\n        for word in c_words:\n            count_w = candidate_ngrams.count(word) + 1\n\n            count_max = 0\n            for reference in references:\n                reference_ngrams = list(ngrams(reference, n))\n\n                count = reference_ngrams.count(word) + 1\n                count_max = max(count, count_max)\n\n        # TODO: count_w == candidate_ngrams.count(c_words[-1]) + 1\n        # (even though c_words is a set, so there is no last element, it's the last element returned by the iterator.)\n        # Is it the desired behavior?\n        return min(count_w, count_max) \/ (len(candidate) + len(c_words))\n","AFTER":"        counts = Counter(ngrams(candidate, n))\n\n        if not counts:\n            return 0\n\n        max_counts = {}\n        for reference in references:\n            reference_counts = Counter(ngrams(reference, n))\n            for ngram in counts:\n                max_counts[ngram] = max(max_counts.get(ngram, 0), reference_counts[ngram])\n\n        clipped_counts = {ngram: min(count, max_counts[ngram]) for ngram, count in counts.items()}\n"}