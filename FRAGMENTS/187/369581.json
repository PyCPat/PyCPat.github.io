{"BEFORE":"        esctok = re.escape(tok)\n        # Ignore all tokens except deprecated names.\n        if not (tok in deprecated_classes or\n                (tok in deprecated_funcs and\n                 re.search(r'\\b%s\\s*\\(' % esctok, line)) or\n                (tok in deprecated_methods and\n                 re.search(r'(?!<\\bself)[.]\\s*%s\\s*\\(' % esctok, line))):\n            continue\n        # Hack: only complain about read if it's used after a corpus.\n        if tok == 'read' and not CORPUS_READ_METHOD_RE.search(line):\n            continue\n        # Ignore deprecated definitions:\n        if DEPRECATED_DEF_RE.search(''.join(context)):\n            continue\n        # Print a header for the first use in a file:\n        if path not in dep_files:\n            print('\\n' + term.BOLD + path + term.NORMAL)\n            print('  %slinenum%s' % (term.YELLOW, term.NORMAL))\n            dep_files.add(path)\n        # Mark the offending token.\n        dep_names.add(tok)\n        if term.RED:\n            sub = term.RED + tok + term.NORMAL\n        elif term.BOLD:\n            sub = term.BOLD + tok + term.NORMAL\n        else:\n            sub = '<<' + tok + '>>'\n        line = re.sub(r'\\b%s\\b' % esctok, sub, line)\n        # Print the offending line.\n        print('  %s[%5d]%s %s' % (term.YELLOW, start[0] + lineno_offset,\n                                  term.NORMAL, line.rstrip()))\n","AFTER":"        esctok = re.escape(tok)\n        # Ignore all tokens except deprecated names.\n        if not (tok in deprecated_classes or\n                (tok in deprecated_funcs and\n                 re.search(r'\\b{}\\s*\\('.format(esctok), line)) or\n                (tok in deprecated_methods and\n                 re.search(r'(?!<\\bself)[.]\\s*{}\\s*\\('.format(esctok), line))):\n            continue\n        # Hack: only complain about read if it's used after a corpus.\n        if tok == 'read' and not CORPUS_READ_METHOD_RE.search(line):\n            continue\n        # Ignore deprecated definitions:\n        if DEPRECATED_DEF_RE.search(''.join(context)):\n            continue\n        # Print a header for the first use in a file:\n        if path not in dep_files:\n            print('\\n' + term.BOLD + path + term.NORMAL)\n            print('  {}linenum{}'.format(term.YELLOW, term.NORMAL))\n            dep_files.add(path)\n        # Mark the offending token.\n        dep_names.add(tok)\n        if term.RED:\n            sub = term.RED + tok + term.NORMAL\n        elif term.BOLD:\n            sub = term.BOLD + tok + term.NORMAL\n        else:\n            sub = '<<' + tok + '>>'\n        line = re.sub(r'\\b{}\\b'.format(esctok), sub, line)\n        # Print the offending line.\n        print('  {}[{:5d}]{} {}'.format(term.YELLOW, start[0] + lineno_offset,\n                                  term.NORMAL, line.rstrip()))\n"}