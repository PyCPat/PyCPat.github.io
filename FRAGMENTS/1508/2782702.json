{"BEFORE":"        if input_normalization is None or input_normalization is False:\n            self.input_normalization = None\n        else:\n            self.input_normalization = input_normalization\n\n        self.adf = False\n        self.keep_variance_fn = None\n        if self.config.get(\"data_uncertainty_estimation\") is not None:\n            data_uncertainty_config = self.config[\"data_uncertainty_estimation\"]\n            self.data_uncertainty_method = DataUncertaintyMethodEnum(data_uncertainty_config[\"method\"])\n            if self.data_uncertainty_method == DataUncertaintyMethodEnum.ADF:\n                self.adf = True\n                min_variance = data_uncertainty_config.get(\"min_variance\", 0.001)\n                self.keep_variance_fn = lambda x: adf.keep_variance(x, min_variance=min_variance)\n            else:\n                raise NotImplementedError\n\n        self.model_uncertainty_method = None\n        self.dropout_p = 0.0\n        self.num_solutions = 1\n        if self.config.get(\"model_uncertainty_estimation\") is not None:\n            model_uncertainty_config = self.config[\"model_uncertainty_estimation\"]\n            self.model_uncertainty_method = ModelUncertaintyMethodEnum(model_uncertainty_config[\"method\"])\n            if self.model_uncertainty_method == ModelUncertaintyMethodEnum.MONTE_CARLO_DROPOUT:\n                self.dropout_p = model_uncertainty_config[\"probability\"]\n                self.num_solutions = model_uncertainty_config[\"num_solutions\"]\n                self.use_mean_as_rec = model_uncertainty_config.get(\"use_mean_as_rec\", False)\n            elif self.model_uncertainty_method == ModelUncertaintyMethodEnum.MONTE_CARLO_VAE:\n                self.num_solutions = model_uncertainty_config[\"num_solutions\"]\n","AFTER":"        self.config = kwargs\n        self.seed = seed\n\n        self.input_dim: List = self.config[\"input_dim\"]\n\n        self.in_channels = [ChannelEnum(in_channel) for in_channel in in_channels]\n        self.out_channels = [ChannelEnum(out_channel) for out_channel in out_channels]\n\n        self.input_normalization = None if input_normalization is False else input_normalization\n\n        self.dropout_p = self.config.get(\"training_dropout_probability\", 0.0)\n        self.training_dropout = True if self.dropout_p > 0.0 else False\n\n        self.adf = False\n        self.keep_variance_fn = None\n        if self.config.get(\"data_uncertainty_estimation\") is not None:\n            data_uncertainty_config = self.config[\"data_uncertainty_estimation\"]\n            self.data_uncertainty_method = DataUncertaintyMethodEnum(data_uncertainty_config[\"method\"])\n            if self.data_uncertainty_method == DataUncertaintyMethodEnum.ADF:\n                self.adf = True\n                min_variance = data_uncertainty_config.get(\"min_variance\", 0.001)\n                self.keep_variance_fn = lambda x: adf.keep_variance(x, min_variance=min_variance)\n            else:\n                raise NotImplementedError\n\n        self.model_uncertainty_method = None\n        self.num_solutions: int = 1\n        if self.config.get(\"model_uncertainty_estimation\") is not None:\n            model_uncertainty_config = self.config[\"model_uncertainty_estimation\"]\n            self.model_uncertainty_method = ModelUncertaintyMethodEnum(model_uncertainty_config[\"method\"])\n            if self.model_uncertainty_method == ModelUncertaintyMethodEnum.MONTE_CARLO_DROPOUT:\n                print(\"training dropout activated\", self.training_dropout)\n                if self.training_dropout:\n                    assert self.dropout_p == model_uncertainty_config[\"probability\"]\n                else:\n                    self.dropout_p = model_uncertainty_config[\"probability\"]\n\n                self.num_solutions = int(model_uncertainty_config[\"num_solutions\"])\n                self.use_mean_as_rec = model_uncertainty_config.get(\"use_mean_as_rec\", False)\n            elif self.model_uncertainty_method == ModelUncertaintyMethodEnum.MONTE_CARLO_VAE:\n                self.num_solutions = int(model_uncertainty_config[\"num_solutions\"]),\n                self.use_mean_as_rec = model_uncertainty_config.get(\"use_mean_as_rec\", False)\n"}