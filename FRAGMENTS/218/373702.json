{"BEFORE":"        path = datasetsDir(self) + 'numerical' + SEP + 'weather'\n        disc = discretise.Discretiser(path, path + '.test,'+ path + '.gold', '1', '3')\n        self.assertTrue(disc.attributes[1].is_continuous())\n        self.assertEqual(27.5, disc.training[0].value(disc.attributes[1]))\n        self.assertEqual(32, disc.training[2].value(disc.attributes[1]))\n        self.assertEqual(25.4, disc.instances[0][0].value(disc.attributes[1]))\n        values = disc.training.values_grouped_by_attribute([disc.attributes[1]])\n        values[0].sort()\n        self.assertEqual([6.0, 9.0, 9.0, 10.699999999999999, 12.0, 12.0, 12.0, 14.1, 18.0, 27.5, 32.0, 33.100000000000001], values[0])\n        \n        disc.unsupervised_equal_frequency()\n        \n        self.assertFalse(disc.attributes[1].is_continuous())\n        self.assertEqual(4, len(disc.attributes[1].values))\n        self.assertEqual('c', disc.training[0].value(disc.attributes[1]))\n        self.assertEqual('d', disc.training[2].value(disc.attributes[1]))\n        self.assertEqual('c', disc.instances[0][0].value(disc.attributes[1]))\n","AFTER":"        path = datasetsDir(self) + 'numerical' + SEP + 'weather'\n        training, attributes, klass, test, gold = self.get_instances(path)\n        disc = discretise.Discretiser(training, attributes, klass, test, gold, [1], [3])\n        self.assertTrue(disc.attributes[1].is_continuous())\n        self.assertEqual(27.5, disc.training[0].value(disc.attributes[1]))\n        self.assertEqual(32, disc.training[2].value(disc.attributes[1]))\n        self.assertEqual(25.4, disc.test[0].value(disc.attributes[1]))\n        values = disc.training.values_grouped_by_attribute([disc.attributes[1]])\n        values[0].sort()\n        self.assertEqual([6.0, 9.0, 9.0, 10.699999999999999, 12.0, 12.0, 12.0, 14.1, 18.0, 27.5, 32.0, 33.100000000000001], values[0])\n        \n        disc.unsupervised_equal_frequency()\n        \n        self.assertFalse(disc.attributes[1].is_continuous())\n        self.assertEqual(4, len(disc.attributes[1].values))\n        self.assertEqual('c', disc.training[0].value(disc.attributes[1]))\n        self.assertEqual('d', disc.training[2].value(disc.attributes[1]))\n        self.assertEqual('c', disc.test[0].value(disc.attributes[1]))\n"}