{"BEFORE":"        if not isinstance(embedding_sizes, dict):\n            assert (\n                x_categoricals is None and len(categorical_groups) == 0\n            ), \"If embedding_sizes is not a dictionary, categorical_groups and x_categoricals must be empty.\"\n            # number embeddings based on order\n            embedding_sizes = {str(name): size for name, size in enumerate(embedding_sizes)}\n            x_categoricals = list(embedding_sizes.keys())\n            self.concat_output = True\n        else:\n            self.concat_output = False\n        assert x_categoricals is not None, \"x_categoricals must be provided.\"\n","AFTER":"        if isinstance(embedding_sizes, dict):\n            self.concat_output = False  # return dictionary of embeddings\n            # conduct input data checks\n            assert x_categoricals is not None, \"x_categoricals must be provided.\"\n            categorical_group_variables = [name for names in categorical_groups.values() for name in names]\n            if len(categorical_groups) > 0:\n                assert all(\n                    name in embedding_sizes for name in categorical_groups\n                ), \"categorical_groups must be in embedding_sizes.\"\n                assert not any(\n                    name in embedding_sizes for name in categorical_group_variables\n                ), \"group variables in categorical_groups must not be in embedding_sizes.\"\n                assert all(\n                    name in x_categoricals for name in categorical_group_variables\n                ), \"group variables in categorical_groups must be in x_categoricals.\"\n            assert all(\n                name in embedding_sizes for name in embedding_sizes if name not in categorical_group_variables\n            ), (\n                \"all variables in embedding_sizes must be in x_categoricals - but only if\"\n                \"not already in categorical_groups.\"\n            )\n"}