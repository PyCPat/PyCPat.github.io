{"BEFORE":"        kernel_sizes: Sequence[int],\n        context_mapping_features: Optional[int] = None,\n    ):\n        super().__init__()\n        mid_channels = channels * 16\n        self.use_mapping = exists(context_mapping_features)\n\n        if self.use_mapping:\n            assert exists(context_mapping_features)\n            self.to_scale_shift = MappingToScaleShift(\n                features=context_mapping_features, channels=mid_channels\n            )\n\n        self.convs_in = nn.ModuleList(\n            ConvBlock1d(\n                in_channels=channels,\n                out_channels=mid_channels,\n                kernel_size=kernel_size,\n                padding=(kernel_size - 1) \/\/ 2,\n                num_groups=1,\n            )\n            for kernel_size in kernel_sizes\n        )\n\n        self.conv_mid = ConvBlock1d(\n            in_channels=mid_channels,\n            out_channels=mid_channels,\n            kernel_size=3,\n            padding=1,\n            num_groups=8,\n        )\n","AFTER":"            ResnetBlock1d(\n                in_channels=in_channels if i == 0 else mid_channels,\n                out_channels=mid_channels,\n                kernel_size=3,\n                padding=3 ** (i + 1),\n                dilation=3 ** (i + 1),\n                num_groups=1,\n                context_mapping_features=context_mapping_features,\n            )\n            for i in range(3)\n        )\n\n        self.to_out = nn.Conv1d(\n"}