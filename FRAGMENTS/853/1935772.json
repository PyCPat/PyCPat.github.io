{"BEFORE":"        self.inplanes = 64\n        self.dilation = 1\n        if replace_stride_with_dilation is None:\n            # each element in the tuple indicates if we should replace\n            # the 2x2 stride with a dilated convolution instead\n            replace_stride_with_dilation = [False, False, False]\n        if len(replace_stride_with_dilation) != 3:\n            raise ValueError(\"replace_stride_with_dilation should be None \"\n                             \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))\n        self.groups = groups\n        self.base_width = width_per_group\n        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3,  # stride=2 -> stride=1 for cifar\n                               bias=False)\n        self.bn1 = norm_layer(self.inplanes)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  # Removed in _forward_impl for cifar\n","AFTER":"                 norm_layer=None,args=None):\n        super(ResNet, self).__init__()\n        if norm_layer is None:\n            norm_layer = nn.BatchNorm2d\n        self._norm_layer = norm_layer\n\n        self.inplanes = 64\n        self.dilation = 1\n        if replace_stride_with_dilation is None:\n            # each element in the tuple indicates if we should replace\n            # the 2x2 stride with a dilated convolution instead\n            replace_stride_with_dilation = [False, False, False]\n        if len(replace_stride_with_dilation) != 3:\n            raise ValueError(\"replace_stride_with_dilation should be None \"\n                             \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))\n        self.groups = groups\n        self.base_width = width_per_group\n        \n        assert args is not None, \"you should pass args to resnet\"\n        if 'cifar' in args[\"dataset\"]:\n            self.conv1 = nn.Sequential(nn.Conv2d(3, self.inplanes, kernel_size=3, stride=1, padding=1, bias=False),\n                                       nn.BatchNorm2d(self.inplanes), nn.ReLU(inplace=True))\n        elif 'imagenet' in args[\"dataset\"]:\n            if args[\"init_cls\"] == args[\"increment\"]:\n                self.conv1 = nn.Sequential(\n                    nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False),\n                    nn.BatchNorm2d(self.inplanes),\n                    nn.ReLU(inplace=True),\n                    nn.MaxPool2d(kernel_size=3, stride=2, padding=1),\n                )\n            else:\n                self.conv1 = nn.Sequential(\n                    nn.Conv2d(3, self.inplanes, kernel_size=3, stride=1, padding=1, bias=False),\n                    nn.BatchNorm2d(self.inplanes),\n                    nn.ReLU(inplace=True),\n                    nn.MaxPool2d(kernel_size=3, stride=2, padding=1),\n                )\n\n\n        self.layer1 = self._make_layer(block, 64, layers[0])\n"}