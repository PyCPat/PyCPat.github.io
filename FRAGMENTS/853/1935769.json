{"BEFORE":"        self.inplanes = 128\n        super(ResNet, self).__init__()\n        self.conv1 = conv3x3(3, 64, stride=2)\n        self.bn1 = BatchNorm2d(64)\n        self.relu1 = nn.ReLU(inplace=False)\n        self.conv2 = conv3x3(64, 64)\n        self.bn2 = BatchNorm2d(64)\n        self.relu2 = nn.ReLU(inplace=False)\n        self.conv3 = conv3x3(64, 128)\n        self.bn3 = BatchNorm2d(128)\n        self.relu3 = nn.ReLU(inplace=False)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\n        self.relu = nn.ReLU(inplace=False)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1, ceil_mode=True)  # change\n","AFTER":"    def __init__(self, block, layers, deep_stem=True):\n        super(ResNet, self).__init__()\n        self.deep_stem = deep_stem\n        if deep_stem:\n            self.inplanes = 128\n            self.conv1 = nn.Sequential(\n                conv3x3(3, 64, stride=2),\n                BatchNorm2d(64),\n                nn.ReLU(inplace=True),\n                conv3x3(64, 64),\n                BatchNorm2d(64),\n                nn.ReLU(inplace=True),\n                conv3x3(64, 128),\n                BatchNorm2d(128),\n                nn.ReLU(inplace=True)\n            )\n        else:\n            self.inplanes = 64\n            self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)\n        self.bn1 = BatchNorm2d(self.inplanes)\n        self.relu1 = nn.ReLU(inplace=True)\n"}