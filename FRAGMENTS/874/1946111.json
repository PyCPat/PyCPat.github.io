{"BEFORE":"        self.img_shape = model_args.get(\"img_shape\", (None, None, None))  # h, w, c\n        self.img_h, self.img_w, self.img_c = self.img_shape\n        self.action_size = model_args.get(\"action_size\", 0)\n        self.action_conditional = model_args.get(\"action_conditional\", False)\n\n        for required_arg in self.REQUIRED_ARGS:\n            assert required_arg in model_args.keys(), f\"ERROR: model {self.NAME} requires parameter '{required_arg}'\"\n\n        for model_arg, model_arg_val in model_args.items():\n            if hasattr(self, model_arg):\n                setattr(self, model_arg, model_arg_val)\n            else:\n                print(f\"INFO: model_arg '{model_arg}' is not usable for init of model '{self.NAME}' -> skipping\")\n\n    @property\n","AFTER":"        for required_arg in self.REQUIRED_ARGS:\n            assert required_arg in model_args.keys(), f\"ERROR: model {self.NAME} requires parameter '{required_arg}'\"\n            setattr(self, required_arg, model_args[required_arg])\n            if required_arg == \"img_shape\":\n                self.img_h, self.img_w, self.img_c = self.img_shape\n            elif required_arg == \"tensor_value_range\":\n                assert isinstance(self.tensor_value_range, list) or isinstance(self.tensor_value_range, tuple)\n                assert len(self.tensor_value_range) == 2\n\n        # set optional parameters\n        self.action_conditional = model_args.get(\"action_conditional\", False)\n        for model_arg, model_arg_val in model_args.items():\n            if model_arg in self.REQUIRED_ARGS:\n                continue  # skip required args as they have been set up already\n            elif hasattr(self, model_arg):\n                setattr(self, model_arg, model_arg_val)\n            else:\n                print(f\"INFO: model_arg '{model_arg}' is not usable for init of model '{self.NAME}' -> skipping\")\n\n    @property\n"}