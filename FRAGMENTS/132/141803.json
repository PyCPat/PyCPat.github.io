{"BEFORE":"        trees = []\n        memo[edge] = []\n\n        if isinstance(edge,CCGLeafEdge):\n            word = tree_class(edge.lhs(),[self._tokens[edge.start()]])\n            leaf = tree_class((edge.lhs(),\"Leaf\"),[word])\n            memo[edge] = leaf\n            return leaf\n\n        for cpl in self.child_pointer_lists(edge):\n            child_choices = [self._trees(cp, complete, memo, tree_class)\n                                for cp in cpl]\n            if len(child_choices) > 0 and isinstance(child_choices[0], string_types):\n                child_choices = [child_choices]\n            for children in self._choose_children(child_choices):\n                lhs = (edge.lhs(), \"%s\" % edge.rule())\n                trees.append(tree_class(lhs, children))\n\n        memo[edge] = trees\n        return trees\n","AFTER":"        assert complete, \"CCGChart cannot build incomplete trees\"\n\n        if edge in memo:\n            return memo[edge]\n\n        if isinstance(edge,CCGLeafEdge):\n            word = tree_class(edge.lhs(), [self._tokens[edge.start()]])\n            leaf = tree_class((edge.lhs(), \"Leaf\"), [word])\n            memo[edge] = [leaf]\n            return [leaf]\n\n        memo[edge] = []\n"}