{"BEFORE":"            blocks.extend(\n                [\n                    nn.ConvTranspose2d(channel, channel \/\/ 2, 4, stride=2, padding=1),\n                    nn.ReLU(inplace=True),\n                    nn.ConvTranspose2d(\n                        channel \/\/ 2, out_channel, 4, stride=2, padding=1\n                    ),\n                ]\n            )\n\n        elif stride == 2:\n            blocks.append(\n                nn.ConvTranspose2d(channel, out_channel, 4, stride=2, padding=1)\n            )\n","AFTER":"        blocks = [nn.Conv2d(in_channel, channel, 3, padding=1)]\n\n        for i in range(n_res_block):\n            blocks.append(ResBlock(channel, n_res_channel))\n\n        blocks.append(nn.ReLU(inplace=True))\n\n        strides = int(math.log2(stride))\n        if strides == 1:\n            blocks.append(nn.ConvTranspose2d(channel, out_channel, 4, stride=2, padding=1))\n        else:\n            for i in range(strides):\n                if i == 0:\n                    blocks.extend([nn.ConvTranspose2d(channel, channel \/\/ 2, 4, stride=2, padding=1), nn.ReLU(inplace=True)])\n                elif i + 1 < strides:\n                    blocks.extend([nn.ConvTranspose2d(channel \/\/ 2, channel \/\/ 2, 4, stride=2, padding=1), nn.ReLU(inplace=True)])\n                else:\n                    blocks.append(nn.ConvTranspose2d(channel \/\/ 2, out_channel, 4, stride=2, padding=1))\n\n        self.blocks = nn.Sequential(*blocks)\n"}