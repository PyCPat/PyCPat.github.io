{"BEFORE":"        self.nl = len(anchors)  # number of detection layers\n        self.na = len(anchors[0]) \/\/ 2  # number of anchors\n        self.grid = [torch.zeros(1)] * self.nl  # init grid\n        a = torch.tensor(anchors).float().view(self.nl, -1, 2)\n        self.register_buffer('anchors', a)  # shape(nl,na,2)\n        self.register_buffer('anchor_grid', a.clone().view(self.nl, 1, -1, 1, 1, 2))  # shape(nl,1,na,1,1,2)\n","AFTER":"        self.nl = len(anchors)  # number of detection layers\n        self.na = len(anchors[0]) \/\/ 2  # number of anchors\n        self.grid = [torch.zeros(1)] * self.nl  # init grid\n        self.anchor_grid = [torch.zeros(1)] * self.nl  # init anchor grid\n        self.register_buffer('anchors', torch.tensor(anchors).float().view(self.nl, -1, 2))  # shape(nl,na,2)\n"}