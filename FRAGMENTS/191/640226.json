{"BEFORE":"    def __init__(self) -> None:\n        super(ContentLoss, self).__init__()\n        # Load the VGG19 model trained on the ImageNet dataset.\n        vgg19 = models.vgg19(pretrained=True).eval()\n        # Extract the thirty-sixth layer output in the VGG19 model as the content loss.\n        self.feature_extractor = nn.Sequential(*list(vgg19.features.children())[:35])\n        # Freeze model parameters.\n        for parameters in self.feature_extractor.parameters():\n            parameters.requires_grad = False\n\n        # The preprocessing method of the input data. This is the VGG model preprocessing method of the ImageNet dataset.\n        self.register_buffer(\"mean\", torch.Tensor([0.485, 0.456, 0.406]).view(1, 3, 1, 1))\n        self.register_buffer(\"std\", torch.Tensor([0.229, 0.224, 0.225]).view(1, 3, 1, 1))\n","AFTER":"    def __init__(self, feature_extractor_node: str, normalize_mean: list, normalize_std: list) -> None:\n        super(ContentLoss, self).__init__()\n        # Get the name of the specified feature extraction node\n        self.feature_extractor_node = feature_extractor_node\n        # Load the VGG19 model trained on the ImageNet dataset.\n        model = models.vgg19(True)\n        # Extract the thirty-sixth layer output in the VGG19 model as the content loss.\n        self.feature_extractor = create_feature_extractor(model, [feature_extractor_node])\n        # set to validation mode\n        self.feature_extractor.eval()\n\n        # The preprocessing method of the input data. This is the VGG model preprocessing method of the ImageNet dataset.\n        self.normalize = transforms.Normalize(normalize_mean, normalize_std, True)\n"}