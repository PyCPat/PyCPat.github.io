{"BEFORE":"    def __init__(self, num_classes, matcher, eos_coef):\n        \"\"\" Create the criterion.\n        Parameters:\n            num_classes: number of object categories, omitting the special no-object category\n            matcher: module able to compute a matching between targets and proposals\n            eos_coef: relative classification weight applied to the no-object category\n            losses: list of all the losses to be applied. See get_loss for list of available losses.\n        \"\"\"\n        super().__init__()\n        self.num_classes = num_classes\n        self.matcher = matcher\n        self.eos_coef = eos_coef\n        empty_weight = torch.ones(self.num_classes + 1)\n        empty_weight[0] = self.eos_coef\n        self.register_buffer('empty_weight', empty_weight)\n","AFTER":"        self.cls_weights = torch.tensor(\n            [1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n        ).type(torch.FloatTensor)\n"}