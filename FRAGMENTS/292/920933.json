{"BEFORE":"                new_x = self._draw_tree(child, x, depth+1)\n            else:\n                new_x = self._draw_leaf(str(child), x, depth+1)\n            child_centers.append((x+new_x)\/2)\n            x = new_x + TreeView._X_SPACING\n        right = new_x\n            \n        # Draw lines to the child.\n        node_y = ((self._textheight + TreeView._Y_SPACING) * depth +\n                  self._textheight)\n        node_x = (left+right)\/2\n        child_y = node_y + TreeView._Y_SPACING\n        for child_x in child_centers:\n            c.create_line(node_x, node_y, child_x, child_y)\n                          \n        return right + (TreeView._X_SPACING\/2)\n","AFTER":"        child_centers = []\n        x = new_x = left\n        for child in tree:\n            if isinstance(child, Tree) or isinstance(child, TreeToken):\n                (new_x, center) = self._draw_tree(child, x, depth+1)\n                child_centers.append(center)\n            else:\n                new_x = self._draw_leaf(str(child), x, depth+1)\n                child_centers.append((x+new_x)\/2)\n            x = new_x + TreeView._X_SPACING\n        right = new_x\n            \n        # Draw lines to the child.\n        node_y = ((self._textheight + TreeView._Y_SPACING) * depth +\n                  self._textheight)\n        if child_centers:\n            node_x = (reduce(lambda a,b:a+b, child_centers, 0) \/\n                      len(child_centers))\n        else:\n            node_x = (right + left)\/2\n        child_y = node_y + TreeView._Y_SPACING\n        for child_x in child_centers:\n            c.create_line(node_x, node_y, child_x, child_y)\n\n        right = right + (TreeView._X_SPACING\/2)\n        return (right, node_x)\n"}