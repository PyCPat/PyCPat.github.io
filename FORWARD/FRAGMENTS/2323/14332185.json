{"BEFORE":"    def forward(self, patches, height, width):\n        \"\"\"\n        Args:\n            patches(tensor) batch x height*width\/64, height x width\n            height(int)\n            width(int)\n        Returns:\n            Tensor: batch x height x width\n        \"\"\"\n        k = 8\n        batch_size = patches.shape[0]\n        image_reshaped = patches.view(batch_size, height \/\/ k, width \/\/ k, k, k)\n        image_transposed = image_reshaped.permute(0, 1, 3, 2, 4)\n        return image_transposed.contiguous().view(batch_size, height, width)\n","AFTER":"    def forward(self, x: torch.Tensor, factor: torch.Tensor) -> torch.Tensor:\n        if isinstance(factor, (int, float)):\n            out = x * (self.y_table * factor)\n        else:\n            b = factor.size(0)\n            table = self.y_table.expand(b, 1, 8, 8) * factor.view(b, 1, 1, 1)\n            out = x * table\n\n        return out\n"}