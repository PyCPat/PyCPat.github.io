{"BEFORE":"    def forward(self, x: Tensor, h: Optional[Tensor] = None) -> Tuple[Tensor, Tensor]:\n        \"\"\"GRU transposing [B, C, T, F] input shape to [B, T, C*F].\"\"\"\n        _, _, _, f = x.shape\n        x, h = self.gru(x.transpose(1, 2).flatten(2), h)\n        x = self.fc(self.norm(x))\n        x = x.unflatten(2, (-1, f)).transpose(1, 2)\n","AFTER":"    def forward(self, input: Tensor, h=None) -> Tuple[Tensor, Tensor]:\n        # x: [B, C, T, F]\n        x = input.mean(dim=self.avg_dim)  # [B, C, T]\n        x = x.transpose(1, 2)  # [B, T, C]\n        x, h = self.gru(x, h)\n        x = self.fc(x).transpose(1, 2).unsqueeze(-1)\n        if self.skip is not None:\n            x = self.skip(input) + x  # a regular skip connection\n        elif self.scale is not None:\n            x = input * self.scale(x)  # like in SqueezeExcitation\n        return x, h\n"}