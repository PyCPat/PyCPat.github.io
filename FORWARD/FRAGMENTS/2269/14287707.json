{"BEFORE":"    def forward(self, logits, target, mask):\n        \"\"\"\n        logits: shape of (N, seq_len - 1, vocab_size)\n        target: shape of (N, seq_len)\n        mask: shape of (N, seq_len)\n        \"\"\"\n        item_sum = logits.shape[0]*logits.shape[1]  # N * seq_len\n        target, mask = target[:, 1:], mask[:, 1:]\n        # loss [N*seq_len]\n        loss = self.loss_fn(logits.contiguous().view(item_sum, -1),\n                            target.contiguous().view(-1))\n        mask_loss = loss * mask.contiguous().view(-1)\n        output = torch.sum(mask_loss) \/ torch.sum(mask)\n        return output\n","AFTER":"        assert 0 <= self.smoothing < 1\n\n        if self.weight is not None:\n            self.weight = self.weight.to(preds.device)\n\n        n = preds.size(-1)\n        log_preds = F.log_softmax(preds, dim=-1)\n        loss = self.reduce_loss(-log_preds.sum(dim=-1))\n        nll = F.nll_loss(\n            log_preds, target, reduction=self.reduction, weight=self.weight\n        )\n        return self.linear_combination(loss \/ n, nll)\n"}