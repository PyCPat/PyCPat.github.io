{"BEFORE":"        x = sub_graph_out.x.view(-1, time_step_len, self.subgraph_width)\n\n        if self.training:\n            # mask out the features for a random subset of polyline nodes\n            # for one batch, we mask the same polyline features\n            if self.with_aux:\n                mask_polyline_indices = [random.randint(0, time_step_len-1) for _ in range(x.size()[0])]\n                for i, idx in enumerate(mask_polyline_indices):\n                    x[i, idx, :] = 0.0\n\n            global_graph_out = self.global_graph(x, valid_lens)\n            pred = self.traj_pred_mlp(global_graph_out[:, [0]].squeeze(1))\n\n            if self.with_aux:\n                aux_in = torch.empty((global_graph_out.size()[0],\n                                      self.polyline_vec_shape)\n                                     ).to(self.device)\n                aux_gt = torch.empty((global_graph_out.size()[0],\n                                      self.polyline_vec_shape)\n                                     ).to(self.device)\n                for i, idx in enumerate(mask_polyline_indices):\n                    aux_in[i] = global_graph_out[i, idx].squeeze(0)\n                    aux_gt[i] = x[i, idx].squeeze(0)\n                aux_out = self.aux_mlp(aux_in)\n\n                return pred, aux_out, aux_gt\n            else:\n                return pred, None, None\n\n        else:\n","AFTER":"        time_step_len = int(data.time_step_len[0])\n        valid_lens = data.valid_len\n\n        # print(\"valid_lens type:\", type(valid_lens).__name__)\n        # print(\"data batch size:\", data.num_batch)\n\n        sub_graph_out = self.subgraph(data)\n        x = sub_graph_out.x.view(-1, time_step_len, self.subgraph_width)\n\n        if self.training:\n            # mask out the features for a random subset of polyline nodes\n            # for one batch, we mask the same polyline features\n            if self.with_aux:\n                mask_polyline_indices = [random.randint(0, time_step_len-1) + i * time_step_len for i in range(x.size()[0])]\n                x = x.view(-1, self.subgraph_width)\n                aux_gt = x[mask_polyline_indices]\n                x[mask_polyline_indices] = 0.0\n\n                x = x.view(-1, time_step_len, self.subgraph_width)\n                global_graph_out = self.global_graph(x, valid_lens)\n                pred = self.traj_pred_mlp(global_graph_out[:, [0]].squeeze(1))\n\n                aux_in = global_graph_out.view(-1, self.global_graph_width)[mask_polyline_indices]\n                aux_out = self.aux_mlp(aux_in)\n\n                return pred, aux_out, aux_gt\n            else:\n                global_graph_out = self.global_graph(x, valid_lens)\n                pred = self.traj_pred_mlp(global_graph_out[:, [0]].squeeze(1))\n\n                return pred, None, None\n\n        else:\n"}