{"BEFORE":"    def forward(self, x):\n        xq = 0\n        diff = 0\n        codes = []\n        for vq in self.vqs:\n            _xq, _diff, _codes = vq(x - xq)\n            diff = diff + _diff\n            xq = xq + _xq\n            codes.append(_codes)\n        codes = torch.cat(codes, 1)\n        return xq, (x - xq).pow(2).mean(), codes\n","AFTER":"    def forward(self, x, n_q: Optional[int] = None):\n        quantized_out = 0.0\n        residual = x\n\n        all_losses = []\n        all_indices = []\n\n        n_q = n_q or len(self.layers)\n\n        for layer in self.layers[:n_q]:\n            quantized, indices, loss = layer(residual)\n            residual = residual - quantized\n            quantized_out = quantized_out + quantized\n\n            all_indices.append(indices)\n            all_losses.append(loss)\n\n        out_losses, out_indices = map(torch.stack, (all_losses, all_indices))\n        return quantized_out, sum(out_losses), out_indices.permute(1, 0, 2)\n"}