{"BEFORE":"    def forward(self, image, factor=1):\n        \"\"\"\n        Args:\n            image(tensor): batch x height x width\n        Returns:\n            Tensor: batch x height x width\n        \"\"\"\n        if isinstance(factor, (int, float)):\n            out = image * (self.c_table * factor)\n        else:\n            b = factor.size(0)\n            table = self.c_table.expand(b, 1, 8, 8) * factor.view(b, 1, 1, 1)\n            out = image * table\n        return out\n","AFTER":"    def forward(self, x: torch.Tensor, height: int, width: int) -> torch.Tensor:\n        k = 8\n        batch_size = x.shape[0]\n        x_reshaped = x.view(batch_size, height \/\/ k, width \/\/ k, k, k)\n        x_transposed = x_reshaped.permute(0, 1, 3, 2, 4)\n        out = x_transposed.contiguous().view(batch_size, height, width)\n"}