{"BEFORE":"        stacked = []\n\n        x = self.band_split(input)\n\n        for idx, key in enumerate(self.bands[:-1]):\n            _x = self.net[key](x[idx])\n            stacked.append(_x)\n        \n        stacked = torch.cat(stacked, dim=2)\n        \n        key = self.bands[-1] # 'full'\n        x = self.net[key](input)\n        x = torch.cat([stacked, x], dim=1)\n        x = self.d2block(x)\n        \n        output = self.gated_conv2d(x)\n","AFTER":"        bands, sections = self.bands, self.sections\n\n        _, _, n_bins, _ = input.size()\n\n        sections = [sum(sections), n_bins - sum(sections)]\n        x_valid, x_invalid = torch.split(input, sections, dim=2)\n\n        x = self.band_split(x_valid)\n\n        x_bands = []\n        for band, x_band in zip(bands, x):\n            x_band = self.net[band](x_band)\n            x_bands.append(x_band)\n        x_bands = torch.cat(x_bands, dim=2)\n\n        x_full = self.net['full'](x_valid)\n        x = torch.cat([x_bands, x_full], dim=1)\n\n        x = self.d2block(x)\n        x = self.norm2d(x)\n        x = self.glu2d(x)\n        # TODO: scale\n        x = self.nonlinear2d(x)\n\n        output = torch.cat([x, x_invalid], dim=2)\n"}