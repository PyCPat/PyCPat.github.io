{"BEFORE":"        z = z.permute(0, 2, 3, 1).contiguous()\n        if self.normalized:\n            z = z \/ z.norm(dim=-1, keepdim=True)\n        z_flattened = z.view(-1, self.codebook_dim)\n\n        # distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z\n        d = torch.sum(z_flattened.pow(2), dim=1, keepdim=True) + \\\n            torch.sum(self.embedding.weight.pow(2), dim=1) - 2 * \\\n            torch.einsum('bd,nd->bn', z_flattened, self.embedding.weight)\n\n        encoding_indices = torch.argmin(d, dim=1)\n        z_q = self.embedding(encoding_indices).view(z.shape)\n        encodings = F.one_hot(encoding_indices, self.num_tokens).type(z.dtype)\n        avg_probs = torch.mean(encodings, dim=0)\n        perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))\n\n        # compute loss for embedding\n        loss = self.beta * F.mse_loss(z_q.detach(), z) + F.mse_loss(z_q, z.detach())\n\n        # contrastive codebook loss\n        if self.contrast:\n            target = torch.arange(0, self.num_tokens, device=self.embedding.weight.device)\n            logits = torch.einsum('ik,jk->ij', self.embedding.weight, self.embedding.weight)\n            loss = loss + F.cross_entropy(logits, target)\n\n        # preserve gradients\n        z_q = z + (z_q - z).detach()\n\n        # reshape back to match original input shape\n        #z_q, 'b h w c -> b c h w'\n        z_q = z_q.permute(0, 3, 1, 2).contiguous()\n","AFTER":"        z = rearrange(z, 'b c h w -> b h w c').contiguous()\n        if self.normalized:\n            z = z \/ z.norm(dim=-1, keepdim=True)\n        z_flattened = z.view(-1, self.codebook_dim)\n\n        # distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z\n        d = torch.sum(z_flattened.pow(2), dim=1, keepdim=True) + \\\n            torch.sum(self.embedding.weight.pow(2), dim=1) - 2 * \\\n            torch.einsum('bd,nd->bn', z_flattened, self.embedding.weight)\n\n        encoding_indices = torch.argmin(d, dim=1)\n        z_q = self.embedding(encoding_indices).view(z.shape)\n        encodings = F.one_hot(encoding_indices, self.num_tokens).type(z.dtype)\n        avg_probs = torch.mean(encodings, dim=0)\n        perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))\n\n        # compute loss for embedding\n        loss = self.beta * F.mse_loss(z_q.detach(), z) + F.mse_loss(z_q, z.detach())\n\n        # contrastive codebook loss\n        if self.contrast:\n            target = torch.arange(0, self.num_tokens, device=self.embedding.weight.device)\n            logits = torch.einsum('ik,jk->ij', self.embedding.weight, self.embedding.weight)\n            loss = loss + F.cross_entropy(logits, target)\n\n        # preserve gradients\n        z_q = z + (z_q - z).detach()\n\n        # reshape back to match original input shape\n        #z_q, 'b h w c -> b c h w'\n        z_q = rearrange(z_q, 'b h w c -> b c h w').contiguous()\n"}