{"BEFORE":"        level = encoder_y[:, -1:].repeat(1, self.prediction_length, 1)  # Level with Naive1\n        block_forecasts = [level]\n        block_backcasts = [encoder_y[:, -1:].repeat(1, self.context_length, 1)]\n\n        forecast = level\n","AFTER":"        level = encoder_y[:, -1:].repeat(1, self.prediction_length, 1)  # Level with Naive1\n        forecast_level = level.repeat_interleave(torch.tensor(self.output_size, device=level.device), dim=2)\n\n        # level with last available observation\n        if self.naive_level:\n            block_forecasts = [forecast_level]\n            block_backcasts = [encoder_y[:, -1:].repeat(1, self.context_length, 1)]\n\n            forecast = block_forecasts[0]\n        else:\n            block_forecasts = []\n            block_backcasts = []\n            forecast = torch.zeros_like(forecast_level, device=forecast_level.device)\n\n        # forecast by block\n        for block in self.blocks:\n"}