{"BEFORE":"        pred = self.model(noised_img, times, self_cond, self_latents)\n\n        if self.objective == 'x0':\n            target = img\n\n        elif self.objective == 'eps':\n            target = noise\n\n        elif self.objective == 'v':\n            target = alpha * noise - sigma * img\n\n        return F.mse_loss(pred, target)\n","AFTER":"        pred = self.model(noised_img, times, self_cond, self_latents)\n\n        if self.objective == 'eps':\n            target = noise\n\n        elif self.objective == 'x0':\n            target = img\n\n        elif self.objective == 'v':\n            target = alpha * noise - sigma * img\n\n        loss = F.mse_loss(pred, target, reduction = 'none')\n        loss = reduce(loss, 'b ... -> b', 'mean')\n\n        # min snr loss weight\n\n        snr = (alpha * alpha) \/ (sigma * sigma)\n        maybe_clipped_snr = snr.clone()\n\n        if self.min_snr_loss_weight:\n            maybe_clipped_snr.clamp_(min = self.min_snr_gamma)\n\n        if self.objective == 'eps':\n            loss_weight = maybe_clipped_snr \/ snr\n\n        elif self.objective == 'x0':\n            loss_weight = maybe_clipped_snr\n\n        elif self.objective == 'v':\n            loss_weight = maybe_clipped_snr \/ (snr + 1)\n\n        return (loss * loss_weight).mean()\n"}