{"BEFORE":"        image_list = self.preprocess(image_list, self.image_size)\n        x = image_list.tensors\n        features = self.backbone(x)\n        classifications = self.classifier(features)\n        regressions = self.regressor(features)\n        del features\n        anchors = self.anchor_gen(x)\n        # 预训练模型的顺序 -> 当前模型顺序\n        # y_reg, x_reg, h_reg, w_reg -> x_reg, y_reg, w_reg, h_reg\n        regressions[..., 0::2], regressions[..., 1::2] = regressions[..., 1::2], regressions[..., 0::2].clone()\n        if self.training:\n            assert targets is not None, \"targets is None\"\n            loss = self.loss_fn(classifications, regressions, anchors, targets)\n            return loss\n        else:\n            assert targets is None, \"targets is not None\"\n","AFTER":"    def forward(self, image_list, targets=None, image_size=None, score_thresh=None, nms_thresh=None):\n        \"\"\"\n\n        :param image_list: List[Tensor[C, H, W]]  [0., 1.]\n        :param targets: Dict['labels': List[Tensor[NUMi]], 'boxes': List[Tensor[NUMi, 4]]]\n            boxes: left, top, right, bottom\n        :param image_size: int. 真实输入图片的大小\n        :return: train模式: loss: Dict\n                eval模式: result: Dict\n        \"\"\"\n        assert isinstance(image_list[0], torch.Tensor)\n        image_size = image_size or self.image_size\n        image_list, targets = self.preprocess(image_list, targets, image_size)\n        x = image_list.tensors\n        features = self.backbone(x)\n        classifications = self.classifier(features)\n        regressions = self.regressor(features)\n        del features\n        anchors = self.anchor_gen(x)\n        # 预训练模型的顺序 -> 当前模型顺序\n        # y_reg, x_reg, h_reg, w_reg -> x_reg, y_reg, w_reg, h_reg\n        regressions[..., 0::2], regressions[..., 1::2] = regressions[..., 1::2], regressions[..., 0::2].clone()\n        if targets is not None:\n            if score_thresh is not None or nms_thresh is not None:\n                print(\"Warning: no need to transfer score_thresh or nms_thresh\")\n            loss = self.loss_fn(classifications, regressions, anchors, targets)\n            return loss\n        else:\n            score_thresh = score_thresh or 0.5\n            nms_thresh = nms_thresh or 0.5\n"}