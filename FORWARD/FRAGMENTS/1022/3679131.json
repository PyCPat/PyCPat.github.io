{"BEFORE":"        d = self.layers(x)\n        if self.use_lstm_with_projection:\n            d = torch.nn.functional.normalize(d[:, -1], p=2, dim=1)\n","AFTER":"    def forward(self, x, l2_norm=True):\n        \"\"\"Forward pass of the model.\n\n        Args:\n            x (Tensor): Raw waveform signal or spectrogram frames. If input is a waveform, `torch_spec` must be `True`\n                to compute the spectrogram on-the-fly.\n            l2_norm (bool): Whether to L2-normalize the outputs.\n\n        Shapes:\n            - x: :math:`(N, 1, T_{in})` or :math:`(N, D_{spec}, T_{in})`\n        \"\"\"\n        with torch.no_grad():\n            with torch.cuda.amp.autocast(enabled=False):\n                if self.use_torch_spec:\n                    x.squeeze_(1)\n                    x = self.torch_spec(x)\n                x = self.instancenorm(x).transpose(1, 2)\n        d = self.layers(x)\n        if self.use_lstm_with_projection:\n            d = d[:, -1]\n        if l2_norm:\n"}