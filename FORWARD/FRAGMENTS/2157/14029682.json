{"BEFORE":"        loss = distortion_loss + self.beta * coding_loss\n\n        # tightens bound using IWAE: log 1\/k sum exp(loss). shape: [batch_size]\n        if n_z > 1:\n            tight_loss = torch.logsumexp(loss, 0) - math.log(n_z)\n        else:\n            tight_loss = loss.squeeze(0)\n\n        # E_x[loss]. shape: []\n        tight_loss = tight_loss.mean(0)\n\n        logs.update(\n            dict(\n                loose_loss=loss.mean() \/ math.log(BASE_LOG),\n                loss=tight_loss \/ math.log(BASE_LOG),\n            )\n        )\n\n        return tight_loss, logs\n","AFTER":"        n_z = Y_hat.size(0)\n\n        distortion, logs = self.get_distortion(Y_hat, targets)\n\n        # loose_loss for plotting. shape: []\n        loose_loss = (distortion + self.beta * rate).mean()\n\n        # tightens bound using IWAE: log 1\/k sum exp(loss). shape: [batch_size]\n        if n_z > 1:\n            rate = torch.logsumexp(rate, 0) - math.log(n_z)\n            distortion = torch.logsumexp(distortion, 0) - math.log(n_z)\n        else:\n            distortion = distortion.squeeze(0)\n            rate = rate.squeeze(0)\n\n        # E_x[...]. shape: shape: []\n        rate = rate.mean(0)\n        distortion = distortion.mean(0)\n        loss = distortion + self.beta * rate\n\n        logs.update(\n            dict(\n                loose_loss=loose_loss \/ math.log(BASE_LOG),\n                loss=loss \/ math.log(BASE_LOG),\n                rate=rate \/ math.log(BASE_LOG),\n                distortion=distortion \/ math.log(BASE_LOG),\n            )\n        )\n\n        return loss, logs\n"}