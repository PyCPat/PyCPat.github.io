{"BEFORE":"        u = self.norm(x)\n\n        # learned weighted residual\n\n        residual = u * self.param_D\n\n        # dsconv kernel depends on sequence length\n\n        K = self.weight[-seq_len:]\n\n        # conv1d fft O(nlog(n))\n\n        u_f = rfft(u, n = seq_len * 2, dim = -2)\n        K_f = rfft(K, n = seq_len * 2, dim = -2)\n\n        u_f = rearrange(u_f, '... (h d) -> ... h d', h = self.heads)\n        K_f = rearrange(K_f, '... -> ... 1')\n\n        out = rearrange(u_f * K_f, '... h d -> ... (h d)')\n\n        out = irfft(out, seq_len * 2, dim = -2)[..., :seq_len, :]\n","AFTER":"        u = self.norm(x)\n\n        # learned weighted residual\n\n        residual = u * self.param_D\n\n        # dsconv kernel depends on sequence length\n\n        K = self.weight[-seq_len:]\n\n        # conv1d fft O(nlog(n))\n\n        u = rearrange(u, '... (h d) -> ... h d', h = self.heads)\n\n        out = conv1d_fft(u, K, dim = -3, weight_dim = -2)\n\n        out = rearrange(out, '... h d -> ... (h d)')\n"}