{"BEFORE":"        layers_and_args = list(zip(self.layers, args))\n\n        if self.training and self.layer_dropout > 0:\n            layers_and_args = layer_drop(layers_and_args, self.layer_dropout)\n\n        for (f, g), (f_args, g_args) in layers_and_args:\n            x = x + f(x, **f_args)\n            x = x + g(x, **g_args)\n        return x\n","AFTER":"        layers_and_args = list(zip(self.layers, args))\n\n        if self.training and self.layer_dropout > 0:\n            layers_and_args = layer_drop(layers_and_args, self.layer_dropout)\n\n        aux_loss = torch.zeros(1, device=x.device, dtype=x.dtype)\n\n        for (f, g), (f_args, g_args) in layers_and_args:\n            res, loss = cast_return(f(x, **f_args))\n            aux_loss += loss\n            x = x + res\n\n            res, loss = cast_return(g(x, **g_args))\n            aux_loss += loss\n            x = x + res\n        return x, aux_loss\n"}