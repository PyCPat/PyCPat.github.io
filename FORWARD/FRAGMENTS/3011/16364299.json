{"BEFORE":"        feat_spec = feat_spec.squeeze(1).permute(0, 3, 1, 2)\n\n        feat_erb = self.pad(feat_erb)\n        feat_spec = self.pad(feat_spec)\n        e0, e1, e2, e3, emb, c0, lsnr = self.enc(feat_erb, feat_spec)\n        m = self.erb_dec(emb, e3, e2, e1, e0)\n\n        spec = self.mask(spec, m)\n        df_coefs, df_alpha = self.df_dec(emb, c0)\n\n        for _ in range(self.df_iter):\n            if self.use_alpha:\n                spec = self.df_op(spec, df_coefs, df_alpha)\n            else:\n                spec = self.df_op(spec, df_coefs)\n\n        return spec, m, lsnr, df_alpha\n","AFTER":"        feat_spec = feat_spec.squeeze(1).permute(0, 3, 1, 2)\n\n        feat_erb = self.pad_feat(feat_erb)\n        feat_spec = self.pad_feat(feat_spec)\n        e0, e1, e2, e3, emb, c0, lsnr = self.enc(feat_erb, feat_spec)\n        m = self.erb_dec(emb, e3, e2, e1, e0)\n\n        m = self.pad_out(m.unsqueeze(-1)).squeeze(-1)\n        spec = self.mask(spec, m)\n\n        if self.run_df:\n            df_coefs, df_alpha = self.df_dec(emb, c0)\n            df_coefs = self.pad_out(df_coefs)\n\n            if self.pad_legacy:\n                # Legacy mode only pads the lower part of the spectrum.\n                spec_f = self.pad_spec(spec)\n                spec_f = self.df_op(spec_f, df_coefs)\n                spec[..., : self.nb_df, :] = spec_f[..., : self.nb_df, :]\n            else:\n                spec = self.pad_spec(spec)\n                spec = self.df_op(spec, df_coefs)\n        else:\n            df_alpha = torch.zeros(())\n\n        return spec, m, lsnr, df_alpha\n"}