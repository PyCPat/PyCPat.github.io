{"BEFORE":"        _, permutation_dim, _ = x.shape\n\n        e = self.first_layer(x[:, 0])\n        for i, item in enumerate(torch.transpose(x[:, 1:], 0, 1)):\n            e = e + self.first_layer(item)\n\n        e = e \/ permutation_dim\n","AFTER":"        batch, permutation_dim, _ = x.shape\n\n        e = self.single_trial_net(x.view(batch * permutation_dim, -1)).view(\n            batch, permutation_dim, -1\n        )\n\n        if self.combining_operation == \"mean\":\n            e = e.mean(1)\n        elif self.combining_operation == \"sum\":\n            e = e.sum(1)\n\n        embedding = self.fc_subnet(e)\n"}