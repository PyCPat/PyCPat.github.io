{"BEFORE":"        x = self.norm(x)\n        # [B, N, L]\n        x = self.conv1d(x)\n        if self.use_global_pos_enc:\n            x = self.pos_enc(x.transpose(1, -1)).transpose(1, -1) + x * (\n                x.size(1) ** 0.5\n            )\n\n        # [B, N, K, S]\n        x, gap = self._Segmentation(x, self.K)\n        # [B, N*spks, K, S]\n        for i in range(self.num_layers):\n            x = self.dual_mdl[i](x)\n\n        # self.dual_mdl[1].inter_mdl.mdl.layers[0].linear1.weight to see the weights\n\n        x = self.prelu(x)\n        x = self.conv2d(x)\n        # [B*spks, N, K, S]\n        B, _, K, S = x.shape\n        x = x.view(B * self.num_spks, -1, K, S)\n        # [B*spks, N, L]\n        x = self._over_add(x, gap)\n        x = self.output(x) * self.output_gate(x)\n        # [spks*B, N, L]\n        x = self.end_conv1x1(x)\n        # [B*spks, N, L] -> [B, spks, N, L]\n        _, N, L = x.shape\n        x = x.view(B, self.num_spks, N, L)\n","AFTER":"        x = self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)\n        # [B, L, N]\n        x = self.conv1d(x)\n\n        # [B, K, S, N]\n        x, gap = self._Segmentation(x, self.K)\n\n        # [B, K, S, N*spks]\n        for i in range(self.num_layers):\n            x = self.dual_mdl[i](x)\n\n        # self.dual_mdl[1].inter_mdl.mdl.layers[0].linear1.weight to see the weights\n        x = self.prelu(x)\n\n        x = self.conv2d(x)\n        # [B*spks, K, S, N]\n        B, K, S, _ = x.shape\n        x = x.reshape(B * self.num_spks, K, S, -1)\n\n        # [B*spks, L, N]\n        x = self._over_add(x, gap)\n\n        x = self.output(x) * self.output_gate(x)\n        # [B*spks, L, N]\n        x = self.end_conv1x1(x)\n\n        # [B*spks, L, N] -> [B, spks, L, N]\n        _, L, N = x.shape\n        x = x.view(B, self.num_spks, L, N)\n"}