{"BEFORE":"        g = g.local_var()\n        if self.use_weight:\n            weight = self.basis() if self.use_basis else self.weight\n            wdict = {self.rel_names[i]: {'weight': w.squeeze(0)}\n                     for i, w in enumerate(th.split(weight, 1, dim=0))}\n        else:\n            wdict = {}\n\n        if g.is_block:\n            inputs_src = inputs\n            inputs_dst = {k: v[:g.number_of_dst_nodes(k)] for k, v in inputs.items()}\n        else:\n            inputs_src = inputs_dst = inputs\n\n        hs = self.conv(g, inputs_src, mod_kwargs=wdict)\n\n        def _apply(ntype, h):\n            if self.self_loop:\n                h = h + th.matmul(inputs_dst[ntype], self.loop_weight)\n            if self.bias:\n                h = h + self.h_bias\n            if self.activation:\n                h = self.activation(h)\n            if self.batchnorm:\n                h = self.bn(h)\n            return self.dropout(h)\n\n        return {ntype: _apply(ntype, h) for ntype, h in hs.items()}\n","AFTER":"        h_dict = self.conv(g, h_dict)\n        out_put = {}\n        for n_type, h in h_dict.items():\n            out_put[n_type] = h.squeeze()\n        return out_put\n"}