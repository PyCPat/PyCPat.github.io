{"BEFORE":"        codes = list()\n        latent = self._encoder(x)\n        for i in range(self._levels):\n            head = self._heads[i]\n            z = head(latent)\n            if i < self._levels - 1:\n                mapper = self._mappers[i]\n                latent = mapper(latent)\n                code = self._quantizers[i](z)\n                hard = self._deQuantizers[i](code)\n                latent = latent - hard\n            else:\n                code = self._quantizers[i](z)\n            codes.append(code)\n        return codes\n","AFTER":"    def forward(self, x: torch.Tensor, cAndPadding: torch.Tensor) -> Tuple[List[torch.LongTensor], torch.Tensor]:\n        codes = list()\n        latent = self._encoder(x)\n        for head, mapper, quantizer, deQuantizer in zip(self._heads, self._mappers, self._quantizers, self._deQuantizers):\n            z = head(latent)\n            latent = mapper(latent)\n            code = quantizer(z)\n            hard = deQuantizer(code)\n            latent = latent - hard\n            codes.append(code)\n        z = self._heads[-1](latent)\n        codes.append(self._quantizers[-1](z))\n        # codes from small to big\n        return codes[::-1], cAndPadding\n"}