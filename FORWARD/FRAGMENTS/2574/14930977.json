{"BEFORE":"        for i in range(self.agents):\n            # Common layers\n            x = input1[:, i]\n\n            x = self.conv0(x)\n            x = self.prelu0(x)\n\n            x = self.maxpool0(x)\n\n            x = self.conv1(x)\n            x = self.prelu1(x)\n            x = self.maxpool1(x)\n            x = self.conv2(x)\n            x = self.prelu2(x)\n            x = self.maxpool2(x)\n            x = self.conv3(x)\n            x = self.prelu3(x)\n            x = x.view(-1, 512)\n            if i == 0:\n                input2 = x.unsqueeze(1)\n            else:\n                input2 = torch.cat((input2, x.unsqueeze(1)), dim=1)\n\n        comm = torch.mean(input2, axis=1)\n        for i in range(self.agents):\n            x = input2[:, i]\n            x = self.fc1[i](torch.cat((x, comm), axis=-1))\n            x = self.prelu4[i](x)\n            if i == 0:\n                input3 = x.unsqueeze(1)\n            else:\n                input3 = torch.cat((input3, x.unsqueeze(1)), dim=1)\n\n        comm = torch.mean(input3, axis=1)\n        for i in range(self.agents):\n            x = input3[:, i]\n            x = self.fc2[i](torch.cat((x, comm), axis=-1))\n            x = self.prelu5[i](x)\n            if i == 0:\n                input4 = x.unsqueeze(1)\n            else:\n                input4 = torch.cat((input4, x.unsqueeze(1)), dim=1)\n\n        comm = torch.mean(input4, axis=1)\n        for i in range(self.agents):\n            x = input4[:, i]\n            x = self.fc3[i](torch.cat((x, comm), axis=-1))\n            if i == 0:\n                output = x.unsqueeze(1)\n            else:\n                output = torch.cat((output, x.unsqueeze(1)), dim=1)\n\n        return output.cpu()\n","AFTER":"        input2 = []\n        for i in range(self.agents):\n            x = input1[:, i]\n            x = self.conv0(x)\n            x = self.prelu0(x)\n            x = self.maxpool0(x)\n            x = self.conv1(x)\n            x = self.prelu1(x)\n            x = self.maxpool1(x)\n            x = self.conv2(x)\n            x = self.prelu2(x)\n            x = self.maxpool2(x)\n            x = self.conv3(x)\n            x = self.prelu3(x)\n            x = x.view(-1, 512)\n            input2.append(x)\n        input2 = torch.stack(input2, dim=1)\n\n        # Communication layers\n        comm = torch.mean(input2, axis=1)\n        input3 = []\n        for i in range(self.agents):\n            x = input2[:, i]\n            x = self.fc1[i](torch.cat((x, comm), axis=-1))\n            input3.append(x)\n        input3 = torch.stack(input3, dim=1)\n        input3 = self.prelu4(input3)\n\n        comm = torch.mean(input3, axis=1)\n        input4 = []\n        for i in range(self.agents):\n            x = input3[:, i]\n            x = self.fc2[i](torch.cat((x, comm), axis=-1))\n            input4.append(x)\n        input4 = torch.stack(input4, dim=1)\n        input4 = self.prelu5(input4)\n\n        comm = torch.mean(input4, axis=1)\n        output = []\n        for i in range(self.agents):\n            x = input4[:, i]\n            x = self.fc3[i](torch.cat((x, comm), axis=-1))\n            output.append(x)\n        output = torch.stack(output, dim=1)\n"}