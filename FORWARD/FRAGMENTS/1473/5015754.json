{"BEFORE":"        _, probs, embed = self.get_model_output(x, edge_index, edge_mask=None)\n\n        if self.explain_graph:\n            # original value\n            probs = probs.squeeze()\n            label = y\n            # masked value\n            _, edge_mask = self.explain(x, edge_index, embed=embed, tmp=1.0, training=False)\n            data = Data(x=x, edge_index=edge_index)\n            selected_nodes = calculate_selected_nodes(data, edge_mask, top_k)\n            masked_nodes_list = [node for node in range(data.x.shape[0]) if node not in selected_nodes]\n            value_func = GnnNets_GC2value_func(self.model, target_class=label)\n            masked_pred = gnn_score(masked_nodes_list, data, value_func,\n                                    subgraph_building_method='zero_filling')\n            sparsity_score = 1 - len(selected_nodes) \/ data.x.shape[0]\n        else:\n            node_idx = kwargs.get('node_idx')\n            assert kwargs.get('node_idx') is not None, \"please input the node_idx\"\n            # original value\n            probs = probs.squeeze()[node_idx]\n            label = y[node_idx]\n            # masked value\n            x, edge_index, _, subset, _ = self.get_subgraph(node_idx, x, edge_index)\n            new_node_idx = torch.where(subset == node_idx)[0]\n            _, edge_mask = self.explain(x, edge_index, embed[node_idx], tmp=1.0, training=False)\n","AFTER":"        y = kwargs.get('y')\n        x = x.to(self.device)\n        edge_index = edge_index.to(self.device)\n        y = y.to(self.device)\n\n        self.__clear_masks__()\n        logits = self.model(x, edge_index)\n        probs = F.softmax(logits, dim=-1)\n        embed = self.model.get_emb(x, edge_index)\n\n        if self.explain_graph:\n            # original value\n            probs = probs.squeeze()\n            label = y\n            # masked value\n            _, edge_mask = self.explain(x, edge_index, embed=embed, tmp=1.0, training=False)\n            data = Data(x=x, edge_index=edge_index)\n            selected_nodes = calculate_selected_nodes(data, edge_mask, top_k)\n            maskout_nodes_list = [node for node in range(data.x.shape[0]) if node not in selected_nodes]\n            value_func = GnnNets_GC2value_func(self.model, target_class=label)\n            maskout_pred = gnn_score(maskout_nodes_list, data, value_func,\n                                    subgraph_building_method='zero_filling')\n            sparsity_score = 1 - len(selected_nodes) \/ data.x.shape[0]\n        else:\n            node_idx = kwargs.get('node_idx')\n            assert kwargs.get('node_idx') is not None, \"please input the node_idx\"\n            # original value\n            probs = probs.squeeze()[node_idx]\n            label = y[node_idx]\n            # masked value\n            x, edge_index, _, subset, _ = self.get_subgraph(node_idx, x, edge_index)\n            new_node_idx = torch.where(subset == node_idx)[0]\n            embed = self.model.get_emb(x, edge_index)\n            _, edge_mask = self.explain(x, edge_index, embed, tmp=1.0, training=False)\n"}