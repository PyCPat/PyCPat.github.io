{"BEFORE":"        mel_loss = self.mae_loss(mel_predictions, mel_targets)\r\n\r\n        pitch_loss = self.mse_loss(pitch_predictions, pitch_targets)\r\n        energy_loss = self.mse_loss(energy_predictions, energy_targets)\r\n        duration_loss = self.mse_loss(log_duration_predictions, log_duration_targets)\r\n\r\n        total_loss = (\r\n            mel_loss + duration_loss + pitch_loss + energy_loss\r\n        )\r\n\r\n        return (\r\n            total_loss,\r\n            mel_loss,\r\n            pitch_loss,\r\n            energy_loss,\r\n            duration_loss,\r\n        )\r\n","AFTER":"        mel_loss = self.mae_loss(mel_predictions, mel_targets)\r\n\r\n        pitch_loss = self.mse_loss(pitch_predictions, pitch_targets)\r\n        energy_loss = self.mse_loss(energy_predictions, energy_targets)\r\n        duration_loss = self.mse_loss(log_duration_predictions, log_duration_targets)\r\n\r\n        alpha = 1\r\n        D_s_loss = D_t_loss = torch.tensor([0.], device=mel_predictions.device, requires_grad=False)\r\n        if D_s is not None and D_t is not None:\r\n            D_s_loss = self.mse_loss(D_s, torch.ones_like(D_s, requires_grad=False))\r\n            D_t_loss = self.mse_loss(D_t, torch.ones_like(D_t, requires_grad=False))\r\n            alpha = self.alpha\r\n\r\n        recon_loss = alpha * (mel_loss + duration_loss + pitch_loss + energy_loss)\r\n        total_loss = (\r\n            recon_loss + D_s_loss + D_t_loss\r\n        )\r\n\r\n        return (\r\n            total_loss,\r\n            mel_loss,\r\n            pitch_loss,\r\n            energy_loss,\r\n            duration_loss,\r\n            D_s_loss,\r\n            D_t_loss,\r\n        )\r\n"}