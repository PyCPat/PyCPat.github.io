{"BEFORE":"        return x\n","AFTER":"    def forward(self, x, mask = None):\n        n, device = x.shape[1], x.device\n        x = self.token_emb(x)\n        pos_emb = self.pos_emb(torch.arange(n, device = device))\n        x = x + rearrange(pos_emb, 'n d -> () n d')\n\n        if self.training:\n            # training mode\n\n            for _ in range(self.train_max_steps):\n                x, halt_logits = self.block(x)\n\n            return self.to_logits(x)\n        else:\n            # evaluation mode\n\n            for _ in range(self.train_max_steps):\n                x, halt_logits = self.block(x)\n\n            return self.logits(x)\n"}