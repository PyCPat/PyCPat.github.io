{"BEFORE":"        laterals = []\n\n        for i, lateral_conv in enumerate(self.lateral_convs):\n            laterals.append(lateral_conv(inputs[i]))\n\n        x = inputs[-1]\n        psp_outs = [x]\n        psp_outs.extend(self.psp_modules(x))\n        psp_outs = torch.cat(psp_outs, dim=1)\n        \n        laterals.append(self.bottleneck(psp_outs))\n\n        used_backbone_levels = len(laterals)\n\n        for i in range(used_backbone_levels-1, 0, -1):\n            laterals[i-1] += F.interpolate(laterals[i], size=laterals[i-1].shape[2:], mode='bilinear', align_corners=False)\n        \n        fpn_outs = []\n\n        for i in range(used_backbone_levels-1):\n            fpn_outs.append(self.fpn_convs[i](laterals[i]))\n\n        fpn_outs.append(laterals[-1])\n","AFTER":"        laterals = [lateral_conv(inputs[i]) for i, lateral_conv in enumerate(self.lateral_convs)]\n        laterals.append(self.psp_forward(inputs))\n\n        used_backbone_levels = len(laterals)\n        for i in range(used_backbone_levels-1, 0, -1):\n            laterals[i-1] += F.interpolate(laterals[i], size=laterals[i-1].shape[2:], mode='bilinear', align_corners=False)\n        \n        fpn_outs = [self.fpn_convs[i](laterals[i]) for i in range(used_backbone_levels-1)]\n"}