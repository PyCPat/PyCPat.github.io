{"BEFORE":"        z_0 = mu + norm_scale * std\r\n\r\n        # Flow transforms\r\n        z_, log_det = self.flows(z_0)\r\n        z_ = z_.squeeze()\r\n\r\n        # Q0 and prior\r\n        q0 = Normal(mu, torch.exp((0.5 * log_var)))\r\n        p = Normal(0., 1.)\r\n\r\n        # KLD including logdet term\r\n        p_z_ = torch.sum(p.log_prob(z_), -1)\r\n        q0_z_0 = torch.sum(q0.log_prob(z_0), -1)\r\n        log_det = log_det.view(-1)\r\n        kld = - torch.sum(p.log_prob(z_), -1) + torch.sum(q0.log_prob(z_0), -1) - log_det.view(-1)\r\n        self.test_params = [torch.mean(- torch.sum(p.log_prob(z_), -1)), torch.mean(torch.sum(q0.log_prob(z_0), -1)), torch.mean(- log_det.view(-1)), torch.mean(kld)]\r\n\r\n        # Decode\r\n        z_ = z_.view(z_.size(0), args.latent_size)\r\n        zD = self.decode(z_)\r\n        out = torch.sigmoid(zD)\r\n\r\n        return out, p_z_, q0_z_0, log_det\r\n","AFTER":"        kld = - torch.sum(p.log_prob(z_), -1) + torch.sum(q0.log_prob(z_0), -1) - log_det.view(-1)\r\n        self.test_params = [torch.mean(- torch.sum(p.log_prob(z_), -1)), torch.mean(torch.sum(q0.log_prob(z_0), -1)), torch.mean(log_det.view(-1)), torch.mean(kld)]\r\n\r\n        # Decode\r\n        z_ = z_.view(z_.size(0), args.latent_size)\r\n        zD = self.decode(z_)\r\n        out = torch.sigmoid(zD)\r\n\r\n        return out, kld\r\n"}