{"BEFORE":"        X = torch.fft.rfft(x, n=self.fft_length)\n        y = torch.square(torch.abs(X)) + self.eps\n","AFTER":"    def forward(self, b, a=None):\n        \"\"\"Convert waveform to spectrum.\n\n        Parameters\n        ----------\n        b : Tensor [shape=(..., M+1)]\n            Framed waveform or numerator coefficients.\n\n        a : Tensor [shape=(..., N+1)]\n            Denominator coefficients.\n\n        Returns\n        -------\n        y : Tensor [shape=(..., L\/2+1)]\n            Spectrum.\n\n        Examples\n        --------\n        >>> x = diffsptk.ramp(1, 3)\n        >>> x\n        tensor([1., 2., 3.])\n        >>> spec = diffsptk.Spectrum(fft_length=8)\n        >>> y = spec(x)\n        >>> y\n        tensor([36.0000, 25.3137,  8.0000,  2.6863,  4.0000])\n\n        \"\"\"\n        X = torch.abs(torch.fft.rfft(b, n=self.fft_length))\n\n        if a is not None:\n            K, a1 = torch.split(a, [1, a.size(-1) - 1], dim=-1)\n            a = torch.cat((K * 0 + 1, a1), dim=-1)\n            X \/= torch.abs(torch.fft.rfft(a, n=self.fft_length))\n            X *= K\n\n        y = torch.square(X) + self.eps\n"}