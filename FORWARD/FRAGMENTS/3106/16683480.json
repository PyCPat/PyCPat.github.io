{"BEFORE":"        c0 = c[..., 0]\n        c1 = (c[..., 1:] * self.ramp).flip(-1)\n\n        h = torch.empty(\n            (*(c.shape[:-1]), self.impulse_response_length), device=c.device\n        )\n        h[..., 0] = torch.exp(c0)\n        for n in range(1, self.impulse_response_length):\n            s = n - self.cep_order\n            h[..., n] = (h[..., max(0, s) : n].clone() * c1[..., max(0, -s) :]).sum(\n                -1\n            ) \/ n\n        return h\n","AFTER":"        C = torch.fft.fft(c, n=self.fft_length)\n        # Compute complex exponential.\n        r = torch.exp(C.real)\n        real = r * torch.cos(C.imag)\n        imag = r * torch.sin(C.imag)\n        S = torch.complex(real, imag)\n        h = torch.fft.ifft(S)[..., : self.impulse_response_length].real\n"}