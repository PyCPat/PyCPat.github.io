{"BEFORE":"        self.rep = self.backbone(x)\n\n        for i, head in enumerate(self.heads):\n            rep_i = self.rep.detach().clone()\n            rep_i.requires_grad = True\n            rep_i.register_hook(self._hook(i))\n\n            preds.append(head(rep_i))\n\n        return preds\n","AFTER":"        preds = []\n        out = self.backbone(x)\n\n        if isinstance(out, (list, tuple)):\n            rep, extra_out = out[0], out[1:]\n            extra_out = list(extra_out)\n        else:\n            rep = out\n            extra_out = []\n\n        if self.training:\n            self.rep = rep\n\n        for i, head in enumerate(self.heads):\n            rep_i = rep\n            if self.training:\n                rep_i = rep.detach().clone()\n                rep_i.requires_grad = True\n                rep_i.register_hook(self._hook(i))\n\n            out_i = head(rep_i)\n            if isinstance(out_i, (list, tuple)):\n                preds.append(out_i[0])\n                extra_out.append(out_i[1:])\n            else:\n                preds.append(out_i)\n\n        if len(extra_out) == 0:\n            return preds\n        else:\n            return preds, extra_out\n\n    def backward(self, losses, backbone_loss=None, **kwargs):\n"}