{"BEFORE":"        spatial_cls_tokens = repeat(self.spatial_cls_token, '1 1 d -> b f 1 d', b = b, f = f)\n        x = torch.cat((spatial_cls_tokens, x), dim = 2)\n        x += self.pos_embedding[:, :(n + 1)]\n        x = self.dropout(x)\n\n        x = rearrange(x, 'b f n d -> (b f) n d')\n\n        # attend across space\n\n        x = self.spatial_transformer(x)\n\n        x = rearrange(x, '(b f) n d -> b f n d', b = b)\n\n        # excise out the spatial cls tokens for temporal attention\n\n        x = x[:, :, 0]\n\n        # append temporal CLS tokens\n\n        temporal_cls_tokens = repeat(self.temporal_cls_token, '1 1 d-> b 1 d', b = b)\n\n        x = torch.cat((temporal_cls_tokens, x), dim = 1)\n\n        # attend across time\n\n        x = self.temporal_transformer(x)\n\n        x = x.mean(dim = 1) if self.pool == 'mean' else x[:, 0]\n","AFTER":"        x = self.to_patch_embedding(video)\n        b, f, n, _ = x.shape\n\n        x = x + self.pos_embedding\n\n        if exists(self.spatial_cls_token):\n            spatial_cls_tokens = repeat(self.spatial_cls_token, '1 1 d -> b f 1 d', b = b, f = f)\n            x = torch.cat((spatial_cls_tokens, x), dim = 2)\n\n        x = self.dropout(x)\n\n        x = rearrange(x, 'b f n d -> (b f) n d')\n\n        # attend across space\n\n        x = self.spatial_transformer(x)\n\n        x = rearrange(x, '(b f) n d -> b f n d', b = b)\n\n        # excise out the spatial cls tokens or average pool for temporal attention\n\n        x = x[:, :, 0] if not self.global_average_pool else reduce(x, 'b f n d -> b f d', 'mean')\n\n        # append temporal CLS tokens\n\n        if exists(self.temporal_cls_token):\n            temporal_cls_tokens = repeat(self.temporal_cls_token, '1 1 d-> b 1 d', b = b)\n\n            x = torch.cat((temporal_cls_tokens, x), dim = 1)\n\n        # attend across time\n\n        x = self.temporal_transformer(x)\n\n        # excise out temporal cls token or average pool\n\n        x = x[:, 0] if not self.global_average_pool else reduce(x, 'b f d -> b d', 'mean')\n"}