{"BEFORE":"            x_paired[:, :1, :1] = torch.exp(x_paired[:, :1, :1])\n            x_unpaired[:, :1] = torch.exp(x_unpaired[:, :1])\n            w_u = torch.triu(x_paired[:, 1:, 1:], diagonal=1)\n            w_l = torch.tril(x_paired[:, 1:, 1:], diagonal=-1)\n            w = w_u + w_l + torch.diag_embed(x_unpaired[:, 1:])\n            w = (w + w.transpose(1, 2)) \/ 2\n            if self.do_sampling:\n                w = w + self.gumbel_sampling(w.shape).to(w.device)\n            w = torch.exp(self.sinkhorn_logsumexp(w\/self.tau))\n            x_unpaired[:, 1:] = torch.diagonal(w, dim1=1, dim2=2)\n            x_paired[:, 1:, 1:] = torch.triu(w, diagonal=1) + torch.tril(w, diagonal=-1)\n","AFTER":"            x_paired[:, :1, :1] = torch.exp(x_paired[:, :1, :1])\n            x_unpaired[:, :1] = torch.exp(x_unpaired[:, :1])\n            w = x_paired[:, 1:, 1:]\n            w_u = torch.triu(w, diagonal=1)\n            w_l = w_u.transpose(1, 2) # torch.tril(w, diagonal=-1)\n            w = w_u + w_l + torch.diag_embed(x_unpaired[:, 1:])\n            if self.do_sampling:\n                r = self.gumbel_sampling(w.shape).to(w.device)\n                r = torch.triu(r, diagonal=0)\n                r = (r + r.transpose(1, 2)) \/ 2\n                w = w + r\n            w = torch.exp(self.sinkhorn_logsumexp(w\/self.tau))\n            x_unpaired[:, 1:] = torch.diagonal(w, dim1=1, dim2=2)\n            w_u = torch.triu(w, diagonal=1)\n            w_l = w_u.transpose(1, 2)\n            w = w_u + w_l\n            x_paired[:, 1:, 1:] = w\n"}