{"BEFORE":"        shorten_factor, n = self.shorten_factor, x.shape[-2]\n        x = self.pre_transformer(x)\n\n        x_residual = x\n        x = pad_to_multiple(x, shorten_factor, dim = -2)\n\n        if self.causal:\n            shift = shorten_factor - 1\n            x = F.pad(x, (0, 0, shift, -shift), value = 0.)\n\n        x = reduce(x, 'b (n r) d -> b n d', 'mean', r = shorten_factor)\n\n        x = self.valley_transformer(x)\n\n        x = repeat(x, 'b n d -> b (n r) d', r = shorten_factor)\n\n        x = x[:, :n]\n        x = x + x_residual\n","AFTER":"        s, b, n = self.shorten_factor, *x.shape[:2]\n\n        # top half of hourglass, pre-transformer layers\n\n        x = self.pre_transformer(x)\n\n        # pad to multiple of shortening factor, in preparation for pooling\n\n        x = pad_to_multiple(x, s, dim = -2)\n\n        # save the residual, and for \"attention resampling\" at downsample and upsample\n\n        x_residual = x.clone()\n\n        # if autoregressive, do the shift by shortening factor minus one\n\n        if self.causal:\n            shift = s - 1\n            x = F.pad(x, (0, 0, shift, -shift), value = 0.)\n\n        # naive average pool\n\n        x = reduce(x, 'b (n s) d -> b n d', 'mean', s = s)\n\n        # pre-valley \"attention resampling\" - they have the pooled token in each bucket attend to the tokens pre-pooled\n\n        if exists(self.attn_resampling_pre_valley):\n            x = self.attn_resampling_pre_valley(\n                rearrange(x, 'b n d -> (b n) () d'),\n                rearrange(x_residual, 'b (n s) d -> (b n) s d', s = s)\n            )\n\n            x = rearrange(x, '(b n) () d -> b n d', b = b)\n\n        # the \"valley\" - either a regular transformer or another hourglass\n\n        x = self.valley_transformer(x)\n\n        valley_out = x.clone()\n\n        # naive repeat upsample\n\n        x = repeat(x, 'b n d -> b (n s) d', s = s)\n\n        # add the residual\n\n        x = x + x_residual\n\n        # post-valley \"attention resampling\"\n\n        if exists(self.attn_resampling_post_valley):\n            x = self.attn_resampling_post_valley(\n                rearrange(x, 'b (n s) d -> (b n) s d', s = s),\n                rearrange(valley_out, 'b n d -> (b n) () d')\n            )\n\n            x = rearrange(x, '(b n) s d -> b (n s) d', b = b)\n\n        # bring sequence back to original length, if it were padded for pooling\n\n        x = x[:, :n]\n"}