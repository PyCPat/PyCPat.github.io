{"BEFORE":"        out = self.conv1(x)\n        out = self.trans1(self.dense1(out))\n        out = self.trans2(self.dense2(out))\n        out = self.trans3(self.dense3(out))\n        out = self.dense4(out)\n        out = F.avg_pool2d(F.relu(self.bn(out)), 4)\n        e = out.view(out.size(0), -1)\n        out = self.linear(w)\n","AFTER":"    def forward(self, x, last=False, freeze=False):\n        if freeze:\n            with torch.no_grad():\n                features = self.features(x)\n                out = F.relu(features, inplace=True)\n                e = F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)\n        else:\n            features = self.features(x)\n            out = F.relu(features, inplace=True)\n            e = F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)\n        out = self.classifier(e)\n"}