{"BEFORE":"        f = self.backbone(x)\n        f = f.view(x.size(0), -1)\n        if self.use_bottleneck:\n            f = self.bottleneck(f)\n        y = self.fc(f)\n        if keep_features:\n            return y, f\n        else:\n            return y\n\n    def forward_loss(self, x_s, x_t, labels_s):\n","AFTER":"    def forward(self, f_s, f_t, alpha=1.):\n        d_s = self.domain_discriminator(f_s, alpha)\n        d_label_s = torch.ones((f_s.size(0), 1)).cuda()\n        d_t = self.domain_discriminator(f_t, alpha)\n        d_label_t = torch.zeros((f_t.size(0), 1)).cuda()\n        return 0.5 * (self.bce(d_s, d_label_s) + self.bce(d_t, d_label_t))\n"}