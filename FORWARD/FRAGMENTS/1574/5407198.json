{"BEFORE":"    def forward(self, x, target):\n        eps = np.finfo(float).eps\n        p_t = torch.where(target == 1, x, 1-x)\n        fl = - 1 * (1 - p_t) ** self.gamma * torch.log(p_t + eps)\n        fl = torch.where(target == 1, fl * self.alpha, fl * (1 - self.alpha))\n        return self._reduce(fl)\n","AFTER":"    def forward(self, x: Tensor, target: Tensor) -> Tensor:\n        mask = target == self.ignore_index\n        x = self._process_preds(x)\n        num_classes = x.shape[-1]\n        target = self._process_target(target, num_classes)\n        pt = self._calc_pt(target, x, mask)\n        focal = 1 - pt\n        nll = -torch.log(self.eps + pt)\n        nll = nll.masked_fill(mask, 0)\n        loss = (focal ** self.gamma) * nll\n        return self._reduce(loss)\n"}