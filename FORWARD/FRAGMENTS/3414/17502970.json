{"BEFORE":"        inters = [x[-1]]                                                        # P7in\n        for i, conv in enumerate(self.inter_convs):\n            out = F.interpolate(inters[-1], scale_factor=2., mode=\"nearest\")    # resize(P7td)\n            out = self.fuse([x[-2-i], out])                                     # P6in + resize(P7td)\n            inters.append(conv(out))                                            # P6td = conv(P6in + resize(P7td))\n            \n        # bottom-up\n        inters = inters[::-1]           # feature maps from bottom to top, same order as input x\n        outputs = [inters[0]]\n        for i, conv in enumerate(self.output_convs):\n            out = F.interpolate(outputs[-1], scale_factor=0.5, mode=\"nearest\")  # resize(P3td)\n            if i < len(self.output_convs) - 1:\n                out = self.fuse([x[i+1], inters[i+1], out])                     # P4in + P4td + resize(P3td)\n            else:\n                out = self.fuse([inters[i+1], out])                             # P7in + resize(P6td)\n            outputs.append(conv(out))                                           # P4out = conv(P4in + P4td + resize(P3td))\n\n        return outputs\n","AFTER":"        tds = [None] * self.num_levels\n        tds[-1] = x[-1]\n        for i in range(self.num_levels - 2, -1 , -1):\n            tds[i] = self.td_fuses[i]([x[i], self.upsample(tds[i+1])])      # P6td = conv(P6in + resize(P7td))\n        \n        # bottom-up\n        outs = [None] * self.num_levels\n        outs[0] = tds[0]\n        for i in range(self.num_levels - 2):\n            outs[i+1] = self.out_fuses[i]([x[i+1], tds[i+1], self.downsample(tds[i])])  # P4in + P4td + resize(P3td)\n        outs[-1] = self.out_fuses[-1]([x[-1], self.downsample(tds[-2])])                # P7in + resize(P6td)\n\n        return outs\n"}