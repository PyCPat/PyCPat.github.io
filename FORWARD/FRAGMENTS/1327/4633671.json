{"BEFORE":"        k = x[batch_size:]\n        \n        # embed queries\n        emb_q = self.features(q).squeeze()\n        out_q = self.projection_head(emb_q)\n\n        # embed keys\n        with torch.no_grad():\n\n            # shuffle for batchnorm\n            idx_shuffle = torch.randperm(k.shape[0]).to(x.device)\n            k = k[idx_shuffle]\n\n            emb_k = self.key_features(k).squeeze()\n            out_k = self.key_projection_head(emb_k).detach()\n        \n            # unshuffle for batchnorm\n            idx_unshuffle = torch.argsort(idx_shuffle).to(x.device)\n            out_k = out_k[idx_unshuffle]\n","AFTER":"        k = x[batch_size:]\n        \n        # embed queries\n        emb_q = self.backbone(q).squeeze()\n        out_q = self.projection_head(emb_q)\n\n        # embed keys\n        with torch.no_grad():\n\n            # shuffle for batchnorm\n            if self.batch_shuffle:\n                k, shuffle = self._batch_shuffle(k)\n\n            emb_k = self.momentum_backbone(k).squeeze()\n            out_k = self.momentum_projection_head(emb_k).detach()\n        \n            # unshuffle for batchnorm\n            if self.batch_shuffle:\n                out_k = self._batch_unshuffle(out_k, shuffle)\n\n        return torch.cat([out_q, out_k], axis=0)\n"}