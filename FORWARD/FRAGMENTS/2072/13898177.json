{"BEFORE":"        if type(observation) is dict:\n            observation = torch.cat([value for _, value in observation.items()], dim=-1)\n\n        # detach prevents gradient flowing into encoder.\n        obs_v = obs_pi = observation\n        if self.detach_critic:\n            obs_v = obs_v.detach()\n        if self.detach_policy:\n            obs_pi = obs_pi.detach()\n\n        value = self.critic(obs_v)\n        policy = self.actor(obs_pi)\n        return {'policy': policy, 'value': value}\n","AFTER":"        img = observation.pop('img')\n        conv_features = self.cnn(img)\n        obs_features = torch.cat([value for _, value in observation.items()], dim=-1)\n        features_emb = self.features_embedding(obs_features)\n        result = torch.cat([conv_features, features_emb], dim=-1)\n        return result\n"}