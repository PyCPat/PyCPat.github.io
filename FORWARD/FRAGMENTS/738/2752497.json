{"BEFORE":"        h = self.heads\n        qkv = self.to_qkv(x).chunk(3, dim=-1)\n\n        # def rearrange(t):\n        #     B, N, _ = t.shape\n        #     return t.reshape(B, N, h, -1).permute(0, 2, 1, 3)\n        #\n        # q, k, v = map(rearrange, qkv)\n\n        q, k, v = map(lambda t: rearrange(t, \"b n (h d) -> b h n d\", h=h), qkv)\n\n        dots = einsum(\"b h i d, b h j d -> b h i j\", q, k) * self.scale\n\n        attn = self.attend(dots)\n\n        out = einsum(\"b h i j, b h j d -> b h i d\", attn, v)\n","AFTER":"        dots = torch.matmul(q, k.transpose(-1, -2)) * self.scale\n\n        attn = self.attend(dots)\n\n        out = torch.matmul(attn, v)\n"}