{"BEFORE":"        self, x: torch.Tensor, lens: torch.Tensor\n    ) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"Forward method\n        Args:\n            x : Signal to be processed, of shape (batch, features, time)\n            lens : Lenghts of each element in the batch of x, with shape (batch)\n        Returns:\n            Both the signal processed by the convolution and the resulting lengths\n        \"\"\"\n        if self.use_mask:\n            x = self.mask_fill(x, lens)\n        out = self.conv(x)\n        return out, self.get_seq_len(lens)\n","AFTER":"        if self.training:\n            mask = x == 0.0\n            result = self.layer(x)\n            return torch.masked_fill(result, mask, 0.0)\n        else:\n            return self.layer(x)\n\n\ndef _get_conv_bn_layer(\n"}