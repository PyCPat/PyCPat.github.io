{"BEFORE":"        residuals = encoder_y.flip(dims=(-1,))\n        encoder_x_t = encoder_x_t.flip(dims=(-1,))\n        encoder_mask = encoder_mask.flip(dims=(-1,))\n\n        level = encoder_y[:, -1:]  # Level with Naive1\n        block_forecasts = [level.repeat(1, encoder_y.size(1), 1)]\n\n        forecast = level\n        for block in self.blocks:\n            backcast, block_forecast = block(\n                encoder_y=residuals, encoder_x_t=encoder_x_t, decoder_x_t=decoder_x_t, x_s=x_s\n            )\n            residuals = (residuals - backcast) * encoder_mask\n            forecast = forecast + block_forecast\n            block_forecasts.append(block_forecast)\n\n        # (n_batch, n_blocks, n_t)\n        block_forecasts = torch.stack(block_forecasts)\n        block_forecasts = block_forecasts.permute(1, 0, 2)\n\n        return forecast, block_forecasts\n","AFTER":"            encoder_y  # .flip(dims=(1,))  # todo: check if flip is required or should be rather replaced by scatter\n        )\n        # encoder_x_t = encoder_x_t.flip(dims=(-1,))\n        # encoder_mask = encoder_mask.flip(dims=(-1,))\n        encoder_mask = encoder_mask.unsqueeze(-1)\n\n        level = encoder_y[:, -1:].repeat(1, decoder_x_t.size(1), 1)  # Level with Naive1\n        block_forecasts = [level]\n        block_backcasts = [encoder_y[:, -1:].repeat(1, encoder_y.size(1), 1)]\n\n        forecast = level\n        for block in self.blocks:\n            block_backcast, block_forecast = block(\n                encoder_y=residuals, encoder_x_t=encoder_x_t, decoder_x_t=decoder_x_t, x_s=x_s\n            )\n            residuals = (residuals - block_backcast) * encoder_mask\n\n            forecast = forecast + block_forecast\n            block_forecasts.append(block_forecast)\n            block_backcasts.append(block_backcast)\n\n        # (n_batch, n_t, n_outputs, n_blocks)\n        block_forecasts = torch.stack(block_forecasts, dim=-1)\n        block_backcasts = torch.stack(block_backcasts, dim=-1)\n        backcast = residuals\n\n        return forecast, backcast, block_forecasts, block_backcasts\n"}