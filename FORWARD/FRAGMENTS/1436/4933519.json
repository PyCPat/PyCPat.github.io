{"BEFORE":"        smallQ = self._reverses[-1](self._quantizers[-1](codes[-1]))\n        for i in range(self._levels - 1, -1, -1):\n            q = self._scatters[i](self._quantizers[i](codes[i]))\n            smallQ = self._reverses[i](q + smallQ)\n        return self._decoder(smallQ).tanh()\n","AFTER":"    def forward(self, codes: List[torch.LongTensor], cAndPadding: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n        smallQ = self._reverses0(self._quantizers0(codes[0]))\n        for i, (scatter, quantizer, reverse) in enumerate(zip(self._scatters, self._quantizers, self._reverses)):\n            code = codes[i + 1]\n            q = scatter(quantizer(code))\n            smallQ = reverse(q + smallQ)\n\n        return self._decoder(smallQ).tanh(), cAndPadding\n"}