{"BEFORE":"\t\tx = F.dropout(F.leaky_relu(self.batchnorm1(self.conv1(x, edge_index, edge_weight)), negative_slope=0.01), p=0.2, training=self.training)\n\t\tx = F.dropout(F.leaky_relu(self.batchnorm2(self.conv2(x, edge_index, edge_weight)), negative_slope=0.01), p=0.2, training=self.training)\n\t\tx = F.dropout(F.leaky_relu(self.batchnorm3(self.conv3(x, edge_index, edge_weight)), negative_slope=0.01), p=0.4, training=self.training)\n\t\tx = F.dropout(F.leaky_relu(self.batchnorm4(self.conv4(x, edge_index, edge_weight)), negative_slope=0.01), p=0.4, training=self.training)\n\t\tx = F.dropout(F.leaky_relu(self.batchnorm5(self.conv5(x, edge_index, edge_weight)), negative_slope=0.01), p=0.5, training=self.training)\n\t\t\n\t\tout = global_mean_pool(x, batch=batch)\n\t\tif return_graph_embedding:\n\t\t\treturn out\n\t\t\n\t\tout = F.dropout(F.leaky_relu(self.fc_block1(out), negative_slope=0.01), p=0.5, training=self.training)\n\t\tout = F.dropout(F.leaky_relu(self.fc_block2(out), negative_slope=0.01), p=0.5, training=self.training)\n","AFTER":"        x = F.leaky_relu(self.conv1(x, edge_index, edge_weight))\n\n        x = F.leaky_relu(self.conv2(x, edge_index, edge_weight))\n\n        x = F.leaky_relu(self.conv3(x, edge_index, edge_weight))\n        x = F.leaky_relu(self.conv4_bn(self.conv4(x, edge_index, edge_weight)))\n        out = global_add_pool(x, batch=batch)\n        if return_graph_embedding:\n            return out\n\n        out = F.leaky_relu(self.fc_block1(out), negative_slope=0.01)\n        out = F.dropout(out, p = 0.2, training=self.training)\n        out = F.leaky_relu(self.fc_block2(out), negative_slope=0.01)\n"}