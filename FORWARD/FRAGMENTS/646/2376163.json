{"BEFORE":"        bsz, encoder_dim, _ = keypoint_desc.size()\n        batch_size = bsz \/ self.window_size\n        _, _, height, width = desc_dense.size()\n\n        src_desc = keypoint_desc[::self.window_size]\n        src_desc = F.normalize(src_desc, dim=1)\n\n        tgt_desc_dense = desc_dense[1::self.window_size] # B x C x H x W\n        tgt_desc_dense = F.normalize(tgt_desc_dense.view(batch_size, encoder_dim, -1), dim=1) # B x C x HW\n\n        match_vals = torch.matmul(src_desc.transpose(2, 1).contiguous(), tgt_desc_dense) # B x N x HW\n        soft_match_vals = F.softmax(match_vals \/ self.softmax_temp, dim=2)  # B x N x HW\n\n        v_coord, u_coord = torch.meshgrid([torch.arange(0, height), torch.arange(0, width)])\n        v_coord = v_coord.reshape(height * width).float()  # HW\n        u_coord = u_coord.reshape(height * width).float()\n        coords = torch.stack((u_coord, v_coord), dim=1)  # HW x 2\n        tgt_coords_dense = coords.unsqueeze(0).expand(batch_size, height * width, 2) # B x HW x 2\n        if config['gpuid'] != 'cpu':\n            tgt_coords_dense = tgt_coords_dense.cuda()\n\n        pseudo_coords = torch.matmul(tgt_coords_dense.transpose(2, 1).contiguous(),\n            soft_match_vals.transpose(2, 1).contiguous()).transpose(2, 1).contiguous()  # BxNx2\n\n        # GET SCORES for pseudo point locations\n        n_points = keypoint_scores.size(2)\n        pseudo_norm = normalize_coords(pseudo_coords, batch_size, height, width).unsqueeze(1)   # B x 1 x N x 2\n        tgt_scores_dense = scores_dense[1::self.window_size]\n        pseudo_scores = F.grid_sample(tgt_scores_dense, pseudo_norm, mode='bilinear')           # B x 1 x 1 x N\n        pseduo_scores = pseduo_scores.reshape(batch_size, 1, n_points)                          # B x 1 x N\n        # GET DESCRIPTORS for pseduo point locations\n        pseudo_desc = F.grid_sample(tgt_desc_dense, pseudo_norm, mode='bilinear')               # B x C x 1 x N\n        pseudo_desc = pseudo_desc.reshape(batch_size, channels, keypoints.size(1))              # B x C x N\n\n        desc_match_score = torch.sum(src_desc * pseudo_desc, dim=1, keepdim=True) \/ float(src_desc.size(1)) # Bx1xN = BxCxN * BxCxN\n","AFTER":"        bsz, encoder_dim, n_points = keypoint_desc.size()\n        batch_size = bsz \/ self.window_size\n        _, _, height, width = desc_dense.size()\n\n        src_desc = keypoint_desc[::self.window_size] # B x C x N\n        src_desc = F.normalize(src_desc, dim=1)\n\n        tgt_desc_dense = desc_dense[1::self.window_size] # B x C x H x W\n        tgt_desc_dense = F.normalize(tgt_desc_dense.view(batch_size, encoder_dim, -1), dim=1) # B x C x HW\n\n        match_vals = torch.matmul(src_desc.transpose(2, 1).contiguous(), tgt_desc_dense) # B x N x HW\n        soft_match_vals = F.softmax(match_vals \/ self.softmax_temp, dim=2)  # B x N x HW\n\n        v_coord, u_coord = torch.meshgrid([torch.arange(0, height), torch.arange(0, width)])\n        v_coord = v_coord.reshape(height * width).float()  # HW\n        u_coord = u_coord.reshape(height * width).float()\n        coords = torch.stack((u_coord, v_coord), dim=1)  # HW x 2\n        tgt_coords_dense = coords.unsqueeze(0).expand(batch_size, height * width, 2).to(self.gpuid) # B x HW x 2\n\n        pseudo_coords = torch.matmul(tgt_coords_dense.transpose(2, 1).contiguous(),\n            soft_match_vals.transpose(2, 1).contiguous()).transpose(2, 1).contiguous()  # BxNx2\n\n        # GET SCORES for pseudo point locations\n        pseudo_norm = normalize_coords(pseudo_coords, height, width).unsqueeze(1)               # B x 1 x N x 2\n        tgt_scores_dense = scores_dense[1::self.window_size]\n        pseudo_scores = F.grid_sample(tgt_scores_dense, pseudo_norm, mode='bilinear')           # B x 1 x 1 x N\n        pseduo_scores = pseduo_scores.reshape(batch_size, 1, n_points)                          # B x 1 x N\n        # GET DESCRIPTORS for pseduo point locations\n        pseudo_desc = F.grid_sample(tgt_desc_dense, pseudo_norm, mode='bilinear')               # B x C x 1 x N\n        pseudo_desc = pseudo_desc.reshape(batch_size, channels, n_points)                       # B x C x N\n\n        desc_match_score = torch.sum(src_desc * pseudo_desc, dim=1, keepdim=True) \/ float(encoder_dim) # Bx1xN\n"}