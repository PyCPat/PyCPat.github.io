{"BEFORE":"    def forward(self, input, encoder_outs=None):\r\n        # im branch\r\n        x = input\r\n        for i, up_conv in enumerate(self.up_convs):\r\n            before_pool = None\r\n            if encoder_outs is not None:\r\n                before_pool = encoder_outs[-(i+2)]\r\n            x = up_conv(x, before_pool,se=self.im_atts[i])\r\n        x_im = x\r\n\r\n        x = input        \r\n        for i, up_conv in enumerate(self.up_convs):\r\n            before_pool = None\r\n            if encoder_outs is not None:\r\n                before_pool = encoder_outs[-(i+2)]\r\n            x = up_conv(x, before_pool, se = self.mask_atts[i])\r\n        x_mask = x\r\n\r\n        x = input\r\n        for i, up_conv in enumerate(self.up_convs):\r\n            before_pool = None\r\n            if encoder_outs is not None:\r\n                before_pool = encoder_outs[-(i+2)]\r\n            x = up_conv(x, before_pool, se=self.wm_atts[i])\r\n        x_wm = x\r\n\r\n        return x_im,x_mask,x_wm\r\n","AFTER":"        im_encoder_outs = []\r\n        mask_encoder_outs = []\r\n        x = input\r\n        for i, d_conv in enumerate(self.down_convs):\r\n            # d_conv, attn = nets\r\n            x, before_pool = d_conv(x)\r\n            im_encoder_outs.append(before_pool)\r\n            mask_encoder_outs.append(before_pool)\r\n        x_im = x\r\n        x_mask = x\r\n\r\n        # Decoder convs\r\n        x = x_im\r\n        for i, nets in enumerate(zip(self.up_convs, self.up_im_atts)):\r\n            up_conv, attn = nets\r\n            before_pool = None\r\n            if im_encoder_outs is not None:\r\n                before_pool = im_encoder_outs[-(i+2)]\r\n            x = up_conv(x, before_pool,se=attn)\r\n        x_im = x\r\n\r\n        x = x_mask       \r\n        for i, nets in enumerate(zip(self.up_convs, self.up_mask_atts)):\r\n            up_conv, attn = nets\r\n            before_pool = None\r\n            if mask_encoder_outs is not None:\r\n                before_pool = mask_encoder_outs[-(i+2)]\r\n            x = up_conv(x, before_pool, se = attn)\r\n        x_mask = x\r\n\r\n        return x_im, x_mask\r\n"}