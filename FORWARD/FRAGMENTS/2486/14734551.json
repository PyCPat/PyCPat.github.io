{"BEFORE":"        assert x.dim() == 4, 'expected 4D input'\n        x_type = x.dtype\n        running_var = self.running_var.view(1, -1, 1, 1)\n        if self.training:\n            var = x.var(dim=(0, 2, 3), unbiased=False, keepdim=True)\n            n = x.numel() \/ x.shape[1]\n            running_var = var.detach() * self.momentum * (n \/ (n - 1)) + running_var * (1 - self.momentum)\n            self.running_var.copy_(running_var.view(self.running_var.shape))\n        else:\n            var = running_var\n\n        if self.v is not None:\n","AFTER":"        _assert(x.dim() == 4, 'expected 4D input')\n        x_type = x.dtype\n        if self.v is not None:\n            running_var = self.running_var.view(1, -1, 1, 1)\n            if self.training:\n                var = x.var(dim=(0, 2, 3), unbiased=False, keepdim=True)\n                n = x.numel() \/ x.shape[1]\n                running_var = var.detach() * self.momentum * (n \/ (n - 1)) + running_var * (1 - self.momentum)\n                self.running_var.copy_(running_var.view(self.running_var.shape))\n            else:\n                var = running_var\n            v = self.v.to(dtype=x_type).reshape(1, -1, 1, 1)\n"}