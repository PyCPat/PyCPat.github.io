{"BEFORE":"    def forward(self, input_: Tuple[List[Tensor], Optional[Tensor]]):\n        # type: (Tuple[List[Tensor], Optional[Tensor]]) -> Tuple[List[Tensor], Optional[Tensor]] # nopep8\n        lens_orig = None\n        xs = input_[0]\n        if len(input_) == 2:\n            xs, lens_orig = input_\n\n        # compute forward convolutions\n        out = xs[-1]\n\n        lens = lens_orig\n        for i, l in enumerate(self.mconv):\n            # if we're doing masked convolutions, we need to pass in and\n            # possibly update the sequence lengths\n            # if (i % 4) == 0 and self.conv_mask:\n            if isinstance(l, MaskedConv1d):\n                out, lens = l(out, lens)\n            else:\n                out = l(out)\n\n        # compute the residuals\n        if self.res is not None:\n            for i, layer in enumerate(self.res):\n                res_out = xs[i]\n                for j, res_layer in enumerate(layer):\n                    if isinstance(res_layer, MaskedConv1d):\n                        res_out, _ = res_layer(res_out, lens_orig)\n                    else:\n                        res_out = res_layer(res_out)\n\n                if self.residual_mode == \"add\" or self.residual_mode == \"stride_add\":\n                    out = out + res_out\n                else:\n                    out = torch.max(out, res_out)\n\n        # compute the output\n        out = self.mout(out)\n        if self.res is not None and self.dense_residual:\n            return xs + [out], lens\n\n        return [out], lens\n","AFTER":"    def forward(self, xs: List[torch.Tensor]):\n        # compute forward convolutions\n        out = xs[-1]\n        out = self.mconv(out)\n\n        # compute the residuals\n        if self.res is not None:\n            for i, layer in enumerate(self.res):\n                res_out = layer(xs[i])\n                if self.residual_mode == \"add\" or self.residual_mode == \"stride_add\":\n                    out = out + res_out\n                else:\n                    out = torch.max(out, res_out)\n\n        # compute the output\n        out = self.mout(out)\n        if self.res is not None and self.dense_residual:\n            return xs + [out]\n\n        return [out]\n"}