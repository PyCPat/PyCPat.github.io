{"BEFORE":"    def forward(self, image):\n        \"\"\"\n        Args:\n            image(tensor): batch x height x width\n        Returns:\n            Tensor:  batch x h*w\/64 x h x w\n        \"\"\"\n        height, _ = image.shape[1:3]\n        batch_size = image.shape[0]\n        image_reshaped = image.view(batch_size, height \/\/ self.k, self.k, -1, self.k)\n        image_transposed = image_reshaped.permute(0, 1, 3, 2, 4)\n        return image_transposed.contiguous().view(batch_size, -1, self.k, self.k)\n","AFTER":"    def forward(self, x: torch.Tensor, factor: torch.Tensor) -> torch.Tensor:\n        if isinstance(factor, (int, float)):\n            out = x * (self.c_table * factor)\n        else:\n            b = factor.size(0)\n            table = self.c_table.expand(b, 1, 8, 8) * factor.view(b, 1, 1, 1)\n            out = x * table\n\n        return out\n"}