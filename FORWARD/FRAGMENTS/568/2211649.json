{"BEFORE":"    def forward(self, x):\r\n        base_shape = x.shape  # x -> B x T x (H x W) x C\r\n        if self.pos_encodings:\r\n            x = x + self.spatial_positional_encoding + self.temporal_positional_encoding[:, :x.shape[1]]\r\n        if self.spatial_first:\r\n            x = self._spatial_attn(x, base_shape)\r\n            x = self._temporal_attn(x, base_shape)\r\n        else:\r\n            x = self._temporal_attn(x, base_shape)\r\n            x = self._spatial_attn(x, base_shape)\r\n        return x\r\n","AFTER":"    def forward(self, x, s=None, encoder=True, i=None):\r\n        res = x\r\n        if s is not None:\r\n            x = torch.cat([x, s], dim=1)\r\n        x = res + self.resblock(x)\r\n        # x = self.l1(x)\r\n        # x = self.l2(x)\r\n        # x = self.l3(x)\r\n        # x = self.ref(x)\r\n        # x = self.l5(x)\r\n        # x = self.l6(x)\r\n        # x = self.l7(x)\r\n        # x += res\r\n        if self.scaler is not None:\r\n            if encoder:\r\n                x = x.permute(0, 2, 1, 3, 4)\r\n                x = self.scaler(x)\r\n                x = x.permute(0, 2, 1, 3, 4)\r\n            else:\r\n                x = self.scaler(x)\r\n                if i == 1:\r\n                    x = x[:, :, 1:]\r\n        return x\r\n"}