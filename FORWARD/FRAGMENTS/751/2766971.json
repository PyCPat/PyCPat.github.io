{"BEFORE":"        priv_obses[pf_mask] = self.lut_range_idx_2_priv_o_pf[range_idxs][pf_mask]\n\n        if self.args.use_pre_layers:\n            _board_obs = pub_obses[:, self.board_start:self.board_stop]\n            _hist_and_state_obs = torch.cat([\n                pub_obses[:, :self.board_start],\n                pub_obses[:, self.board_stop:]\n            ],\n                dim=-1\n            )\n\n            # Add dimension for conv1d's channels\n            _board_obs.unsqueeze_(1)\n            priv_obses.unsqueeze_(1)\n            _hist_and_state_obs.unsqueeze_(1)\n            y = self._feed_through_pre_layers(board_obs=_board_obs, priv_obs=priv_obses,\n                                              hist_and_state_obs=_hist_and_state_obs)\n\n        else:\n            y = torch.cat((priv_obses, pub_obses,), dim=-1)\n\n        final = self._relu(self.final_cn_1(y))\n        final = final.flatten(1)\n","AFTER":"        priv_obses[pf_mask] = self.lut_range_idx_2_priv_o_pf[range_idxs][pf_mask]\n\n        if self.args.use_pre_layers:\n            priv_obses = torch.reshape(priv_obses, (-1, 2, 17))\n            _board_obs = pub_obses[:, self.board_start:self.board_stop]\n            _board_obs = torch.reshape(_board_obs, (-1, 5, 17))\n            _card_obs = torch.cat((priv_obses, _board_obs), dim=1)\n            _hist_and_state_obs = torch.cat([\n                pub_obses[:, :self.board_start],\n                pub_obses[:, self.board_stop:]\n            ],\n                dim=-1\n            )\n            _hist_and_state_obs.unsqueeze_(1)\n            _card_obs = nn.ZeroPad2d((0, 7, 0, 0))(_card_obs)\n            _card_obs = torch.cat((_card_obs, _hist_and_state_obs), dim=1)\n            # Add dimension for convolution channels\n            _card_obs.unsqueeze_(1)\n            y = self._feed_through_pre_layers(card_obs=_card_obs,\n                                              hist_and_state_obs=_hist_and_state_obs)\n\n        else:\n            raise ValueError('CNN requires pre_layers to be enabled')\n\n        final = y.flatten(1)\n"}