{"BEFORE":"    def forward(self, input, target):\n        \"\"\"\n        input: [N, C]\n        target: [N, ]\n        \"\"\"\n        logpt = F.log_softmax(input, dim=1)\n        pt = torch.exp(logpt)\n        logpt = (1-pt)**self.gamma * logpt\n        loss = F.nll_loss(logpt, target, self.weight,ignore_index=self.ignore_index)\n","AFTER":"    def forward(self, inputs: torch.Tensor, targets: torch.Tensor):\n        ce_loss = F.cross_entropy(inputs, targets, weight=self.weight, reduction=\"none\")\n        p_t = torch.exp(-ce_loss)\n        loss = (1 - p_t)**self.gamma * ce_loss\n        if self.reduction == \"mean\":\n            loss = loss.mean()\n        elif self.reduction == \"sum\":\n            loss = loss.sum()\n        return loss\n"}