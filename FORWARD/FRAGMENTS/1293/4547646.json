{"BEFORE":"        pos_head, pos_rel, pos_tail = pos_exmpl\n        neg_head, neg_rel, neg_tail = neg_exmpl\n\n        pos_head_emb = self.entities_embeddings(pos_head)\n        pos_rel_emb = self.relation_embeddings(pos_rel)\n        pos_tail_emb = self.entities_embeddings(pos_tail)\n        pos_normal_emb = self.normal_vector_embeddings(pos_rel)\n\n        neg_head_emb = self.entities_embeddings(neg_head)\n        neg_rel_emb = self.relation_embeddings(neg_rel)\n        neg_tail_emb = self.entities_embeddings(neg_tail)\n","AFTER":"        norms = torch.norm(self.normal_vector_embeddings.weight, p=2, dim=1).data\n        self.self.normal_vector_embeddings.weight.data = self.self.normal_vector_embeddings.weight.data.div(\n            norms.view(self.num_relations, 1).expand_as(self.self.normal_vector_embeddings.weight))\n\n        # TODO: Check indexing\n        pos_heads, pos_rels, pos_tails = batch_positives\n        neg_head, neg_rel, neg_tail = batch_negatives\n\n        pos_head_emb = self.entity_embeddings(pos_heads)\n        pos_rel_emb = self.relation_embeddings(pos_rels)\n        pos_tail_emb = self.entity_embeddings(pos_tails)\n        pos_normal_emb = self.normal_vector_embeddings(pos_rels)\n\n        neg_head_emb = self.entity_embeddings(neg_head)\n        neg_rel_emb = self.relation_embeddings(neg_rel)\n        neg_tail_emb = self.entity_embeddings(neg_tail)\n"}