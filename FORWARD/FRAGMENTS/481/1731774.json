{"BEFORE":"        return emb[None, :, :orig_ch].repeat(batch_size, 1, 1)\n","AFTER":"        if self.cached_penc is not None and self.cached_penc.shape == tensor.shape:\n            return self.cached_penc\n\n        self.cached_penc = None\n        batch_size, x, orig_ch = tensor.shape\n        pos_x = torch.arange(x, device=tensor.device).type(self.inv_freq.type())\n        sin_inp_x = torch.einsum(\"i,j->ij\", pos_x, self.inv_freq)\n        emb_x = torch.cat((sin_inp_x.sin(), sin_inp_x.cos()), dim=-1)\n        emb = torch.zeros((x, self.channels), device=tensor.device).type(tensor.type())\n        emb[:, : self.channels] = emb_x\n\n        self.cached_penc = emb[None, :, :orig_ch].repeat(batch_size, 1, 1)\n        return self.cached_penc\n"}