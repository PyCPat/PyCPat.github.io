{"BEFORE":"        with autocast(enabled = self.amp):\n            loss = self.diffusion_prior(*args, **kwargs)\n            scaled_loss = self.scaler.scale(loss \/ divisor)\n            scaled_loss.backward()\n        return loss.item()\n","AFTER":"        x,\n        *args,\n        max_batch_size = None,\n        **kwargs\n    ):\n        batch_size = x.shape[0]\n        total_samples = 0\n        total_loss = 0.\n\n        for chunk_size, (chunked_args, chunked_kwargs) in split_args_and_kwargs(x, *args, split_size = max_batch_size, **kwargs):\n            with autocast(enabled = self.amp):\n                loss = self.diffusion_prior(*chunked_args, **chunked_kwargs)\n\n                total_loss += loss.item() * chunk_size\n                total_samples += chunk_size\n\n                self.scaler.scale(loss * (chunk_size \/ batch_size)).backward()\n\n        return total_loss \/ total_samples\n"}