{"BEFORE":"        queries = torch.stack(queries).reshape(2, b, t, h, -1)\n\n        dots = torch.einsum('pbthd,hnpd->bhtpn', queries, self.keys)\n        scores, indices = dots.topk(k=self.topk, dim=-1)\n        scores, indices = map(lambda x: x.chunk(2, dim=2), (scores, indices))\n\n        shape = (b, h, t, self.topk ** 2)\n\n        all_scores = (\n            scores[0][..., :, None] +\n            scores[1][..., None, :]\n        ).reshape(*shape)\n\n        all_indices = (\n            indices[0][..., :, None] * self.num_keys +\n            indices[1][..., None, :]\n        ).reshape(*shape)\n\n        final_topk, final_indices = all_scores.topk(self.topk, dim=-1)\n        value_indices = all_indices.gather(-1, final_indices)\n\n        attn = final_topk.softmax(dim=-1)\n\n        values = self.values[None, :, None, :, :].expand(b, -1, t, -1, -1)\n        expanded_indices = expand_dim(value_indices, dim=4, k=values.shape[-1])\n        selected_values = values.gather(-2, expanded_indices)\n","AFTER":"        d_head = e \/\/ h\n\n        queries = self.to_queries(x).chunk(2, dim=-1)\n        queries = torch.stack(queries).reshape(2, b, t, h, -1)\n\n        keys, values = map(lambda x: expand_dim(x, 0, h), (self.keys, self.values))\n\n\n        dots = torch.einsum('pbthd,hnpd->bhtpn', queries, keys)\n        scores, indices = dots.topk(k=self.topk, dim=-1)\n        scores, indices = map(lambda x: x.chunk(2, dim=2), (scores, indices))\n\n        shape = (b, h, t, self.topk ** 2)\n\n        all_scores = (\n            scores[0][..., :, None] +\n            scores[1][..., None, :]\n        ).reshape(*shape)\n\n        all_indices = (\n            indices[0][..., :, None] * self.num_keys +\n            indices[1][..., None, :]\n        ).reshape(*shape)\n\n        final_topk, final_indices = all_scores.topk(self.topk, dim=-1)\n        value_indices = all_indices.gather(-1, final_indices)\n\n        attn = final_topk.softmax(dim=-1)\n\n        expanded_values = values[None, :, None, :, :].expand(b, -1, t, -1, -1)\n        expanded_indices = expand_dim(value_indices, dim=4, k=d_head, unsqueeze=True)\n        selected_values = expanded_values.gather(-2, expanded_indices)\n"}