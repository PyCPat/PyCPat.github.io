{"BEFORE":"        need_transpose = not self.channel_last\n\n        if need_transpose:\n            x = rearrange(x, 'b n d -> b d n')\n\n        x = self.project_in(x)\n\n        quantize, embed_ind = self._codebook(x)\n\n        if self.training:\n            quantize = x + (quantize - x).detach()\n\n        loss = torch.tensor([0.], device = device, requires_grad = self.training)\n\n        if self.training:\n            if self.commitment_weight > 0:\n                commit_loss = F.mse_loss(quantize.detach(), x)\n                loss = loss + commit_loss * self.commitment_weight\n\n            if self.orthogonal_reg_weight > 0:\n                orthogonal_reg_loss = orthgonal_loss_fn(self.codebook)\n                loss = loss + orthogonal_reg_loss * self.orthogonal_reg_weight\n\n        quantize = self.project_out(quantize)\n\n        if need_transpose:\n            quantize = rearrange(quantize, 'b d n -> b n d')\n\n        return quantize, embed_ind, loss\n","AFTER":"        shape, device, codebook_size = x.shape, x.device, self.codebook_size\n\n        need_transpose = not self.channel_last and not self.accept_image_fmap\n\n        if self.accept_image_fmap:\n            height, width = x.shape[-2:]\n            x = rearrange(x, 'b c h w -> b (h w) c')\n\n        if need_transpose:\n            x = rearrange(x, 'b d n -> b n d')\n\n        x = self.project_in(x)\n\n        quantize, embed_ind = self._codebook(x)\n\n        if self.training:\n            quantize = x + (quantize - x).detach()\n\n        loss = torch.tensor([0.], device = device, requires_grad = self.training)\n\n        if self.training:\n            if self.commitment_weight > 0:\n                commit_loss = F.mse_loss(quantize.detach(), x)\n                loss = loss + commit_loss * self.commitment_weight\n\n            if self.orthogonal_reg_weight > 0:\n                orthogonal_reg_loss = orthgonal_loss_fn(self.codebook)\n                loss = loss + orthogonal_reg_loss * self.orthogonal_reg_weight\n\n        quantize = self.project_out(quantize)\n\n        if need_transpose:\n            quantize = rearrange(quantize, 'b n d -> b d n')\n\n        if self.accept_image_fmap:\n            quantize = rearrange(quantize, 'b (h w) c -> b c h w', h = height, w = width)\n            embed_ind = rearrange(embed_ind, 'b (h w) -> b h w', h = height, w = width)\n\n        return quantize, embed_ind, loss\n"}