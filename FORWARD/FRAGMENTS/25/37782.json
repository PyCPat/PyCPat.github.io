{"BEFORE":"        img_feaure = self.cnn(instance_centric_img) # (N, 16)\n        _, T_1, _ = trajectories_past.shape\n        _, T_2, _ = trajectories_future.shape\n\n\n\n        # img (N, 3, 400, 400) -> CNN -> (N, 16) -> (N, 10, 16)\n        # trajectory_history: (N, 10, 3)\n\n        # transformer_input: (N, 10, 19)\n\n\n\n        concat_aligned_img_feature = img_feaure[:, None, :].repeat(1, T_1, 1)\n","AFTER":"        N, T_1, _ = trajectories_past.shape\n        _, T_2, _ = trajectories_future.shape\n\n        concat_aligned_img_feature = torch.empty(\n            size=(N, T_1, CNN_OUTPUT_FEATURE_SIZE))\n\n        # img (N, T_1, 3, 100, 100) -> CNN -> (N, T_1, 16)\n        for t in range(T_1):\n            concat_aligned_img_feature[:, t, :] = self.cnn(images_past[:, t, :, :, :])\n\n\n        # trajectory_history: (N, 10, 3)\n\n        # transformer_input: (N, 10, 19)\n\n        concatenated_features = torch.cat((trajectories_past, concat_aligned_img_feature), dim=2) # (N, T_1, 3 + 16)\n"}