{"BEFORE":"        if self.dropout:\n            h = self.dropout(h)\n        self.g.ndata['h'] = torch.mm(h, self.weight)\n        self.g.update_all(gcn_msg, gcn_reduce, self.node_update)\n        h = self.g.ndata.pop('h')\n","AFTER":"    def forward(self, graph, h):\n        \n        def gcn_msg(edge):\n            dot_attent = (edge.src['h'] * edge.dst['h']).sum(-1)[:, None]\n            msg = (dot_attent * edge.src['h'])[:, None]\n            msg = torch.matmul(msg.transpose(1,2), self.attention_w).sum(axis=2, keepdim=True).transpose(1,2).squeeze()\n            return {'m': msg}\n\n        def gcn_reduce(node):\n            accum = torch.sum(node.mailbox['m'], 1)\n            return {'h': accum}\n\n        graph.ndata['h'] = torch.mm(h, self.weight)\n        graph.update_all(gcn_msg, gcn_reduce)\n        h = graph.ndata.pop('h')\n"}