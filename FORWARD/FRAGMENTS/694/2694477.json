{"BEFORE":"        x = x.squeeze(1)\n        B, _, _, H, W = x.shape\n\n        with torch.cuda.device_of(x):\n\n            disp_u = torch.reshape(\n                torch.arange(\n                    -self.max_u,\n                    self.max_u + 1,\n                    dtype=torch.float32,\n                ),\n                [1, sizeU, 1, 1, 1],\n            )\n            disp_u = disp_u.expand(B, -1, sizeV, H, W).contiguous()\n            disp_u = disp_u.view(B, sizeU * sizeV, H, W)\n\n            disp_v = torch.reshape(\n                torch.arange(\n                    -self.max_v,\n                    self.max_v + 1,\n                    dtype=torch.float32,\n                ),\n                [1, 1, sizeV, 1, 1],\n            )\n            disp_v = disp_v.expand(B, sizeU, -1, H, W).contiguous()\n            disp_v = disp_v.view(B, sizeU * sizeV, H, W)\n\n        x = x.view(B, sizeU * sizeV, H, W)\n","AFTER":"        x = x.squeeze(1)\n        B, _, _, H, W = x.shape\n\n        disp_u = torch.reshape(\n            torch.arange(\n                -self.max_u,\n                self.max_u + 1,\n                dtype=torch.float32,\n            ),\n            [1, sizeU, 1, 1, 1],\n        ).to(x.device)\n        disp_u = disp_u.expand(B, -1, sizeV, H, W).contiguous()\n        disp_u = disp_u.view(B, sizeU * sizeV, H, W)\n\n        disp_v = torch.reshape(\n            torch.arange(\n                -self.max_v,\n                self.max_v + 1,\n                dtype=torch.float32,\n            ),\n            [1, 1, sizeV, 1, 1],\n        ).to(x.device)\n        disp_v = disp_v.expand(B, sizeU, -1, H, W).contiguous()\n        disp_v = disp_v.view(B, sizeU * sizeV, H, W)\n"}