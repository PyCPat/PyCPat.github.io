{"BEFORE":"        means = self.means.type(dtype)\n        x = F.normalize(x, 2, dim=-1).type(dtype)\n\n        with torch.no_grad():\n            means, buckets, dists = kmeans(x, means, training=self.training, init=not self.initted)\n            indices = distribution(dists, window_size)\n            indices = indices.contiguous().view(*indices.size()[:2], -1)\n\n        routed_means = batched_index_select(expand_dim(means, 0, b), buckets)\n        loss = F.mse_loss(x, routed_means) * self.commitment\n\n        if self.training:\n            self.new_means = ema(self.new_means, means, 0.5)\n\n        return indices, loss\n","AFTER":"        self.init(x)\n\n        b, dtype = x.shape[0], x.dtype\n        means = self.means.type(dtype)\n        x = F.normalize(x, 2, dim=-1).type(dtype)\n\n        with torch.no_grad():\n            dists, buckets = dists_and_buckets(x, means)\n\n        if update_means:\n            with torch.no_grad():\n                means = kmeans_iter(x, means, buckets)\n            self.new_means = means\n\n        routed_means = batched_index_select(expand_dim(means, 0, b), buckets)\n        loss = F.mse_loss(x, routed_means) * self.commitment\n\n        return dists, loss\n"}