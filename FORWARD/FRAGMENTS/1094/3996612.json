{"BEFORE":"    def forward(self, x): # (B, N, N, n_in)\n        B, N, _, _ = x.shape\n        x = x.permute(0, 3, 1, 2)\n        x = self.conv(x)\n        x = x.permute(0, 2, 3, 1).view(B, N, N, -1)\n        return x # (B, N, N, n_out)\n","AFTER":"    def forward(self, x_l, x_r=None, x_base=None):\n        x_r = x_l if x_r is None else x_r\n        assert(x_l.shape == x_r.shape)\n        B, N, C = x_l.shape\n\n        x = self.pairing(x_l, x_r, self.join, self.context) # (B, N, N, C*width)\n        if self.mix_base > 0 and x_base is not None:\n            x_base = self.pairing(x_base, x_base, join='cat', context=self.mix_base) # (B, N, N, 4*2*mix_base)\n            x = torch.cat((x_base, x), dim=3)\n\n        x = x.permute(0, 3, 1, 2)\n        y = self.net(x)\n        y = y.permute(0, 2, 3, 1).view(B, N, N, -1) # (B, N, N, n_out)\n\n        return y\n"}