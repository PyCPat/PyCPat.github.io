{"BEFORE":"        sim = einsum('b i d, b j d -> b i j', q, k)\n\n        if causal:\n            mask = torch.ones((n, n), device = device).triu(1).bool()\n            mask_value = -torch.finfo(sim.dtype).max\n            sim = sim.masked_fill(mask, mask_value)\n","AFTER":"        sim = einsum('b i d, b j d -> b i j', q, k)\n\n        if exists(mask):\n            mask = repeat(mask, 'b n -> (b g h) n', h = h, g = g)\n            mask = rearrange(mask, 'b n -> b n ()') * rearrange(mask, 'b n -> b () n')\n            mask_value = max_neg_value(sim)\n            sim = sim.masked_fill(~mask, mask_value)\n\n        if causal:\n            causal_mask = torch.ones((n, n), device = device).triu(1).bool()\n            mask_value = max_neg_value(sim)\n            sim = sim.masked_fill(causal_mask, mask_value)\n"}