{"BEFORE":"        flat_indices = rearrange(adj_kv_indices, 'b n a -> b (n a)')\n\n        # select the neighbors for every individual token. \"a\" dimension stands for 'adjacent neighbor'\n        kv_x = batched_index_select(x, flat_indices)\n        kv_x = rearrange(kv_x, 'b (n a) d -> b n a d', n = n)\n\n        # derive query, key, value\n        q, k, v = self.to_q(x), *self.to_kv(kv_x).chunk(2, dim = -1)\n        q = rearrange(q, 'b n (h d) -> b h n d', h = h)\n        k, v = map(lambda t: rearrange(t, 'b n a (h d) -> b h n a d',  h = h), (k, v))\n","AFTER":"        flat_indices = repeat(adj_kv_indices, 'b n a -> (b h) (n a)', h = h)\n\n        # derive query, key, value\n        q, k, v = self.to_qkv(x).chunk(3, dim = -1)\n        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = h), (q, k, v))\n\n        # gather keys and values according to adjacency matrix\n        k, v = map(lambda t: rearrange(t, 'b h n d -> (b h) n d'), (k, v))\n        k = batched_index_select(k, flat_indices)\n        v = batched_index_select(v, flat_indices)\n        k, v = map(lambda t: rearrange(t, '(b h) (n a) d -> b h n a d', h = h, n = n), (k, v))\n"}