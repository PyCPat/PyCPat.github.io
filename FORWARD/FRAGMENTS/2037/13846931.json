{"BEFORE":"        x = x.view(B*N, -1)\n        x = self.fc(x)\n        return x.view(B, N, -1) # (B, N, n_out)\n","AFTER":"    def forward(self, x, x_base=None):\n        B, N, C = x.shape\n\n        x = self.contextize(x, self.context) # (B, N, C*context)\n        if self.mix_base > 0 and x_base is not None:\n            x_base = self.contextize(x_base, self.mix_base) # (B, N, 4*mix_base)\n            x = torch.cat((x_base, x), dim=2)\n\n        x = x.view(B*N, -1) # (B*N, C*width)\n        y = self.net(x) # (B*N, n_out)\n        return y.view(B, N, -1) # (B, N, n_out)\n"}