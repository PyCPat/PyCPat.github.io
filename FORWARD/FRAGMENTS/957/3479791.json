{"BEFORE":"        out_2 = out_2 + image\n        return [out_1, out_2]\n","AFTER":"        H, W = x.shape[-2:]\n        x = self.check_image_size(x)\n\n        image = x\n        #stage 1\n        x1 = self.conv_01(image)\n        encs = []\n        decs = []\n        for i, down in enumerate(self.down_path_1):\n            if (i+1) < self.depth:\n                x1, x1_up = down(x1)\n                encs.append(x1_up)\n            else:\n                x1 = down(x1)\n\n        for i, up in enumerate(self.up_path_1):\n            x1 = up(x1, self.skip_conv_1[i](encs[-i-1]))\n            decs.append(x1)\n\n        sam_feature, out_1 = self.sam12(x1, image)\n        #stage 2\n        x2 = self.conv_02(image)\n        x2 = self.cat12(torch.cat([x2, sam_feature], dim=1))\n        blocks = []\n        for i, down in enumerate(self.down_path_2):\n            if (i+1) < self.depth:\n                x2, x2_up = down(x2, encs[i], decs[-i-1])\n                blocks.append(x2_up)\n            else:\n                x2 = down(x2)\n\n        for i, up in enumerate(self.up_path_2):\n            x2 = up(x2, self.skip_conv_2[i](blocks[-i-1]))\n\n        out_2 = self.last(x2)\n        out_2 = out_2 + image\n        return [out_1[:,:,:H,:W], out_2[:,:,:H,:W]]\n"}