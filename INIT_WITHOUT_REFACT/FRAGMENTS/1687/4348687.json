{"BEFORE":"        self.upsample_block_num = int(math.log(upscale_factor, 2))\n\n        # First layer\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=0, bias=False)\n\n        # 23 ResidualInResidualDenseBlock layer\n        rrdb_layers = []\n        for _ in range(23):\n            rrdb_layers += [ResidualInResidualDenseBlock(64, 32)]\n        self.residual_residual_dense_blocks = nn.Sequential(*rrdb_layers)\n\n        # Second conv layer post residual blocks\n        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)\n\n        # Upsampling layers\n        self.upsampling = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)\n","AFTER":"        upsample_block_num = int(math.log(upscale_factor, 2))\n\n        # First layer\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)\n\n        # 23 ResidualInResidualDenseBlock layer\n        rrdb_layers = []\n        for _ in range(23):\n            rrdb_layers += [ResidualInResidualDenseBlock(in_channels=64, growth_channels=32, scale_ratio=0.2)]\n        self.residual_residual_dense_blocks = nn.Sequential(*rrdb_layers)\n\n        # Second conv layer post residual blocks\n        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)\n\n        # Upsampling layers\n        upsampling = []\n        for _ in range(upsample_block_num):\n            upsampling += [\n                nn.Conv2d(64, 256, 3, 1, 1),\n                nn.BatchNorm2d(256),\n                nn.PixelShuffle(upscale_factor=2),\n                nn.PReLU()\n            ]\n        self.upsampling = nn.Sequential(*upsampling)\n"}