{"BEFORE":"        for i in range(self.sample_token_count):\n            token_index = torch.tensor([i]).to(torch.long)\n            # if torch.cuda.is_available(): token_index = token_index.cuda()\n            probs, keys_values_state = self.decode_step(\n                text_tokens = text_tokens,\n                encoder_state = encoder_state,\n                keys_values_state = keys_values_state,\n                prev_token_and_index = torch.cat([image_token, token_index])\n            )\n\n            image_token = torch.multinomial(probs, 1)\n            image_tokens += [image_token]\n        \n            if self.is_verbose:\n                token = int(image_token.detach().numpy())\n                print(\"image token {} is {}\".format(i, token))\n            \n        return torch.cat(image_tokens)\n","AFTER":"        keys_values_state = torch.zeros(self.keys_values_state_shape)\n        if torch.cuda.is_available(): \n            keys_values_state = keys_values_state.cuda()\n        image_token = self.start_token\n\n        for i in range(self.sample_token_count):\n            token_index = self.token_indices[i:i+1]\n"}