{"BEFORE":"                self.rgb_cnn = nn.Sequential(\n                    nn.Conv2d(\n                        in_channels=self._n_input_rgb,\n                        out_channels=32,\n                        kernel_size=self._cnn_layers_kernel_size[0],\n                        stride=self._cnn_layers_stride[0],\n                    ),\n                    nn.ReLU(True),\n                    nn.Conv2d(\n                        in_channels=32,\n                        out_channels=64,\n                        kernel_size=self._cnn_layers_kernel_size[1],\n                        stride=self._cnn_layers_stride[1],\n                    ),\n                    nn.ReLU(True),\n                    nn.Conv2d(\n                        in_channels=64,\n                        out_channels=32,\n                        kernel_size=self._cnn_layers_kernel_size[2],\n                        stride=self._cnn_layers_stride[2],\n                    ),\n                    #  nn.ReLU(True),\n                    nn.Flatten(),\n                    nn.Linear(32 * rgb_cnn_dims[0] * rgb_cnn_dims[1], output_size),\n                    nn.ReLU(True),\n                )\n                self.layer_init(self.rgb_cnn)\n\n            if self._n_input_depth > 0:\n                for kernel_size, stride in zip(\n                    self._cnn_layers_kernel_size, self._cnn_layers_stride\n                ):\n                    # noinspection PyUnboundLocalVariable\n                    depth_cnn_dims = self._conv_output_dim(\n                        dimension=depth_cnn_dims,\n                        padding=np.array([0, 0], dtype=np.float32),\n                        dilation=np.array([1, 1], dtype=np.float32),\n                        kernel_size=np.array(kernel_size, dtype=np.float32),\n                        stride=np.array(stride, dtype=np.float32),\n                    )\n                # noinspection PyUnboundLocalVariable\n                self.depth_cnn = nn.Sequential(\n                    nn.Conv2d(\n                        in_channels=self._n_input_depth,\n                        out_channels=32,\n                        kernel_size=self._cnn_layers_kernel_size[0],\n                        stride=self._cnn_layers_stride[0],\n                    ),\n                    nn.ReLU(True),\n                    nn.Conv2d(\n                        in_channels=32,\n                        out_channels=64,\n                        kernel_size=self._cnn_layers_kernel_size[1],\n                        stride=self._cnn_layers_stride[1],\n                    ),\n                    nn.ReLU(True),\n                    nn.Conv2d(\n                        in_channels=64,\n                        out_channels=32,\n                        kernel_size=self._cnn_layers_kernel_size[2],\n                        stride=self._cnn_layers_stride[2],\n                    ),\n                    #  nn.ReLU(True),\n                    nn.Flatten(),\n                    nn.Linear(32 * depth_cnn_dims[0] * depth_cnn_dims[1], output_size),\n                    nn.ReLU(True),\n                )\n","AFTER":"                layer_channels = [32, 64, 32]\n                # noinspection PyUnboundLocalVariable\n                self.rgb_cnn = make_cnn(\n                    input_channels=self._n_input_rgb,\n                    layer_channels=layer_channels,\n                    kernel_sizes=self._cnn_layers_kernel_size,\n                    strides=self._cnn_layers_stride,\n                    output_height=rgb_cnn_dims[0],\n                    output_width=rgb_cnn_dims[1],\n                    output_channels=output_size,\n                )\n                self.layer_init(self.rgb_cnn)\n\n            if self._n_input_depth > 0:\n                for kernel_size, stride in zip(\n                    self._cnn_layers_kernel_size, self._cnn_layers_stride\n                ):\n                    # noinspection PyUnboundLocalVariable\n                    depth_cnn_dims = self._conv_output_dim(\n                        dimension=depth_cnn_dims,\n                        padding=np.array([0, 0], dtype=np.float32),\n                        dilation=np.array([1, 1], dtype=np.float32),\n                        kernel_size=np.array(kernel_size, dtype=np.float32),\n                        stride=np.array(stride, dtype=np.float32),\n                    )\n                layer_channels = [32, 64, 32]\n                # noinspection PyUnboundLocalVariable\n                self.rgb_cnn = make_cnn(\n                    input_channels=self._n_input_depth,\n                    layer_channels=layer_channels,\n                    kernel_sizes=self._cnn_layers_kernel_size,\n                    strides=self._cnn_layers_stride,\n                    output_height=depth_cnn_dims[0],\n                    output_width=depth_cnn_dims[1],\n                    output_channels=output_size,\n                )\n"}