{"BEFORE":"\t\tself.config = config\n\n\t\tlayers = []\n\t\tfor i in range(self.config['style_encoder']['n_layers']):\n\t\t\tin_channels = self.config['style_encoder']['filters'] * (2 ** (i - 1)) if i > 0 else 3\n\t\t\tout_channels = 2 * in_channels if i > 0 else self.config['style_encoder']['filters']\n\n\t\t\tlayers += [\n\t\t\t\tnn.Conv2d(in_channels, out_channels, kernel_size=4, stride=2, padding=1),\n\t\t\t\tnn.LeakyReLU(negative_slope=0.2, inplace=True)\n\t\t\t]\n\n\t\tself.convs = nn.Sequential(*layers)\n\n\t\tself.linear = nn.Linear(\n\t\t\tin_features=self.config['style_encoder']['filters'] * (2 ** (self.config['style_encoder']['n_layers'] - 1)),\n\t\t\tout_features=self.config['style_dim']\n\t\t)\n","AFTER":"\tdef __init__(self, config, max_conv_dim=512):\n\t\tsuper().__init__()\n\n\t\tself.config = config\n\t\timg_size = config['img_shape'][0]\n\n\t\tdim_in = 2**14 \/\/ img_size\n\t\tblocks = []\n\t\tblocks += [nn.Conv2d(3, dim_in, 3, 1, 1)]\n\n\t\trepeat_num = int(np.log2(img_size)) - 2\n\t\tfor _ in range(repeat_num):\n\t\t\tdim_out = min(dim_in*2, max_conv_dim)\n\t\t\tblocks += [ResBlk(dim_in, dim_out, downsample=True)]\n\t\t\tdim_in = dim_out\n\n\t\tblocks += [nn.LeakyReLU(0.2)]\n\t\tblocks += [nn.Conv2d(dim_out, dim_out, 4, 1, 0)]\n\t\tblocks += [nn.LeakyReLU(0.2)]\n\t\tself.shared = nn.Sequential(*blocks)\n\n\t\tself.unshared = nn.ModuleList()\n\t\tfor _ in range(config['n_classes']):\n\t\t\tself.unshared += [nn.Linear(dim_out, config['style_dim'])]\n\n\tdef forward(self, x, y):\n"}