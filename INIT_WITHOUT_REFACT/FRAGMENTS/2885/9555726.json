{"BEFORE":"        use_nearest = num_nearest > 0\n\n        rel_coors = rearrange(coors, 'b i d -> b i () d') - rearrange(coors, 'b j d -> b () j d')\n        rel_dist = (rel_coors ** 2).sum(dim = -1, keepdim = True)\n\n        i = j = n\n\n        if use_nearest:\n            ranking = rel_dist[..., 0]\n\n            if exists(mask):\n                rank_mask = mask[:, None, :] * mask[:, None, :]\n                ranking.masked_fill_(~rank_mask, 1e5)\n\n            if exists(adj_mat):\n                if len(adj_mat.shape) == 2:\n                    adj_mat = repeat(adj_mat, 'i j -> b i j', b = b)\n\n                if only_sparse_neighbors:\n                    num_nearest = int(adj_mat.float().sum(dim = -1).max().item())\n                    valid_radius = 0\n\n                self_mask = rearrange(torch.eye(n, device = device, dtype = torch.bool), 'i j -> () i j')\n\n                ranking.masked_fill_(self_mask, -1.)\n                adj_mat.masked_fill_(self_mask, False)\n","AFTER":"        use_nearest = num_nearest > 0 or only_sparse_neighbors\n\n        rel_coors = rearrange(coors, 'b i d -> b i () d') - rearrange(coors, 'b j d -> b () j d')\n        rel_dist = (rel_coors ** 2).sum(dim = -1, keepdim = True)\n\n        i = j = n\n\n        if use_nearest:\n            ranking = rel_dist[..., 0]\n\n            if exists(mask):\n                rank_mask = mask[:, None, :] * mask[:, None, :]\n                ranking.masked_fill_(~rank_mask, 1e5)\n\n            if exists(adj_mat):\n                if len(adj_mat.shape) == 2:\n                    adj_mat = repeat(adj_mat.clone(), 'i j -> b i j', b = b)\n\n                if only_sparse_neighbors:\n                    num_nearest = int(adj_mat.float().sum(dim = -1).max().item())\n                    valid_radius = 0\n\n                self_mask = rearrange(torch.eye(n, device = device, dtype = torch.bool), 'i j -> () i j')\n\n                adj_mat = adj_mat.masked_fill(self_mask, False)\n"}