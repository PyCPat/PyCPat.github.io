{"BEFORE":"        pan_out2 = self.C3_p3(f_out1)  # 512->256\/8\n\n        p_out1 = self.bu_conv2(pan_out2)  # 256->256\/16\n        p_out1 = torch.cat([p_out1, fpn_out1], 1)  # 256->512\/16\n        pan_out1 = self.C3_n3(p_out1)  # 512->512\/16\n\n        p_out0 = self.bu_conv1(pan_out1)  # 512->512\/32\n        p_out0 = torch.cat([p_out0, fpn_out0], 1)  # 512->1024\/32\n        pan_out0 = self.C3_n4(p_out0)  # 1024->1024\/32\n\n        outputs = (pan_out2, pan_out1, pan_out0)\n        return outputs\n","AFTER":"        outputs = {}\n        out_features = self.backbone(input)\n        features = [out_features[f] for f in self.in_features]\n        [x2, x1, x0] = features\n\n        fpn_out0 = self.lateral_conv0(x0)  # 1024->512\/32\n        f_out0 = self.upsample(fpn_out0)  # 512\/16\n        f_out0 = torch.cat([f_out0, x1], 1)  # 512->1024\/16\n        f_out0 = self.C3_p4(f_out0)  # 1024->512\/16\n\n        fpn_out1 = self.reduce_conv1(f_out0)  # 512->256\/16\n        f_out1 = self.upsample(fpn_out1)  # 256\/8\n        f_out1 = torch.cat([f_out1, x2], 1)  # 256->512\/8\n        pan_out2 = self.C3_p3(f_out1)  # 512->256\/8\n        outputs[\"P3\"] = pan_out2\n        \n        if \"P4\" in self.out_features or \"P5\" in self.out_features:\n            p_out1 = self.bu_conv2(pan_out2)  # 256->256\/16\n            p_out1 = torch.cat([p_out1, fpn_out1], 1)  # 256->512\/16\n            pan_out1 = self.C3_n3(p_out1)  # 512->512\/16\n            outputs[\"P4\"] = pan_out1\n        \n        if \"P5\" in self.out_features:\n            p_out0 = self.bu_conv1(pan_out1)  # 512->512\/32\n            p_out0 = torch.cat([p_out0, fpn_out0], 1)  # 512->1024\/32\n            pan_out0 = self.C3_n4(p_out0)  # 1024->1024\/32\n            outputs[\"P5\"] = pan_out0\n        \n        return {k:v for k, v in outputs.items() if k in self.out_features}\n"}