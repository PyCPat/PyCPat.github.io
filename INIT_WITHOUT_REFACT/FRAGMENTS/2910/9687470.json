{"BEFORE":"    def forward(self, inputs):\n        outs = []\n        x = inputs[-1]\n        for i in range(self.n_scales - 1, -1, -1):\n            if i < self.n_scales - 1:\n                x = inputs[i] + x\n            outs.append(self.__getattr__(f'out_block_{i}')(x))\n            if i > 0:\n                x = self.__getattr__(f'up_block_{i}')(x)\n        return outs[::-1]\n","AFTER":"    def forward(self, inputs, gt_bboxes=None, gt_labels=None, img_metas=None):\n        outs, losses = [], []\n        x = inputs[-1]\n        for i in range(self.n_scales - 1, -1, -1):\n            if i < self.n_scales - 1:\n                x = inputs[i] + x\n            outs.append(self.__getattr__(f'out_block_{i}')(x))\n            if i > 0:\n                x = self.__getattr__(f'up_block_{i}')(x)\n                score = self.__getattr__(f'score_block_{i}')(x)\n                mask, loss = self._prune(score, inputs[i - 1], gt_bboxes, gt_labels, img_metas)\n                x = self.pruning(x, mask)\n                losses += loss\n        outs = outs[::-1]\n        if len(losses) == 0:  # training\n            return outs\n        return outs, dict(loss_pruning=torch.mean(torch.cat(losses)))\n"}