{"BEFORE":"        dim_out = default(dim_out, dim)\n        temporal_kernel_size = default(temporal_kernel_size, kernel_size)\n\n        self.spatial_conv = nn.Conv2d(dim, dim_out, kernel_size = kernel_size, padding = kernel_size \/\/ 2)\n        self.temporal_conv = nn.Conv1d(dim_out, dim_out, kernel_size = temporal_kernel_size, padding = temporal_kernel_size \/\/ 2)\n\n        nn.init.dirac_(self.temporal_conv.weight.data) # initialized to be identity\n        nn.init.zeros_(self.temporal_conv.bias.data)\n","AFTER":"        dim_out = None,\n        kernel_size = 3,\n        *,\n        temporal_kernel_size = None,\n        **kwargs\n    ):\n        super().__init__()\n        dim_out = default(dim_out, dim)\n        temporal_kernel_size = default(temporal_kernel_size, kernel_size)\n\n        self.spatial_conv = nn.Conv2d(dim, dim_out, kernel_size = kernel_size, padding = kernel_size \/\/ 2)\n        self.temporal_conv = nn.Conv1d(dim_out, dim_out, kernel_size = temporal_kernel_size) if kernel_size > 1 else None\n        self.kernel_size = kernel_size\n\n        if exists(self.temporal_conv):\n            nn.init.dirac_(self.temporal_conv.weight.data) # initialized to be identity\n            nn.init.zeros_(self.temporal_conv.bias.data)\n\n    def forward(\n"}