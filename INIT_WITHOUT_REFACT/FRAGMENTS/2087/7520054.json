{"BEFORE":"        batch_size = feats.size(0)\r\n        if self.similarity == 'dot':\r\n            sim_mat = torch.matmul(feats, torch.t(feats))\r\n        elif self.similarity == 'cos':\r\n            feats = F.normalize(feats)\r\n            sim_mat = feats.mm(feats.t())\r\n        else:\r\n            raise ValueError('This similarity is not implemented.')\r\n        loss = list()\r\n        for i in range(batch_size):\r\n            pos_index = labels == labels[i]\r\n            pos_index[i] = 0\r\n            neg_index = labels != labels[i]\r\n            pos_pair_ = sim_mat[i][pos_index]\r\n            neg_pair_ = sim_mat[i][neg_index]\r\n\r\n            alpha_p = torch.relu(-pos_pair_ + 1 + self.margin)\r\n            alpha_n = torch.relu(neg_pair_ + self.margin)\r\n            margin_p = 1 - self.margin\r\n            margin_n = self.margin\r\n            loss_p = torch.sum(torch.exp(-self.scale * alpha_p * (pos_pair_ - margin_p)))\r\n            loss_n = torch.sum(torch.exp(self.scale * alpha_n * (neg_pair_ - margin_n)))\r\n            loss.append(torch.log(1 + loss_p * loss_n))\r\n\r\n        loss = sum(loss) \/ batch_size\r\n","AFTER":"        m = labels.size(0)\r\n        mask = labels.expand(m, m).t().eq(labels.expand(m, m)).float()\r\n        pos_mask = mask.triu(diagonal=1)\r\n        neg_mask = (mask - 1).abs_().triu(diagonal=1)\r\n        if self.similarity == 'dot':\r\n            sim_mat = torch.matmul(feats, torch.t(feats))\r\n        elif self.similarity == 'cos':\r\n            feats = F.normalize(feats)\r\n            sim_mat = feats.mm(feats.t())\r\n        else:\r\n            raise ValueError('This similarity is not implemented.')\r\n\r\n        pos_pair_ = sim_mat[pos_mask == 1]\r\n        neg_pair_ = sim_mat[neg_mask == 1]\r\n\r\n        alpha_p = torch.relu(-pos_pair_ + 1 + self.margin)\r\n        alpha_n = torch.relu(neg_pair_ + self.margin)\r\n        margin_p = 1 - self.margin\r\n        margin_n = self.margin\r\n        loss_p = torch.sum(torch.exp(-self.scale * alpha_p * (pos_pair_ - margin_p)))\r\n        loss_n = torch.sum(torch.exp(self.scale * alpha_n * (neg_pair_ - margin_n)))\r\n        loss = torch.log(1 + loss_p * loss_n)\r\n"}