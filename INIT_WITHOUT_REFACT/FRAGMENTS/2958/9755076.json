{"BEFORE":"    def forward(self, lengths, nodes_output):\n        \"\"\"\n        :param lengths:\n        :param nodes_output:\n        :return:\n        \"\"\"\n        aggregated_features = []\n        for length in lengths:\n            output_node_features = nodes_output[:, :length, :]\n            weights = self.Wq(output_node_features).transpose(1, 2)\n            aggregated_feature = weights.matmul(output_node_features).squeeze(dim=1)\n            aggregated_features.append(aggregated_feature)\n","AFTER":"        for l in range(nodes_output.shape[0]):\n            output_node_features = nodes_output[l, :, :]\n            weights = self.Wq(output_node_features)\n            aggregated_features.append(weights)\n        aggregated_features = torch.cat(aggregated_features, dim=0)\n        print(aggregated_features.shape)\n"}