{"BEFORE":"\t\ths = [torch.randn(x.size(0), self.args['hidden_size']).to(self.device) for _ in range(self.args['num_units'])]\n\t\tcs = None\n\t\tif self.args['rnn_cell'] == 'LSTM':\n\t\t\tcs = [torch.randn(x.size(0), self.args['hidden_size']).to(self.device) for _ in range(self.args['num_units'])]\n\t\txs = torch.split(x, 1, 1)\n\t\t#print(xs[0].size())\n\t\t#xs = [torch.squeeze(k) for k in xs]\n\t\tfor x in xs:\n\t\t\ths, cs = self.rim_model(row_index, ind, x, hs, cs)\n\t\th = torch.cat(hs, dim = 1)\n\t\tpreds = self.Linear(h)\n","AFTER":"\t\tx = x.float()\n\t\ths = torch.randn(x.size(0), self.args['num_units'], self.args['hidden_size']).to(self.device)\n\t\tcs = None\n\t\tif self.args['rnn_cell'] == 'LSTM':\n\t\t\tcs = torch.randn(x.size(0), self.args['num_units'], self.args['hidden_size']).to(self.device)\n\t\txs = torch.split(x, 1, 1)\n\t\t#print(xs[0].size())\n\t\t#xs = [torch.squeeze(k) for k in xs]\n\t\tfor x in xs:\n\t\t\ths, cs = self.rim_model(row_index, ind, x, hs, cs)\n\t\tpreds = self.Linear(hs.contiguous().view(x.size(0), -1))\n"}