{"BEFORE":"        if self.sigma.requires_grad:\n            self.invCov = self.invCovMat(self.sigma)\n            self.detS = self.denom(self.sigma,self.input_features)\n\n        # get the distancese of each point to each RBF center\n        # (Nbatch,Nrbf,Ndim)\n        delta =  (input[:,None,:] - self.centers[None,...])\n\n        # Compute (INPUT-MU).T x Sigma^-1 * (INPUT-MU)-> (Nbatch,Nrbf)\n        X = ( torch.matmul(delta.unsqueeze(2),self.invCov).squeeze(2) * delta ).sum(2)\n\n        # slater kernel\n        if self.kernel == 'slater':\n            X = torch.sqrt(X)\n            self.detS[:,:] = 1.\n\n        # divide by the determinant of the cov mat\n        X = (torch.exp(-0.5*X).unsqueeze(2) \/ self.detS).squeeze()\n\n        return X\n","AFTER":"        if self.kernel == 'gaussian':\n            return self._gaussian_kernel(input)\n        elif self.kernel == 'slater':\n            return self._slater_kernel(input)\n        else:\n            raise ValueError('Kernel not recognized')\n"}