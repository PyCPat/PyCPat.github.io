{"BEFORE":"    def forward(self, x):\n        B, C, H, W = x.shape\n        # FIXME look at relaxing size constraints\n        assert H == self.img_size[0] and W == self.img_size[1], \\\n            f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\"\n","AFTER":"    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        \"\"\"Forward method for patch embedding.\n        \n        Args:\n            x: Input tensor.\n\n        Returns:\n            x: Patch embedding tensor with shape (B, Ph*Pw, C).\n\n        Raises:\n            ValueError: If input tensor shapes don't match with self.img_size. \n        \"\"\"\n        B, C, H, W = x.shape\n        # FIXME look at relaxing size constraints\n        if H != self.img_size[0] or W != self.img_size[1]:\n            raise ValueError(f\"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]}).\")\n        x = self.proj(x).flatten(2).transpose(1, 2)  # B Ph*Pw C\n"}