{"BEFORE":"        attn = self.softmax(attn)\n\n        if query_mask is not None:\n            attn = attn * query_mask\n        if mapping_mask is not None:\n            attn = attn * mapping_mask\n        output = torch.bmm(attn, v)\n\n        return output, attn\n","AFTER":"    def forward(self, q, k, v, key_mask=None, query_mask=None, mapping_mask=None, attn_prior=None):\n\n        attn = torch.bmm(q, k.transpose(1, 2))\n        attn = attn \/ self.temperature\n\n        if key_mask is not None:\n            attn = attn.masked_fill(key_mask == 0., -np.inf)\n        if attn_prior is not None:\n            attn = self.log_softmax(attn) + torch.log(attn_prior.transpose(1, 2) + 1e-8)\n        attn_logprob = attn.unsqueeze(1).clone()\n\n        attn = self.softmax(attn)\n\n        if query_mask is not None:\n            attn = attn * query_mask\n        attn_raw = attn.clone()\n        if mapping_mask is not None:\n            attn = attn * mapping_mask\n        output = torch.bmm(attn, v)\n\n        return output, (attn, attn_raw), attn_logprob\n"}