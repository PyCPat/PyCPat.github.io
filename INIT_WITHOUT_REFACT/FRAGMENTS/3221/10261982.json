{"BEFORE":"        verbose = False\n        if verbose:\n            print('0', x.shape)\n\n        for i, (mdef, module) in enumerate(zip(self.module_defs, self.module_list)):\n            mtype = mdef['type']\n            if mtype in ['convolutional', 'upsample', 'maxpool']:\n                x = module(x)\n            elif mtype == 'shortcut':  # sum\n                if verbose:\n                    l = [i] + module.layers  # layers\n                    s = [list(x.shape)] + [list(out[i].shape) for i in module.layers]  # shapes\n                    print('shortcut\/add: ' + ' + '.join(['layer %g %s' % x for x in zip(l, s)]))\n                x = module(x, out)  # weightedFeatureFusion()\n            elif mtype == 'route':  # concat\n                layers = mdef['layers']\n                if verbose:\n                    print('route\/concatenate %s + %s' % (list(x.shape), [list(out[i].shape) for i in layers]))\n                if len(layers) == 1:\n","AFTER":"        verbose = False\n        if verbose:\n            str = ''\n            print('0', x.shape)\n\n        for i, (mdef, module) in enumerate(zip(self.module_defs, self.module_list)):\n            mtype = mdef['type']\n            if mtype in ['convolutional', 'upsample', 'maxpool']:\n                x = module(x)\n            elif mtype == 'shortcut':  # sum\n                if verbose:\n                    l = [i - 1] + module.layers  # layers\n                    s = [list(x.shape)] + [list(out[i].shape) for i in module.layers]  # shapes\n                    str = ' >> ' + ' + '.join(['layer %g %s' % x for x in zip(l, s)])\n                x = module(x, out)  # weightedFeatureFusion()\n            elif mtype == 'route':  # concat\n                layers = mdef['layers']\n                if verbose:\n                    l = [i - 1] + layers  # layers\n                    s = [list(x.shape)] + [list(out[i].shape) for i in layers]  # shapes\n                    str = ' >> ' + ' + '.join(['layer %g %s' % x for x in zip(l, s)])\n                if len(layers) == 1:\n                    x = out[layers[0]]\n                else:\n                    try:\n                        x = torch.cat([out[i] for i in layers], 1)\n                    except:  # apply stride 2 for darknet reorg layer\n                        out[layers[1]] = F.interpolate(out[layers[1]], scale_factor=[0.5, 0.5])\n                        x = torch.cat([out[i] for i in layers], 1)\n                    # print(''), [print(out[i].shape) for i in layers], print(x.shape)\n            elif mtype == 'yolo':\n                yolo_out.append(module(x, img_size))\n            out.append(x if i in self.routs else [])\n            if verbose:\n                print('%g\/%g %s -' % (i, len(self.module_list), mtype), list(x.shape), str)\n                str = ''\n"}