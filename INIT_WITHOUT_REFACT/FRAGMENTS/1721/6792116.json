{"BEFORE":"                feature_real = self.max_pooling_2d(feature_real)\n                feature_fake = self.max_pooling_2d(feature_fake)\n                mask = self.max_pooling_2d(mask)\n            else:\n                feature_real = self.max_pooling_1d(feature_real.unsqueeze(dim=1))\n                feature_fake = self.max_pooling_1d(feature_fake.unsqueeze(dim=1))\n                mask = self.max_pooling_1d(mask.unsqueeze(dim=1))\n            # Normalize features\n            union = torch.cat((feature_real, feature_fake), dim=0)\n            feature_real = (feature_real - union.mean()) \/ (union.std() + 1e-08)\n            feature_fake = (feature_fake - union.mean()) \/ (union.std() + 1e-08)\n","AFTER":"                feature_real = self.max_pooling_2d(feature_real)\n                feature_fake = self.max_pooling_2d(feature_fake)\n                mask = self.max_pooling_2d(mask)\n            else:\n                feature_real = self.max_pooling_1d(feature_real.unsqueeze(dim=1))\n                feature_fake = self.max_pooling_1d(feature_fake.unsqueeze(dim=1))\n                mask = self.max_pooling_1d(mask.unsqueeze(dim=1))\n            # Normalize features\n            union = torch.cat((feature_real, feature_fake), dim=0)\n            feature_real, feature_fake = kornia.normalize_min_max(union).split(split_size=feature_fake.shape[0], dim=0)\n"}