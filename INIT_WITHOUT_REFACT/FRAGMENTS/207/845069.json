{"BEFORE":"            rpn_loc     = rpn_locs[i]\r\n            rpn_score   = rpn_scores[i]\r\n            roi         = rois[roi_indices == i]\r\n            feature     = base_feature[i]\r\n\r\n            # -------------------------------------------------- #\r\n            #   利用真实框和先验框获得建议框网络应该有的预测结果\r\n            #   给每个先验框都打上标签\r\n            #   gt_rpn_loc      [num_anchors, 4]\r\n            #   gt_rpn_label    [num_anchors, ]\r\n            # -------------------------------------------------- #\r\n            gt_rpn_loc, gt_rpn_label    = self.anchor_target_creator(bbox, anchor)\r\n            gt_rpn_loc                  = torch.Tensor(gt_rpn_loc)\r\n            gt_rpn_label                = torch.Tensor(gt_rpn_label).long()\r\n\r\n            if rpn_loc.is_cuda:\r\n                gt_rpn_loc = gt_rpn_loc.cuda()\r\n                gt_rpn_label = gt_rpn_label.cuda()\r\n\r\n            # -------------------------------------------------- #\r\n            #   分别计算建议框网络的回归损失和分类损失\r\n            # -------------------------------------------------- #\r\n            rpn_loc_loss = self._fast_rcnn_loc_loss(rpn_loc, gt_rpn_loc, gt_rpn_label, self.rpn_sigma)\r\n            rpn_cls_loss = F.cross_entropy(rpn_score, gt_rpn_label, ignore_index=-1)\r\n  \r\n            # ------------------------------------------------------ #\r\n            #   利用真实框和建议框获得classifier网络应该有的预测结果\r\n            #   获得三个变量，分别是sample_roi, gt_roi_loc, gt_roi_label\r\n            #   sample_roi      [n_sample, ]\r\n            #   gt_roi_loc      [n_sample, 4]\r\n            #   gt_roi_label    [n_sample, ]\r\n            # ------------------------------------------------------ #\r\n            sample_roi, gt_roi_loc, gt_roi_label = self.proposal_target_creator(roi, bbox, label, self.loc_normalize_std)\r\n            sample_roi          = torch.Tensor(sample_roi)\r\n            gt_roi_loc          = torch.Tensor(gt_roi_loc)\r\n            gt_roi_label        = torch.Tensor(gt_roi_label).long()\r\n            sample_roi_index    = torch.zeros(len(sample_roi))\r\n            \r\n            if feature.is_cuda:\r\n                sample_roi          = sample_roi.cuda()\r\n                sample_roi_index    = sample_roi_index.cuda()\r\n                gt_roi_loc          = gt_roi_loc.cuda()\r\n                gt_roi_label        = gt_roi_label.cuda()\r\n\r\n            roi_cls_loc, roi_score = self.faster_rcnn([torch.unsqueeze(feature, 0), sample_roi, sample_roi_index, img_size], mode = 'head')\r\n","AFTER":"            gt_rpn_loc                  = torch.Tensor(gt_rpn_loc).type_as(rpn_locs)\r\n            gt_rpn_label                = torch.Tensor(gt_rpn_label).type_as(rpn_locs).long()\r\n\r\n            # -------------------------------------------------- #\r\n            #   分别计算建议框网络的回归损失和分类损失\r\n            # -------------------------------------------------- #\r\n            rpn_loc_loss = self._fast_rcnn_loc_loss(rpn_loc, gt_rpn_loc, gt_rpn_label, self.rpn_sigma)\r\n            rpn_cls_loss = F.cross_entropy(rpn_score, gt_rpn_label, ignore_index=-1)\r\n  \r\n            # ------------------------------------------------------ #\r\n            #   利用真实框和建议框获得classifier网络应该有的预测结果\r\n            #   获得三个变量，分别是sample_roi, gt_roi_loc, gt_roi_label\r\n            #   sample_roi      [n_sample, ]\r\n            #   gt_roi_loc      [n_sample, 4]\r\n            #   gt_roi_label    [n_sample, ]\r\n            # ------------------------------------------------------ #\r\n            sample_roi, gt_roi_loc, gt_roi_label = self.proposal_target_creator(roi, bbox, label, self.loc_normalize_std)\r\n            sample_roi          = torch.Tensor(sample_roi).type_as(rpn_locs)\r\n            gt_roi_loc          = torch.Tensor(gt_roi_loc).type_as(rpn_locs)\r\n            gt_roi_label        = torch.Tensor(gt_roi_label).type_as(rpn_locs).long()\r\n            sample_roi_index    = torch.zeros(len(sample_roi)).type_as(rpn_locs).long()\r\n"}