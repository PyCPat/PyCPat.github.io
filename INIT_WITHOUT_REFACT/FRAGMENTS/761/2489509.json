{"BEFORE":"        for i in x.permute(2,0,1):\n            print(i)\n\n    # def call(self, inputs: Tensor, initial_state: Tensor):\n    #     \"\"\"Inputs is of shape [batch, seq_length, num_filters].\"\"\"\n    #     w = torch.clamp(self._weights, 0.0, 1.0)\n    #     result = tf.scan(lambda a, x: w * x + (1.0 - w) * a,\n    #                      tf.transpose(inputs, (1, 0, 2)),\n    #                      initializer=initial_state)\n    #     return tf.transpose(result, (1, 0, 2))\n\n\nclass PCENLayer(nn.Module):\n","AFTER":"        func = lambda a, y: w * y + (1.0 - w) * a\n\n        def scan(foo, x):\n            res = []\n            res.append(x[0].unsqueeze(0))\n            a_ = x[0].clone()\n\n            for i in range(1, len(x)):\n                res.append(foo(a_, x[i]).unsqueeze(0))\n                a_ = foo(a_, x[i])\n\n            return torch.cat(res)\n\n        res = scan(func, x.permute(2,0,1))\n        return res.permute(1,0,2)\n"}