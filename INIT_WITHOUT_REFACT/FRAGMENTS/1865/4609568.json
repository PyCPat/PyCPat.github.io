{"BEFORE":"                nn.LSTMCell(\n                    in_size,\n                    hidden_size,\n                ).to(device)\n                for in_size in [input_size] + [hidden_size] * (num_layers - 1)\n            ]\n        )\n        self.embeddings = nn.Embedding(vocab_size, input_size)\n        self.decoder = nn.Linear(hidden_size, output_size)\n        self.num_predictions = num_predictions\n\n        self.dropout_modules = {\n            \"embedding\": [\n                VariationalDropout(embedding_dropout, input_size, device)\n            ],  # Use list here for consistency\n            # \"embedding\": EmbeddingDropout(embedding_dropout, vocab_size, device),\n            \"layer\": [\n                VariationalDropout(layer_dropout, hidden_size, device)\n                for _ in range(num_layers)\n            ],\n            \"time\": [\n                VariationalDropout(time_dropout, hidden_size, device)\n","AFTER":"                VariationalDropout(dropout, size, device)\n                for dropout, size in zip(\n                    [embedding_dropout]\n                    + [layer_dropout]\n                    * num_layers,  # Use different rate after embeddings\n                    [hidden_size * 4] * num_layers\n                    + [hidden_size],  # We don't have gates in the last layer\n                )\n            ],\n            \"time\": [\n                VariationalDropout(time_dropout, hidden_size * 4, device)\n"}