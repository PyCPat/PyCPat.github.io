{"BEFORE":"        row_input = x.permute(0, 3, 2, 1).reshape(B * P, K, N)\n\n        for i in range(self.Local_B):\n            row_output = self.intra_transformer[i](row_input.permute(1, 0, 2)).permute(1, 0, 2)\n\n        row_output = row_output.reshape(B, P, K, N).permute(0, 3, 2, 1)\n\n        output = x + row_output\n\n        # inter DPT\n        col_input = output.permute(0, 2, 3, 1).reshape(B*K, P, N)\n\n        for i in range(self.Local_B):\n            col_output = self.inter_transformer[i](col_input.permute(1, 0, 2)).permute(1, 0, 2)\n\n        col_output = col_output.reshape(B, K, P, N).permute(0, 3, 1, 2)\n\n        output = output + col_output\n\n        return output\n","AFTER":"        row_z = z.permute(0, 3, 2, 1).reshape(B*P, K, N)\n        row_z1 = row_z + self.intra_PositionalEncoding(row_z)\n\n        for i in range(self.Local_B):\n            row_z3 = self.intra_transformer[i](row_z1.permute(1, 0, 2)).permute(1, 0, 2)\n\n        row_f = row_z3 + row_z\n\n        row_output = row_f.reshape(B, P, K, N).permute(0, 3, 2, 1)\n\n        # inter DPT\n        col_z = row_output.permute(0, 2, 3, 1).reshape(B*K, P, N)\n        col_z1 = col_z + self.inter_PositionalEncoding(col_z)\n\n        for i in range(self.Local_B):\n            col_z3 = self.inter_transformer[i](col_z1.permute(1, 0, 2)).permute(1, 0, 2)\n\n        col_f = col_z3 + col_z\n        col_output = col_f.reshape(B, K, P, N).permute(0, 3, 1, 2)\n\n        return col_output\n"}