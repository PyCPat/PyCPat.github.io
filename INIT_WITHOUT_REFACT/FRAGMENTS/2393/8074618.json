{"BEFORE":"            x_p = torch.clamp(x_p, min=self.eps) # for numerical stability\n            x_u = torch.clamp(x_u, min=self.eps) \n            x_p = (x_p + x_p.transpose(1, 2)) \/ 2\n            w = torch.triu(x_p, diagonal=1) + torch.tril(x_p, diagonal=1)\n            w = w + torch.diag_embed(x_u)\n            w = self.sinkhorn(w)\n            x_u = torch.diagonal(w, dim1=1, dim2=2)\n            x_p = torch.triu(w, diagonal=1) + torch.tril(w, diagonal=1)\n","AFTER":"            if self.eps > 0:\n                x_p = torch.clamp(x_p, min=self.eps) # for numerical stability\n                x_u = torch.clamp(x_u, min=self.eps) \n\n            w = torch.triu(x_p, diagonal=1)\n            w = w + w.transpose(1, 2) \n            w = w + torch.diag_embed(x_u)\n            w = self.sinkhorn(w)\n            x_u = torch.diagonal(w, dim1=1, dim2=2)\n            w = torch.triu(w, diagonal=1)\n            x_p = w + w.transpose(1, 2) \n"}