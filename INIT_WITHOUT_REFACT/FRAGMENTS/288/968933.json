{"BEFORE":"        if self.export:\n            for i in range(self.nl):\n                x[i] = self.m[i](x[i])\n                bs, _, ny, nx = x[i].shape  # x(bs,48,20,20) to x(bs,3,20,20,16)\n                x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()\n\n            return x\n        if self.export_cat:\n            for i in range(self.nl):\n                x[i] = self.m[i](x[i])  # conv\n                bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)\n                x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()\n\n                if self.grid[i].shape[2:4] != x[i].shape[2:4]:\n                    self.grid[i] = self._make_grid(nx, ny).to(x[i].device)\n","AFTER":"            for i in range(self.nl):\n                x[i] = self.m[i](x[i])  # conv\n                bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)\n                x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()\n\n                if self.grid[i].shape[2:4] != x[i].shape[2:4]:\n                    # self.grid[i] = self._make_grid(nx, ny).to(x[i].device)\n                    self.grid[i], self.anchor_grid[i] = self._make_grid_new(nx, ny,i)\n"}