{"BEFORE":"    def __init__(self, in_planes, planes, stride=1, sketch_rate=1):\n        super(Bottleneck, self).__init__()\n        self.conv1 = nn.Conv2d(in_planes, int(planes * sketch_rate), kernel_size=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(int(planes * sketch_rate))\n        self.conv2 = nn.Conv2d(int(planes * sketch_rate), int(planes * sketch_rate), kernel_size=3, stride=stride, padding=1, bias=False)\n        self.bn2 = nn.BatchNorm2d(int(planes * sketch_rate))\n        self.conv3 = nn.Conv2d(int(planes * sketch_rate), self.expansion*planes, kernel_size=1, bias=False)\n        self.bn3 = nn.BatchNorm2d(self.expansion*planes)\n\n        self.downsample = nn.Sequential()\n        if stride != 1 or in_planes != self.expansion*planes:\n            self.downsample = nn.Sequential(\n                nn.Conv2d(in_planes, self.expansion*planes, kernel_size=1, stride=stride, bias=False),\n                nn.BatchNorm2d(self.expansion*planes)\n            )\n\n    def forward(self, x):\n","AFTER":"    def __init__(self, inplanes, planes, conv1_planes=None, conv2_planes=None, stride=1, downsample=None, groups=1,\n                 base_width=64, dilation=1, norm_layer=None):\n        super(Bottleneck, self).__init__()\n        if norm_layer is None:\n            norm_layer = nn.BatchNorm2d\n        width = int(planes * (base_width \/ 64.)) * groups\n        # Both self.conv2 and self.downsample layers downsample the input when stride != 1\n        if conv1_planes is None:\n            conv1_planes = width\n        if conv2_planes is None:\n            conv2_planes = width\n        self.conv1 = conv1x1(inplanes, conv1_planes)\n        self.bn1 = norm_layer(conv1_planes)\n        self.conv2 = conv3x3(conv1_planes, conv2_planes, stride, groups, dilation)\n        self.bn2 = norm_layer(conv2_planes)\n        self.conv3 = conv1x1(conv2_planes, planes * self.expansion)\n        self.bn3 = norm_layer(planes * self.expansion)\n        self.relu = nn.ReLU(inplace=True)\n        self.downsample = downsample\n        self.stride = stride\n"}