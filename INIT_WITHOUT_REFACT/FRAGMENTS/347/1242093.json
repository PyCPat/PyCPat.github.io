{"BEFORE":"        self.level = int(math.log(self.scale, 2))\n        self.saved_actions = []\n        self.softmaxs = []\n        n_blocks = opt.n_blocks\n        n_feats = 64\n        kernel_size = 3\n        n_height = 1024\n\n        # main SR network\n        self.upsample = [nn.Upsample(scale_factor=2**(i+1), mode='bicubic', align_corners=False) for i in range(self.level)]\n        self.upsample = nn.ModuleList(self.upsample)\n\n        rgb_mean = (0.4737, 0.4397, 0.4043)\n        rgb_std = (1.0, 1.0, 1.0)\n        \n        # data preprocessing\n        self.sub_mean = common.MeanShift(opt.rgb_range, rgb_mean, rgb_std)\n        # head conv\n        self.head = conv(opt.n_colors, n_feats)\n        # CA Dense net\n        self.body = [common.CADensenet(SphereConv2D, n_feats, n_CADenseBlocks=n_blocks) for _ in range(self.level+1)]\n        self.body = nn.ModuleList(self.body)\n        # Texture transformer (tt)\n        self.tt = [NONLocalBlock2D(n_feats) for _ in range(self.level)]\n        self.tt = nn.ModuleList(self.body)\n        # bypass network\n        self.bypass = [common.Resnet(conv, n_feats, kernel_size=3, num=5, depth=5) for _ in range(self.level)]\n        self.bypass = nn.ModuleList(self.bypass)\n        # upsample blocks\n        self.up_blocks = [common.Upsampler(common.default_conv, 2, n_feats, act=False) for _ in\n                          range(2 * self.level - 1)]\n        self.up_blocks += [common.Upsampler(common.default_conv, 2 ** i, 3, act=False) for i in\n                           range(self.level, 0, -1)]\n","AFTER":"        self.level = int(math.log(self.scale, 2))\n        self.saved_actions = []\n        self.softmaxs = []\n        n_blocks = opt.n_blocks\n        n_feats = 64\n        kernel_size = 3\n        n_height = 1024\n\n        # main SR network\n        self.upsample = [nn.Upsample(scale_factor=2**(i+1), mode='bicubic', align_corners=False) for i in range(self.level)]\n        self.upsample = nn.ModuleList(self.upsample)\n\n        rgb_mean = (0.4737, 0.4397, 0.4043)\n        rgb_std = (1.0, 1.0, 1.0)\n        \n        # data preprocessing\n        self.sub_mean = common.MeanShift(opt.rgb_range, rgb_mean, rgb_std)\n        # head conv\n        self.head = conv(opt.n_colors, n_feats)\n        # CA Dense net\n        self.body = [common.CADensenet(conv, n_feats, n_CADenseBlocks=(self.level-i)*n_blocks) for i in range(self.level)]\n        self.body = nn.ModuleList(self.body)\n        # upsample blocks\n        self.up_blocks = [common.Upsampler(common.default_conv, 2, n_feats, act=False) for _ in range(2*self.level-1)]\n        self.up_blocks += [common.Upsampler(common.default_conv, 2**i, 3, act=False) for i in range(self.level-1,0,-1)]\n"}