{"BEFORE":"        input_abs = input.abs()\n        target_abs = target.abs()\n        if self.gamma != 1:\n            input_abs = input_abs.clamp_min(1e-12).pow(self.gamma)\n            target_abs = target_abs.clamp_min(1e-12).pow(self.gamma)\n        loss = F.mse_loss(input_abs, target_abs) * self.f_m\n        if self.f_under != 1:\n            # Weighting if predicted abs is too low\n            loss = loss * torch.where(input_abs < target_abs, self.f_u, 1.0)\n        if self.f_c > 0:\n","AFTER":"        input_abs = input.abs()\n        target_abs = target.abs()\n        if self.gamma != 1:\n            input_abs = input_abs.clamp_min(1e-12).pow(self.gamma)\n            target_abs = target_abs.clamp_min(1e-12).pow(self.gamma)\n        tmp = (input_abs - target_abs).pow(2)\n        if self.f_u != 1:\n            # Weighting if predicted abs is too low\n            tmp *= torch.where(input_abs < target_abs, self.f_u, 1.0)\n        loss = torch.mean(tmp) * self.f_m\n"}