{"BEFORE":"        return x\n","AFTER":"    def forward(self, q, k, v):\n        device = q.device\n\n        if self.redraw_projection:\n            projection_matrix = gaussian_orthogonal_random_matrix(self.nb_features, self.dim_heads, scaling = self.ortho_scaling, device = device)\n        else:\n            projection_matrix = self.projection_matrix\n\n        q_kernel = softmax_kernel(q, projection_matrix, is_query = True)\n        k_kernel = softmax_kernel(k, projection_matrix, is_query = False)\n\n        context = torch.einsum('...nd,...ne->...de', k_kernel, v)\n        out = torch.einsum('...de,...nd->...ne', context, q_kernel)\n\n        return out\n"}