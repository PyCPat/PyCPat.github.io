{"BEFORE":"\t\tself.content_embedding = nn.Embedding(config['n_imgs'], config['content_dim'], config['content_std'])\n\t\tself.class_embedding = nn.Embedding(config['n_classes'], config['class_dim'])\n\t\tself.modulation = Modulation(config['class_dim'] + config['style_dim'], config['generator']['n_adain_layers'], config['generator']['adain_dim'])\n\t\tself.decoder = Decoder(config['content_dim'], config['generator']['n_adain_layers'], config['generator']['adain_dim'], config['img_shape'])\n","AFTER":"\t\tself.style_embedding = nn.Embedding(config['n_imgs'], config['style_dim'])\n\t\tself.class_embedding = nn.Embedding(config['n_classes'], config['class_dim'])\n\n\t\tself.class_style_modulation = nn.Linear(\n\t\t\tin_features=config['style_dim'] + config['class_dim'],\n\t\t\tout_features=config['style_dim']\n\t\t)\n\n\t\tself.projection = nn.Sequential(\n\t\t\tnn.Linear(in_features=config['content_dim'], out_features=256),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\n\t\t\tnn.Linear(in_features=256, out_features=256*4*4),\n\t\t\tnn.LeakyReLU(negative_slope=0.2)\n\t\t)\n\n\t\tself.decoder = nn.Sequential(\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=False),\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=False),\n\n\t\t\tAdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=256, dim_out=128, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=128, dim_out=64, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=64, dim_out=32, style_dim=config['style_dim'], upsample=True),\n\t\t)\n\n\t\tself.to_rgb = nn.Sequential(\n\t\t\tnn.InstanceNorm2d(num_features=32, affine=True),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\t\t\tnn.Conv2d(in_channels=32, out_channels=3, kernel_size=1, stride=1, padding=0)\n\n\t\t\t# TODO: tanh?\n\t\t)\n\n\t\tself.apply(self.weights_init)\n"}