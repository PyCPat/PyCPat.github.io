{"BEFORE":"        super(UNetBase, self).__init__()\n\n        assert len(channel_in_between) >= 1, f\"[{self.__class__.__name__}] Please specify the number of channels for at least 1 layer.\"\n\n        self.to_remain_size = to_remain_size\n        if to_remain_size:\n            self.image_size = image_size\n\n        self.encoder = UNetEncoder(input_channel, channel_in_between)\n        self.middle_layer = self._build_middle_layer(channel_in_between[-1], middle_channel)\n        self.decoder = UNetDecoder(middle_channel, channel_in_between[::-1])\n        self.output_layer = nn.Conv2d(channel_in_between[0], output_channel, kernel_size=1)\n","AFTER":"        super().__init__()\n\n        assert len(channel_in_between) >= 1, f\"[{self.__class__.__name__}] Please specify the number of channels for at least 1 layer.\"\n\n        self.channel_in_between = channel_in_between\n"}