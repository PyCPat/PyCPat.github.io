{"BEFORE":"\t\tself.linear = nn.Linear(\n\t\t\tin_features=self.config['discriminator']['filters'] * (2 ** (self.config['discriminator']['n_layers'] - 1)),\n\t\t\tout_features=1\n\t\t)\n\n\t\tself.class_embedding = nn.Embedding(\n\t\t\tnum_embeddings=config['n_classes'],\n\t\t\tembedding_dim=self.config['discriminator']['filters'] * (2 ** (self.config['discriminator']['n_layers'] - 1))\n\t\t)\n","AFTER":"\t\tlayers = []\n\t\tfor i in range(self.config['discriminator']['n_layers']):\n\t\t\tin_channels = self.config['discriminator']['filters'] * (2 ** (i - 1)) if i > 0 else 3\n\t\t\tout_channels = 2 * in_channels if i > 0 else self.config['discriminator']['filters']\n\n\t\t\tlayers += [\n\t\t\t\tnn.ReflectionPad2d(padding=1),\n\t\t\t\tnn.Conv2d(in_channels, out_channels, kernel_size=4, stride=2),\n\t\t\t\tnn.LeakyReLU(negative_slope=0.2, inplace=True)\n\t\t\t]\n\n\t\tlayers += [\n\t\t\tnn.Conv2d(in_channels=out_channels, out_channels=1, kernel_size=1, stride=1)\n\t\t]\n"}