{"BEFORE":"        xyz = xyz.unsqueeze(0).contiguous()\n        indices = furthest_point_sample(xyz, cfg.n_keypoints).squeeze(0).long()\n        keypoints = points[indices]\n        keypoints_xyz, keypoints_features = torch.split(keypoints, [3, 1], dim=-1)\n        voxel_features_i, voxel_coords_i = out[2]\n\n        voxel_coords_i = voxel_coords_i.unsqueeze(0).contiguous()\n        voxel_features_i = voxel_features_i.unsqueeze(0).permute(0, 2, 1).contiguous()\n        keypoints_xyz = keypoints_xyz.unsqueeze(0).contiguous()\n\n        _, out = self.pnet(voxel_coords_i, voxel_features_i, keypoints_xyz)\n","AFTER":"        keypoints_xyz, keypoints_features = self.sample_keypoints(xyz, point_features)\n        out = [(point_features, xyz)] + out\n        for i in range(len(self.cfg.strides)):\n            voxel_features_i, voxel_coords_i = out[i]\n            voxel_coords_i = voxel_coords_i.unsqueeze(0).contiguous()\n            voxel_features_i = voxel_features_i.unsqueeze(0).permute(0, 2, 1).contiguous()\n            keypoints_xyz = keypoints_xyz.unsqueeze(0).contiguous()\n            _, out = self.pnets[i](voxel_coords_i, voxel_features_i, keypoints_xyz)\n        return out\n"}