{"BEFORE":"        factors = torch.exp(self.static_weight * x \/\n                            (1.0 + self.weight * x))\n        factors = factors[:, torch.tril(\n            torch.ones(self.nelec, self.nelec)) == 0].prod(1)\n        return factors.view(-1, 1)\n","AFTER":"    def forward(self, pos, derivative=0):\n        \"\"\"Compute the Jastrow factors as :\n\n        .. math::\n            J(ri,rj) = \\Prod_{i,j} \\exp(B_{ij}) with\n            B_{ij} = \\frac{b r_{i,j}}{1+b'r_{i,j}}\n\n        Args:\n            pos ([type]): [description]\n            derivative (int, optional): [description]. Defaults to 0.\n\n        Returns:\n            [type]: [description]\n        \"\"\"\n\n        r = self.edist(pos)\n        jast = self._get_jastrow_elements(r)\n\n        if derivative == 0:\n            return self._unique_pair_prod(jast)\n\n        elif derivative == 1:\n            return self._jastrow_derivative(r, jast)\n\n    def _get_jastrow_elements(self, r):\n"}