{"BEFORE":"    def forward(self, x, H, W):\n        if self.gamma_1 is None:\n            x = x + self.drop_path(self.attn(self.norm1(x), H, W))\n            x = x + self.drop_path(self.mlp(self.norm2(x)))\n        else:\n            x = x + self.drop_path(\n                self.gamma_1 * self.attn(self.norm1(x), H, W))\n            x = x + self.drop_path(self.gamma_2 * self.mlp(self.norm2(x)))\n        if not self.window and self.aggregation != 'attn':\n            x = self.conv_aggregation(x, H, W)\n        return x\n","AFTER":"        shortcut = x\n        x = self.norm1(x)\n        # Window partition\n        if self.window_size > 0:\n            H, W = x.shape[1], x.shape[2]\n            x, pad_hw = window_partition(x, self.window_size)\n\n        x = self.attn(x)\n        # Reverse window partition\n        if self.window_size > 0:\n            x = window_unpartition(x, self.window_size, pad_hw, (H, W))\n\n        x = shortcut + self.drop_path(x)\n        x = x + self.drop_path(self.mlp(self.norm2(x)))\n\n        if self.use_residual_block:\n            x = self.residual(x.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)\n\n        return x\n"}