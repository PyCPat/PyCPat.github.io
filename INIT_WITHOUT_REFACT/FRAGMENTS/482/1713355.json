{"BEFORE":"        pos_idx = pos.unsqueeze(pos.dim()).expand_as(loc_data)\n        loc_p = loc_data[pos_idx].view(-1, 4) # select out the box should be positive from predictions\n        loc_t = loc_t[pos_idx].view(-1, 4) # same as above\n        loss_l = F.smooth_l1_loss(loc_p, loc_t, reduction='sum')\n\n        #Regression with Teacher Bounds\n        locT_p = locT[pos_idx].view(-1, 4) #same, select out teacher's boxes should be positive(the location prediciton of teacher)\n        loss_br = bounded_regression_loss(loc_p, locT_p, loc_t, self.reg_m)\n        loss_reg = loss_l + loss_br\n","AFTER":"        confT = torch.cat((confT, conf_data[:, 2916:, :]), 1)\n\n        # match priors (default boxes) and ground truth boxes\n        loc_t = torch.Tensor(num, num_priors, 4) # grond truch\n        conf_t = torch.LongTensor(num, num_priors) # ground truch\n        for idx in range(num):\n            truths = targets[idx][:, :-1].data.cuda()\n            labels = targets[idx][:, -1].data.cuda()\n            defaults = priors.data.cuda()\n            match(self.threshold, truths, defaults, self.variance, labels,\n                  loc_t, conf_t, idx) # use priorbox origin positon to match the groud truch to find out which result is to match the grond truth\n\n        # wrap targets\n        with torch.no_grad():\n            if self.use_gpu:\n                loc_t = loc_t.cuda(non_blocking=True)\n                conf_t = conf_t.cuda(non_blocking=True) # still not quite sure what this means\n\n        pos = conf_t > 0 # positive label from ground truth\n        num_pos = pos.sum(dim=1, keepdim=True)\n\n        # Localization Loss (Smooth L1)--------------------------------------------------------------------------------------------\n        # Shape: [batch,num_priors,4]\n        pos_idx = pos.unsqueeze(pos.dim()).expand_as(loc_data)\n        loc_p = loc_data[pos_idx].view(-1, 4) # select out the box should be positive from predictions\n        loc_t = loc_t[pos_idx].view(-1, 4) # same as above\n        loss_l = F.smooth_l1_loss(loc_p, loc_t, reduction='sum')\n\n        #Regression with Teacher Bounds\n        # locT_p = locT[pos_idx].view(-1, 4) #same, select out teacher's boxes should be positive(the location prediciton of teacher)\n        # loss_br = bounded_regression_loss(loc_p, locT_p, loc_t, self.reg_m)\n        loss_reg = loss_l# + loss_br\n"}