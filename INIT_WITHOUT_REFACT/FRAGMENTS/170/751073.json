{"BEFORE":"        self.dir_res_loss = build_loss(dir_res_loss)\n        self.size_class_loss = build_loss(size_class_loss)\n        self.size_res_loss = build_loss(size_res_loss)\n        self.semantic_loss = build_loss(semantic_loss)\n\n        assert vote_aggregation_cfg['mlp_channels'][0] == vote_moudule_cfg[\n            'in_channels']\n\n        self.bbox_coder = build_bbox_coder(bbox_coder)\n        self.num_sizes = self.bbox_coder.num_sizes\n        self.num_dir_bins = self.bbox_coder.num_dir_bins\n\n        self.vote_module = VoteModule(**vote_moudule_cfg)\n        self.vote_aggregation = build_sa_module(vote_aggregation_cfg)\n\n        prev_channel = vote_aggregation_cfg['mlp_channels'][-1]\n        conv_pred_list = list()\n        for k in range(len(feat_channels)):\n            conv_pred_list.append(\n                ConvModule(\n                    prev_channel,\n                    feat_channels[k],\n                    1,\n                    padding=0,\n                    conv_cfg=conv_cfg,\n                    norm_cfg=norm_cfg,\n                    bias=True,\n                    inplace=True))\n            prev_channel = feat_channels[k]\n        self.conv_pred = nn.Sequential(*conv_pred_list)\n\n        # Objectness scores (2), center residual (3),\n        # heading class+residual (num_dir_bins*2),\n        # size class+residual(num_sizes*4)\n        conv_out_channel = (2 + 3 + self.num_dir_bins * 2 +\n                            self.num_sizes * 4 + num_classes)\n        self.conv_pred.add_module('conv_out',\n                                  nn.Conv1d(prev_channel, conv_out_channel, 1))\n","AFTER":"        self.dir_res_loss = build_loss(dir_res_loss)\n        self.dir_class_loss = build_loss(dir_class_loss)\n        self.size_res_loss = build_loss(size_res_loss)\n        if size_class_loss is not None:\n            self.size_class_loss = build_loss(size_class_loss)\n        if semantic_loss is not None:\n            self.semantic_loss = build_loss(semantic_loss)\n\n        self.bbox_coder = build_bbox_coder(bbox_coder)\n        self.num_sizes = self.bbox_coder.num_sizes\n        self.num_dir_bins = self.bbox_coder.num_dir_bins\n\n        self.vote_module = VoteModule(**vote_module_cfg)\n        self.vote_aggregation = build_sa_module(vote_aggregation_cfg)\n\n        # Bbox classification and regression\n        self.conv_pred = BaseConvBboxHead(\n            **pred_layer_cfg,\n            num_cls_out_channels=self._get_cls_out_channels(),\n            num_reg_out_channels=self._get_reg_out_channels())\n"}