{"BEFORE":"        dic_z = self.dic.to(device)\n        prior = self.prior.to(device)\n        if len(proposals) == 2:\n            proposals1 = proposals[0].bbox.size(0)\n            proposals2 = proposals[1].bbox.size(0)\n\n            x1 = x[:proposals1]\n            x2 = x[proposals1:]\n\n\n            xz1, attn1 = self.z_dic(x1, dic_z, prior)\n            xz2, attn2 = self.z_dic(x2, dic_z, prior)\n\n            # a1 = self.causal_score(xz1)\n            # a2 = self.causal_score(xz2)\n            # if torch.isnan(a1).sum() or torch.isnan(a2).sum():\n            #     print(xz1)\n            #     print(xz2)\n            causal_logits_list = [self.causal_score(xz1), self.causal_score(xz2)]\n            attn_list = [attn1, attn2]\n\n        else:\n            xz, attn = self.z_dic(x, dic_z, prior)\n            causal_logits_list = [self.causal_score(xz)]\n\n            attn_list = [attn]\n\n        return causal_logits_list, attn_list\n","AFTER":"        dic_z = self.dic.to(device)\n        prior = self.prior.to(device)\n\n        box_size_list = [proposal.bbox.size(0) for proposal in proposals]\n        feature_split = x.split(box_size_list)\n        xzs = [self.z_dic(feature_pre_obj, dic_z, prior) for feature_pre_obj in feature_split]\n\n        causal_logits_list = [self.causal_score(xz) for xz in xzs]\n\n\n        return causal_logits_list\n"}