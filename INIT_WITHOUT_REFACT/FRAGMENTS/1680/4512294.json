{"BEFORE":"    def __init__(self, hparams):\n        super(Tacotron2, self).__init__()\n        self.mask_padding = hparams.mask_padding\n        self.fp16_run = hparams.fp16_run\n        self.n_mel_channels = hparams.n_mel_channels\n        self.n_frames_per_step = hparams.n_frames_per_step\n        self.embedding = nn.Embedding(\n            hparams.n_symbols, hparams.symbols_embedding_dim)\n        std = sqrt(2.0 \/ (hparams.n_symbols + hparams.symbols_embedding_dim))\n        val = sqrt(3.0) * std  # uniform bounds for std\n        self.embedding.weight.data.uniform_(-val, val)\n        self.encoder = Encoder(hparams)\n        self.decoder = Decoder(hparams)\n        self.postnet = Postnet(hparams)\n","AFTER":"    def __init__(self, model_cfg, n_vocab, embed_dim=512, mel_dim=80,\n                 max_decoder_steps=1000, stop_threshold=0.5, r=3, use_memory_mask=False):\n        super(Tacotron2, self).__init__()\n\n        self.mel_dim = mel_dim\n        self.use_memory_mask = use_memory_mask\n\n        # Embedding\n        self.embedding = nn.Embedding(n_vocab, embed_dim)\n        std = sqrt(2.0 \/ (n_vocab + embed_dim))\n        val = sqrt(3.0) * std  # uniform bounds for std\n        self.embedding.weight.data.uniform_(-val, val)\n\n        # Encoder\n        encoder_cfg = model_cfg[\"encoder\"]\n        encoder_out_dim = encoder_cfg[\"blstm_units\"]\n        self.encoder = Encoder(embed_dim, **encoder_cfg)\n\n        # Decoder\n        decoder_cfg = model_cfg[\"decoder\"]\n        self.decoder = Decoder(mel_dim, r, encoder_out_dim, **decoder_cfg,\n            max_decoder_steps=max_decoder_steps, stop_threshold=stop_threshold)\n\n        # Postnet\n        postnet_cfg = model_cfg[\"postnet\"]\n        self.postnet = Postnet(mel_dim, **postnet_cfg)\n"}