{"BEFORE":"        is_edge_like = is_edge_index(edge_index)\n\n        if self.normalize:\n            if is_edge_like:\n                edge_index, edge_weight = gcn_norm(\n                    edge_index, edge_weight, x.size(0), improved=False,\n                    add_self_loops=self.add_self_loops, dtype=x.dtype)\n            elif isinstance(edge_index, SparseTensor):\n                edge_index = gcn_norm(edge_index, x.size(0), improved=False,\n                                      add_self_loops=self.add_self_loops,\n                                      dtype=x.dtype)\n\n            else:\n                # N by N dense adjacency matrix\n                edge_index = dense_gcn_norm(edge_index, improved=False,\n                                            add_self_loops=self.add_self_loops)\n\n        return self.amp_forward(x, edge_index, edge_weight)\n","AFTER":"        if self.add_self_loops:\n            edge_index, edge_weight = make_self_loops(edge_index, edge_weight,\n                                                      num_nodes=x.size(0))\n\n        if self.normalize:\n            edge_index, edge_weight = make_gcn_norm(edge_index, edge_weight)\n\n        return self.amp_forward(x, edge_index, edge_weight)\n"}