{"BEFORE":"\t\ths = [torch.randn(x.size(0), self.args['hidden_size']).to(self.device) for _ in range(self.args['num_units'])]\n\t\tcs = None\n\t\tif self.args['rnn_cell'] == 'LSTM':\n\t\t\tcs = [torch.randn(x.size(0), self.args['hidden_size']).to(self.device) for _ in range(self.args['num_units'])]\n\n\t\txs = torch.split(x, 1, 1)\n\t\t#print(xs[0].size())\n\t\t#xs = [torch.squeeze(k) for k in xs]\n\t\tpreds = []\n\t\tfor k in xs:\n\t\t\ths, cs = self.rim_model(row_index, ind, k, hs, cs)\n\t\t\th = torch.cat(hs, dim = 1)\n\t\t\tpreds.append(self.Linear(h))\n\t\tpreds = torch.stack(preds, dim = 1)\n\t\tif y is not None:\n\t\t\tpreds_ = torch.transpose(preds, 1, 2)\n\t\t\t#print(preds.size())\n\n\t\t\ty = y.long()\n\t\t\tloss = self.Loss(preds_, torch.squeeze(y))\n\t\t\treturn preds, loss\n\t\treturn preds\n","AFTER":"\t\tx = x.float()\n\t\ths = torch.randn(x.size(0), self.args['num_units'], self.args['hidden_size']).to(self.device)\n\t\tcs = None\n\t\tif self.args['rnn_cell'] == 'LSTM':\n\t\t\tcs = torch.randn(x.size(0), self.args['num_units'], self.args['hidden_size']).to(self.device)\n\n\t\txs = torch.split(x, 1, 1)\n\t\t#print(xs[0].size())\n\t\t#xs = [torch.squeeze(k) for k in xs]\n\t\tpreds_ = []\n\t\tloss = 0\n\t\tfor i,k in enumerate(xs):\n\t\t\ths, cs = self.rim_model(row_index, ind, k, hs, cs)\n\t\t\t\n\t\t\tpreds = self.Linear(hs.contiguous().view(x.size(0), -1))\n\t\t\tpreds_.append(preds)\n\t\t\tif y is not None:\n\t\t\t\tloss+=self.Loss(preds, y[:,i].squeeze().long())\n\t\tpreds_ = torch.stack(preds_, dim = 1)\n\t\tif y is not None:\n\t\t\tloss\/=len(xs)\n\t\t\treturn preds_, loss\n\t\treturn preds_\n"}