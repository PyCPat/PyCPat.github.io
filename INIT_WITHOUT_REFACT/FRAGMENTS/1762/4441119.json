{"BEFORE":"        channels, resl, eps=1.e-8\n    ):\n        super().__init__()\n        \n        self.rho = nn.Parameter(torch.Tensor(1, channels, 1, 1))\n        self.rho.data.fill_(0.)\n\n        self.instance_norm = nn.InstanceNorm2d(channels, eps=eps, affine=False)\n        self.layer_norm    = nn.LayerNorm((channels, resl, resl), eps=eps, elementwise_affine=False)\n\n        self.gamma = nn.Parameter(torch.Tensor(1, channels, 1, 1))\n        self.beta  = nn.Parameter(torch.Tensor(1, channels, 1, 1))\n        self.gamma.data.fill_(1.)\n        self.beta.data.fill_(0.)\n","AFTER":"        self.layer_norm = get_normalization('ln', channels, affine=False)\n        self.instance_norm = get_normalization('in', channels, affine=False)\n        self.rho   = nn.Parameter(torch.ones(1, channels, 1, 1) * 0.5)\n        if affine:\n            self.affine = True\n            self.gamma = nn.Parameter(torch.ones(1, channels, 1, 1))\n            self.beta  = nn.Parameter(torch.zeros(1, channels, 1, 1))\n        else: self.affine = False\n\n    def forward(self, x):\n"}