{"BEFORE":"        if self.device_id is None:\n            kernel_norm = l2_norm(self.kernel, axis=0)\n            cos_theta = torch.mm(embbedings, kernel_norm)\n        else:\n            x = embbedings\n            sub_kernels = torch.chunk(self.kernel, len(self.device_id), dim=1)\n            temp_x = x.cuda(self.device_id[0])\n            kernel_norm = l2_norm(sub_kernels[0], axis=0).cuda(self.device_id[0])\n            cos_theta = torch.mm(temp_x, kernel_norm)\n            for i in range(1, len(self.device_id)):\n                temp_x = x.cuda(self.device_id[i])\n                kernel_norm = l2_norm(sub_kernels[i], axis=0).cuda(self.device_id[i])\n                cos_theta = torch.cat((cos_theta, torch.mm(temp_x, kernel_norm).cuda(self.device_id[0])), dim=1)\n\n        cos_theta = cos_theta.clamp(-1, 1)  # For numerical stability\n        phi = cos_theta - self.m\n        label = label.view(-1, 1)  # size=(B,1)\n        index = cos_theta.data * 0.0  # size=(B,Classnum)\n        index.scatter_(1, label.data.view(-1, 1), 1)\n        index = index.byte()\n","AFTER":"        kernel_norm = l2_norm(self.kernel, axis=0)\n        cos_theta = torch.mm(embbedings, kernel_norm)\n        cos_theta = cos_theta.clamp(-1, 1)  # For numerical stability\n        phi = cos_theta - self.m\n        label = label.view(-1, 1)  # size=(B,1)\n        index = cos_theta.data * 0.0  # size=(B,Classnum)\n        index.scatter_(1, label.data.view(-1, 1), 1)\n        index = index.bool()\n"}