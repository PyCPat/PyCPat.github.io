{"BEFORE":"            self.build([ii.shape for ii in inputs] if isinstance(inputs, (list, tuple)) else inputs.shape)\n        if isinstance(inputs, GraphNode) or (isinstance(inputs, (list, tuple)) and any([isinstance(ii, GraphNode) for ii in inputs])):\n            output_shape = self.compute_output_shape(self.input_shape)\n            # if isinstance(output_shape[0], (list, tuple))\n            cur_node = GraphNode(output_shape, name=self.name)\n            cur_node.module = self.module if len(args) == 0 and len(kwargs) == 0 else lambda inputs: self.module(inputs, *args, **kwargs)\n            cur_node.layer = self\n            cur_node.set_pre_nodes(inputs)\n\n            inputs = inputs if isinstance(inputs, (list, tuple)) else [inputs]\n            for ii in inputs:\n                ii.set_next_nodes(cur_node)\n            self.output = self.node = cur_node\n            return cur_node\n        else:\n            return self.module(inputs, *args, **kwargs)\n","AFTER":"            self.build([() if isinstance(ii, (int, float)) else ii.shape for ii in inputs] if isinstance(inputs, (list, tuple)) else inputs.shape)\n        if isinstance(inputs, GraphNode) or (isinstance(inputs, (list, tuple)) and any([isinstance(ii, GraphNode) for ii in inputs])):\n            output_shape = self.compute_output_shape(self.input_shape)\n            # if isinstance(output_shape[0], (list, tuple))\n            cur_node = GraphNode(output_shape, name=self.name)\n            if hasattr(self, \"call\"):  # General keras layers with call function, mostly own weights\n                cur_node.callable = self\n            else:\n                cur_node.callable = self.module if len(kwargs) == 0 else partial(self.module, **kwargs)\n            cur_node.layer = self\n"}