{"BEFORE":"            self._priv_cards = nn.Conv1d(in_channels=1,\n                                         out_channels=mpm_args.card_block_units, kernel_size=3, stride=1, padding=1)\n            self._board_cards = nn.Conv1d(in_channels=1,\n                                          out_channels=mpm_args.card_block_units, kernel_size=3, stride=1,\n                                          padding=1)\n\n            self.cards_cn_1 = nn.Conv1d(in_channels=2 * mpm_args.card_block_units,\n                                        out_channels=2 * mpm_args.card_block_units, kernel_size=3, stride=1,\n                                        padding=1)\n            self.cards_cn_2 = nn.Conv1d(in_channels=2 * mpm_args.card_block_units,\n                                        out_channels=mpm_args.card_block_units, kernel_size=3, stride=1,\n                                        padding=1)\n            self.cards_cn_3 = nn.Conv1d(in_channels=mpm_args.card_block_units,\n                                        out_channels=mpm_args.other_units, kernel_size=3, stride=1,\n                                        padding=1)\n\n            self.hist_and_state_1 = nn.Conv1d(in_channels=1,\n                                              out_channels=mpm_args.other_units, kernel_size=4, stride=1, padding=1)\n            self.hist_and_state_2 = nn.Conv1d(in_channels=mpm_args.other_units,\n                                              out_channels=mpm_args.other_units, kernel_size=4, stride=1, padding=1)\n\n            self.final_cn_1 = nn.Conv1d(in_channels=mpm_args.other_units,\n                                        out_channels=mpm_args.other_units, kernel_size=4, stride=1, padding=1)\n            self.final_fc_1 = nn.Linear(in_features=560, out_features=mpm_args.other_units)\n","AFTER":"            self.cards_cn_1 = nn.Conv2d(in_channels=1,\n                                        out_channels=mpm_args.card_block_units, kernel_size=(2, 2),\n                                        padding=1)\n            self.cards_cn_2 = nn.Conv2d(in_channels=mpm_args.card_block_units,\n                                        out_channels=mpm_args.card_block_units, kernel_size=(2, 2),\n                                        padding=0)\n            self.cards_cn_3 = nn.Conv2d(in_channels=mpm_args.card_block_units,\n                                        out_channels=mpm_args.card_block_units, kernel_size=(2, 2),\n                                        padding=1)\n            self.cards_cn_4 = nn.Conv2d(in_channels=mpm_args.card_block_units,\n                                        out_channels=mpm_args.card_block_units, kernel_size=(2, 2),\n                                        padding=0)\n            self.cards_cn_5 = nn.Conv2d(in_channels=mpm_args.card_block_units,\n                                        out_channels=1, kernel_size=(1, 1), stride=1,\n                                        padding=0)\n            #self.mpool = nn.MaxPool2d((2, 2), padding=0)\n\n            self.final_fc_1 = nn.Linear(in_features=192, out_features=mpm_args.other_units)\n\n        else:\n            raise ValueError('CNN requires pre_layers to be enabled')\n"}