{"BEFORE":"    def __init__(self, dataset_config, device=\"cpu\", **model_args):\n        super(VideoPredictionModel, self).__init__()\n        if dataset_config is not None:\n            self.img_shape = dataset_config[\"img_shape\"]\n            self.img_c = dataset_config[\"img_c\"]\n            self.img_h = dataset_config[\"img_h\"]\n            self.img_w = dataset_config[\"img_w\"]\n            self.action_size = dataset_config[\"action_size\"]\n            self.action_conditional = model_args.get(\"action_conditional\", False)\n            self.device = device\n\n            configurable_params = [\"action_conditional\"] + list(self._config.keys())\n            for model_arg in model_args.keys():\n                assert model_arg in configurable_params, f\"ERROR: encountered invalid model parameter '{model_arg}'. \" \\\n                                                         f\"Model '{self.NAME}' supports the following arguments: \" \\\n                                                         f\"{configurable_params}\"\n\n    @property\n","AFTER":"        self.img_shape = model_args.get(\"img_shape\", (None, None, None))  # h, w, c\n        self.img_h, self.img_wm, self.img_c = self.img_shape\n        self.action_size = model_args.get(\"action_size\", 0)\n        self.action_conditional = model_args.get(\"action_conditional\", False)\n        self.device = device\n\n        configurable_params = [\"action_conditional\"] + list(self._config.keys())\n        for model_arg in model_args.keys():\n            assert model_arg in configurable_params, f\"ERROR: encountered invalid model parameter '{model_arg}'. \" \\\n                                                     f\"Model '{self.NAME}' supports the following arguments: \" \\\n                                                     f\"{configurable_params}\"\n\n    @property\n"}