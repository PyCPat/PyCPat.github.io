{"BEFORE":"            total_blocks = sum([len(sx) for sx in x])\n            mask_size = torch.Size([total_blocks])\n            binomial = torch.distributions.binomial.Binomial(probs=1 - self.p)\n            mask = binomial.sample(mask_size) * (1.0 \/ (1 - self.p))\n            mask_id = 0\n            for mod in x:\n                for x_mod in mod:\n                    x_mod *= mask[mask_id]\n                    mask_id += 1\n            return x, mask\n","AFTER":"            blocks_per_mod = [sx.shape[1] for sx in X]\n            mask_size = torch.Size([X[0].shape[0], sum(blocks_per_mod)])\n            binomial = torch.distributions.binomial.Binomial(probs=1 - self.p)\n            mask = binomial.sample(mask_size) * (1.0 \/ (1 - self.p))\n            mask_shapes = [list(x.shape[:2]) + [1] * (x.dim() - 2) for x in X]\n            grouped_masks = torch.split(mask, blocks_per_mod, dim=1)\n            grouped_masks = [m.reshape(s) for m, s in zip(grouped_masks, mask_shapes)]\n            X = [x * m for x, m in zip(X, grouped_masks)]\n            return X, grouped_masks\n"}