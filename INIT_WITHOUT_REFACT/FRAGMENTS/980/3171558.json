{"BEFORE":"        self.conv_0 = nn.utils.spectral_norm(nn.Conv2d(4, num_channel, kernel_size=3, stride=2, bias=True))\n        self.inst_norm_0 = torch.nn.InstanceNorm2d(num_channel)\n\n        self.conv_1 = nn.utils.spectral_norm(nn.Conv2d(num_channel, 2 * num_channel, kernel_size=3, stride=2, bias=True))\n        self.inst_norm_1 = torch.nn.InstanceNorm2d(2 * num_channel)\n\n        self.conv_2 = nn.utils.spectral_norm(nn.Conv2d(2 * num_channel, 4 * num_channel, kernel_size=3, stride=2, bias=True))\n        self.inst_norm_2 = torch.nn.InstanceNorm2d(4 * num_channel)\n\n        self.conv_3 = nn.utils.spectral_norm(nn.Conv2d(4 * num_channel, 8 * num_channel, kernel_size=3, stride=2, bias=True))\n        self.inst_norm_3 = torch.nn.InstanceNorm2d(8 * num_channel)\n\n        self.conv_4 = nn.utils.spectral_norm(nn.Conv2d(8 * num_channel, 8 * num_channel, kernel_size=3, stride=2, bias=True))\n        self.inst_norm_4 = torch.nn.InstanceNorm2d(8 * num_channel)\n\n        self.conv_5 = nn.utils.spectral_norm(nn.Conv2d(8 * num_channel, 8 * num_channel, kernel_size=3, stride=2, bias=True))\n","AFTER":"        self.conv_0 = Conv2D(4, num_channel, kernel_size=3, stride=2, bias=True, use_spectrual_norm=True)\n        self.inst_norm_0 = torch.nn.InstanceNorm2d(num_channel)\n\n        self.conv_1 = Conv2D(num_channel, 2 * num_channel, kernel_size=3, stride=2, bias=True, use_spectrual_norm=True)\n        self.inst_norm_1 = torch.nn.InstanceNorm2d(2 * num_channel)\n\n        self.conv_2 = Conv2D(2 * num_channel, 4 * num_channel, kernel_size=3, stride=2, bias=True, use_spectrual_norm=True)\n        self.inst_norm_2 = torch.nn.InstanceNorm2d(4 * num_channel)\n\n        self.conv_3 = Conv2D(4 * num_channel, 8 * num_channel, kernel_size=3, stride=2, bias=True, use_spectrual_norm=True)\n\n        self.inst_norm_3 = torch.nn.InstanceNorm2d(8 * num_channel)\n\n        self.conv_4 = Conv2D(8 * num_channel, 8 * num_channel, kernel_size=3, stride=2, bias=True, use_spectrual_norm=True)\n        self.inst_norm_4 = torch.nn.InstanceNorm2d(8 * num_channel)\n\n        self.conv_5 = Conv2D(8 * num_channel, 8 * num_channel, kernel_size=3, stride=2, bias=True, use_spectrual_norm=True)\n"}