{"BEFORE":"        dLoss = self._loss(logitsCondition, torch.ones_like(logitsCondition)) + self._loss(logitsJoint, torch.zeros_like(logitsJoint))\n        if step % 2 == 0:\n            return dLoss\n        return -dLoss\n","AFTER":"        expMean = (logitsJoint.detach().logsumexp(0) - log(len(logitsJoint)))\n        self._ema -= self._alpha * (self._ema - expMean)\n        loss = EMALoss.apply(logitsJoint, self._ema)\n        # dLoss = self._loss(logitsCondition, torch.ones_like(logitsCondition)) + self._loss(logitsJoint, torch.zeros_like(logitsJoint))\n        return (-logitsCondition.mean()) + loss\n"}