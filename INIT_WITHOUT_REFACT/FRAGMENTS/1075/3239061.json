{"BEFORE":"        self.dim_head = dim \/\/ heads\n\n        self.to_q = nn.Linear(dim, dim, bias = False)\n\n        kv_dim = self.dim_head if one_kv_head else dim\n","AFTER":"    def __init__(self, dim, seq_len, k = 256, heads = 8, dim_head = None, one_kv_head = False, share_kv = False, dropout = 0.):\n        super().__init__()\n        assert (dim % heads) == 0, 'dimension must be divisible by the number of heads'\n\n        self.seq_len = seq_len\n        self.k = k\n\n        self.heads = heads\n\n        dim_head = default(dim_head, dim \/\/ heads)\n        self.dim_head = dim_head\n\n        self.to_q = nn.Linear(dim, dim_head * heads, bias = False)\n\n        kv_dim = dim_head if one_kv_head else (dim_head * heads)\n        self.to_k = nn.Linear(dim, kv_dim, bias = False)\n        self.proj_k = nn.Parameter(init_(torch.zeros(seq_len, k)))\n\n        self.share_kv = share_kv\n        if not share_kv:\n            self.to_v = nn.Linear(dim, kv_dim, bias = False)\n            self.proj_v = nn.Parameter(init_(torch.zeros(seq_len, k)))\n\n        self.dropout = nn.Dropout(dropout)\n        self.to_out = nn.Linear(dim_head * heads, dim)\n"}