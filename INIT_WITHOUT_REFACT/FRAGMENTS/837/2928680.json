{"BEFORE":"        if stride == 4:\n            blocks = [\n                nn.Conv2d(in_channel, channel \/\/ 2, 4, stride=2, padding=1),\n                nn.ReLU(inplace=True),\n                nn.Conv2d(channel \/\/ 2, channel, 4, stride=2, padding=1),\n                nn.ReLU(inplace=True),\n                nn.Conv2d(channel, channel, 3, padding=1),\n            ]\n\n        elif stride == 2:\n            blocks = [\n                nn.Conv2d(in_channel, channel \/\/ 2, 4, stride=2, padding=1),\n                nn.ReLU(inplace=True),\n                nn.Conv2d(channel \/\/ 2, channel, 3, padding=1),\n            ]\n","AFTER":"        blocks = []\n        strides = int(math.log2(stride))\n\n        if strides == 0:\n            blocks.append(nn.Conv2d(in_channel, channel \/\/ 2, 3, padding=1))\n            blocks.append(nn.ReLU(inplace=True))\n\n        for i in range(strides):\n            # first stride\n            if i == 0:\n                blocks.append(nn.Conv2d(in_channel, channel \/\/ 2, 4, stride=2, padding=1))\n            # last stride\n            elif i + 1 == strides:\n                blocks.append(nn.Conv2d(channel \/\/ 2, channel, 4, stride=2, padding=1))\n            # middle stride\n            else:\n                blocks.append(nn.Conv2d(channel \/\/ 2, channel \/\/ 2, 4, stride=2, padding=1))\n            blocks.append(nn.ReLU(inplace=True))\n\n        if strides <= 1:\n            strides.append(nn.Conv2d(channel \/\/ 2, channel, 3, padding=1))\n        else:\n            strides.append(nn.Conv2d(channel, channel, 3, padding=1))\n\n        for i in range(n_res_block):\n"}