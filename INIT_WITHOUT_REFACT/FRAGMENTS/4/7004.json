{"BEFORE":"        cut_point = self.forecast_basis.shape[0]\n        backcast = torch.einsum('bp,pt->bt', theta[:, cut_point:], self.backcast_basis)\n        forecast = torch.einsum('bp,pt->bt', theta[:, :cut_point], self.forecast_basis)\n","AFTER":"        polynomial_size = self.forecast_basis.shape[0] # [polynomial_size, L+H]\n        backcast_theta = theta[:, :polynomial_size]\n        forecast_theta = theta[:, polynomial_size:]\n        forecast_theta = forecast_theta.reshape(len(forecast_theta),polynomial_size,-1)\n        backcast = torch.einsum('bp,pt->bt', backcast_theta, self.backcast_basis)\n        forecast = torch.einsum('bpq,pt->btq', forecast_theta, self.forecast_basis)\n"}