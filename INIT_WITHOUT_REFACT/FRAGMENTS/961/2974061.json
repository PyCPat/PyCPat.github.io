{"BEFORE":"            enc_mean_t = self.enc_mean(enc_t)  # .view(batch_size, self.z_dim, self.n_mixtures)\n            enc_logvar_t = self.enc_logvar(enc_t)  # .view(batch_size, self.z_dim, self.n_mixtures)\n\n            # prior: z_t ~ N(0,1) (for KLD loss)\n            prior_mean_t = torch.zeros_like(enc_mean_t)\n            prior_logvar_t = torch.zeros_like(enc_mean_t)\n","AFTER":"        batch_size = y.size(0)\n        seq_len = y.shape[-1]\n\n        # allocation\n        loss = 0\n        # initialization\n        h = torch.zeros(self.n_layers, batch_size, self.h_dim, device=self.device)\n\n        # constant so can be outside of loop\n        # prior: z_t ~ N(0,1) (for KLD loss)\n        prior_mean_t = torch.zeros([batch_size, self.z_dim], device=self.device)\n        prior_logvar_t = torch.zeros([batch_size, self.z_dim], device=self.device)\n"}