{"BEFORE":"        h = torch.sum(h, dim=[2, 3])\n\n        if self.contrastive_training and not self.auxiliary_classifier and not self.projection_discriminator:\n            authen_output = torch.squeeze(self.linear5(h))\n            cls_anchor = self.embedding(label)\n            cls_embed = self.linear6(h)\n            if self.nonlinear_embed:\n                cls_embed = self.linear7(self.activation(cls_embed))\n            if self.normalize_embed:\n                cls_anchor = F.normalize(cls_anchor, dim=1)\n                cls_embed = F.normalize(cls_embed, dim=1)\n            return cls_anchor, cls_embed, authen_output\n\n        elif self.projection_discriminator and not self.contrastive_training and not self.auxiliary_classifier:\n            authen_output = torch.squeeze(self.linear5(h))\n            h_label = self.embedding(label)\n            proj = torch.mul(h, h_label)\n            cls_output = torch.sum(proj, dim=[1])\n            return None, None, authen_output + cls_output\n\n        elif self.auxiliary_classifier and not self.projection_discriminator and not self.contrastive_training:\n            authen_output = torch.squeeze(self.linear5(h))\n            cls_output = self.linear6(h)\n            return None, cls_output, authen_output\n        else:\n            authen_output = torch.squeeze(self.linear5(h))\n            return None, None, authen_output\n","AFTER":"        h = torch.sum(h, dim=[2, 3])\n\n        if self.conditional_strategy == 'no':\n            authen_output = torch.squeeze(self.linear1(h))\n            return authen_output\n        elif self.conditional_strategy == 'ContraGAN':\n            authen_output = torch.squeeze(self.linear1(h))\n            cls_proxy = self.embedding(label)\n            cls_embed = self.linear2(h)\n            if self.nonlinear_embed:\n                cls_embed = self.linear3(self.activation(cls_embed))\n            if self.normalize_embed:\n                cls_proxy = F.normalize(cls_proxy, dim=1)\n                cls_embed = F.normalize(cls_embed, dim=1)\n            return cls_proxy, cls_embed, authen_output\n\n        elif self.conditional_strategy == 'cGAN':\n            authen_output = torch.squeeze(self.linear1(h))\n            proj = torch.sum(torch.mul(self.embedding(label), h), 1)\n            return authen_output + proj\n        \n        elif self.conditional_strategy == 'ACGAN':\n            authen_output = torch.squeeze(self.linear1(h))\n            cls_output = self.linear4(h)\n            return cls_output, authen_output\n\n        else:\n            raise NotImplementedError\n"}