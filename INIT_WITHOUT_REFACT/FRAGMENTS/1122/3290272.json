{"BEFORE":"        self.image_layers = []\n\n        self.image_layers.append(nn.Sequential(\n            nn.Conv2d(in_channels=3, out_channels=8, kernel_size=7),\n            nn.Dropout(dropout_p),\n            nn.LeakyReLU(negative_slope=0.01, inplace=True),\n            nn.BatchNorm2d(num_features=8),\n            nn.MaxPool2d(2),\n        ))\n\n        self.image_layers.append(nn.Sequential(\n            nn.Conv2d(in_channels=8, out_channels=8, kernel_size=5),\n            nn.Dropout(dropout_p),\n            nn.LeakyReLU(negative_slope=0.01, inplace=True),\n            nn.BatchNorm2d(num_features=8),\n            nn.MaxPool2d(2),\n        ))\n        \n        self.image_layers.append(nn.Sequential(\n            nn.Conv2d(in_channels=8, out_channels=3, kernel_size=5),\n            nn.Dropout(dropout_p),\n            nn.LeakyReLU(negative_slope=0.01, inplace=True),\n            nn.BatchNorm2d(num_features=3),\n            nn.MaxPool2d(2),\n        ))\n\n        # self.image_layers.append(nn.Sequential(\n        #     nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3),\n        #     nn.Dropout(dropout_p),\n        #     nn.LeakyReLU(negative_slope=0.01, inplace=True),\n        #     nn.BatchNorm2d(num_features=3),\n        #     nn.MaxPool2d(2),\n        # ))\n\n        # self.image_layers.append(nn.Sequential(\n        #     nn.Conv2d(in_channels=3, out_channels=3, kernel_size=3),\n        #     nn.Dropout(dropout_p),\n        #     nn.LeakyReLU(negative_slope=0.01, inplace=True),\n        #     nn.BatchNorm2d(num_features=3),\n        #     nn.MaxPool2d(2),\n        # ))\n        self.image_layers.append(nn.Sequential(\n            nn.Conv2d(in_channels=3, out_channels=1, kernel_size=3),\n            nn.Dropout(dropout_p),\n            nn.LeakyReLU(negative_slope=0.01, inplace=True),\n            nn.BatchNorm2d(num_features=1),\n            nn.MaxPool2d(2),\n        ))\n\n        self.image_layer = nn.Sequential(*self.image_layers)\n\n        self.flatten_layer = nn.Sequential(\n            nn.Flatten(),\n        )\n        \n        IMG_LAYER_OUTPUT_SIZE = 9\n","AFTER":"    def __init__(self, input_shape, output_size=16, dropout_p = 0.2, num_conv_layers=2):\n        \"\"\"\n        Instantiate the model\n        \"\"\"\n        super(SmallRegularizedCNN, self).__init__()\n        \n        self.image_layers = []\n\n        self.image_layers.append(nn.Sequential(\n            nn.Conv2d(in_channels=3, out_channels=8, kernel_size=7),\n            nn.Dropout(dropout_p),\n            nn.LeakyReLU(negative_slope=0.01, inplace=True),\n            nn.BatchNorm2d(num_features=8),\n            nn.MaxPool2d(2),\n        ))\n\n        for _ in range(num_conv_layers):\n            self.image_layers.append(nn.Sequential(\n                nn.Conv2d(in_channels=8, out_channels=8, kernel_size=5),\n                nn.Dropout(dropout_p),\n                nn.LeakyReLU(negative_slope=0.01, inplace=True),\n                nn.BatchNorm2d(num_features=8),\n                #nn.MaxPool2d(2),\n            ))\n\n        self.image_layers.append(nn.Sequential(\n            nn.Conv2d(in_channels=8, out_channels=1, kernel_size=3),\n            nn.Dropout(dropout_p),\n            nn.LeakyReLU(negative_slope=0.01, inplace=True),\n            nn.BatchNorm2d(num_features=1),\n            nn.MaxPool2d(2),\n        ))\n\n        self.image_layer = nn.Sequential(*self.image_layers)\n\n        self.flatten_layer = nn.Sequential(\n            nn.Flatten(),\n        )\n        \n        IMG_LAYER_OUTPUT_SIZE = self._get_conv_output_size(input_shape)\n"}