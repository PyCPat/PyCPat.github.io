{"BEFORE":"        self.scale = torch.sqrt(torch.FloatTensor([head_num]))\n","AFTER":"    def __init__(self, device, time_steps=91, feature_dim=256, head_num=4, k=4):\n        super().__init__()\n\n        self.viewmodule_ = View((-1,time_steps,head_num, int(feature_dim\/head_num)))\n        self.layer_K_ = nn.Sequential(nn.Linear(feature_dim,feature_dim), nn.ReLU(), self.viewmodule_)\n        self.layer_V_ = nn.Sequential(nn.Linear(feature_dim,feature_dim), nn.ReLU(), self.viewmodule_)\n        self.layer_Q0_ = nn.Sequential(nn.Linear(feature_dim,feature_dim), nn.ReLU(), self.viewmodule_)\n        self.layer_Q_ = ScaleLayer(int(feature_dim\/head_num))\n\n        self.scale = torch.sqrt(torch.FloatTensor([head_num])).to(device)\n"}