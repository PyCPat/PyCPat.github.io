{"BEFORE":"        hr_img = first_image(x)\n        # This size determines a valid cropping region\n        common_size = image_gcd_size(x)\n        common_crop_size = get_common_crop_size(\n            self.size, get_image_size(hr_img), common_size, self.allow_smaller)\n        w, h = common_size\n        tw, th = common_crop_size\n        i = (h - th) \/\/ 2\n        j = (w - tw) \/\/ 2\n        common_crop_region = (i, j, th, tw)\n        return apply_all(x, lambda y: apply_crop(y, common_size, common_crop_region))\n","AFTER":"        if self.scales is not None:\n            scales = self.scales\n        common_size, size_ratios = get_crop_params(x, scales)\n        crop_ratio = size_ratios[0]\n        common_crop_size = (self.size[0] \/\/ crop_ratio[0], self.size[1] \/\/ crop_ratio[1])\n        w, h = common_size\n        tw, th = common_crop_size\n        i = (h - th) \/\/ 2\n        j = (w - tw) \/\/ 2\n        if not isinstance(x, (list, tuple)):\n            return crop(x, h, w, th, tw)\n        ret = []\n        for img, (rw, rh) in zip(x, size_ratios):\n            ret.append(crop(img, i * rh, j * rw, th * rh, tw * rw))\n        return ret\n"}