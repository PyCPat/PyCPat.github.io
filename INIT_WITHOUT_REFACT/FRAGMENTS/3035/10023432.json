{"BEFORE":"        out = self.cnn(features, coordinates, batch_size=1)\n        xyz, point_features = torch.split(points, [3, 1], dim=-1)\n        keypoints_xyz, keypoints_features = self.sample_keypoints(xyz, point_features)\n        out = [(point_features, xyz)] + out\n        for i in range(len(self.cfg.strides)):\n            voxel_features_i, voxel_coords_i = out[i]\n            voxel_coords_i = voxel_coords_i.unsqueeze(0).contiguous()\n            voxel_features_i = voxel_features_i.unsqueeze(0).permute(0, 2, 1).contiguous()\n            keypoints_xyz = keypoints_xyz.unsqueeze(0).contiguous()\n            _, out = self.pnets[i](voxel_coords_i, voxel_features_i, keypoints_xyz)\n        return out\n","AFTER":"        cnn_out = self.cnn(features, coordinates, batch_size=1)\n        point_xyz, point_features = torch.split(points, [3, 1], dim=-1)\n        cnn_out = [(point_xyz, point_features)] + cnn_out\n        keypoint_xyz, keypoint_features = self.sample_keypoints(point_xyz, point_features)\n        keypoint_xyz = keypoint_xyz.unsqueeze(0).contiguous()\n        pnet_out = self.pnet_forward(cnn_out, keypoint_xyz)\n        return pnet_out\n"}