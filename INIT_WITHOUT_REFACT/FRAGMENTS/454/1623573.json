{"BEFORE":"        x = t.flatten(input, 2, -1)\n        raw, rel = [], []\n        for i in range(self.att_num - 1):\n            x, re, ra = self.layers[\"attention_{}\".format(i)](x)\n            x = self.layers[\"tconv_{}\".format(i)](x)\n            rel.append(re)\n            raw.append(ra)\n\n        x, re, ra = self.layers[\"attention_{}\".format(self.att_num-1)](x)\n        rel.append(re)\n        raw.append(ra)\n\n        # we do not need to output a sequence, so only the last element is needed\n        x = t.squeeze(x[:, -1, :], dim=1)\n        if additional is not None:\n            x = t.cat((x, additional), dim=1)\n","AFTER":"    def forward(self, input: t.Tensor, time_steps=None, additional=None, only_use_last=True):\n        x = input\n        raw, rel = [], []\n        for i in range(self.att_num - 1):\n            x, re, ra = self.layers[\"attention_{}\".format(i)](x, time_steps)\n            x = self.layers[\"tconv_{}\".format(i)](x)\n            rel.append(re)\n            raw.append(ra)\n\n        x, re, ra = self.layers[\"attention_{}\".format(self.att_num-1)](x, time_steps)\n        rel.append(re)\n        raw.append(ra)\n\n        if additional is not None:\n            additional = t.cat([t.unsqueeze(additional, dim=1)] * x.shape[1], dim=1)\n            x = t.cat((x, additional), dim=2)\n        for i in range(self.fc_num):\n            x = self.layers[\"fc_{}\".format(i)](x)\n            if i != self.fc_num - 1:\n                x = self.activation(x)\n\n        if self.final_procecss is not None:\n            if self.final_procecss == \"softmax\":\n                x = t.softmax(x, dim=1).clone()\n            elif self.final_procecss == \"tanh\":\n                x = t.tanh(x).clone()\n            elif self.final_procecss == \"sigmoid\":\n                x = t.sigmoid(x).clone()\n            else:\n                x = self.final_procecss(x).clone()\n\n        if only_use_last:\n            # we do not need to output a sequence, so only the last element is needed\n            x = t.squeeze(x[:, -1, :], dim=1)\n\n        return x, rel, raw\n"}