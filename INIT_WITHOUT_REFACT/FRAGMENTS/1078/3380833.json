{"BEFORE":"        visible = guide.permute(0, 2, 1, 3)\n\n        shaking_pre = None\n\n        def add_presentation(all_prst, prst):\n            if all_prst is None:\n                all_prst = prst\n            else:\n                all_prst += prst\n            return all_prst\n\n        if self.only_look_after:\n            if \"lstm\" in self.shaking_type:\n                batch_size, _, matrix_size, vis_hidden_size = visible.size()\n                # mask lower triangle\n                upper_visible = (\n                    visible.permute(0, 3, 1, 2).triu().permute(0, 2, 3, 1).contiguous()\n                )\n\n                # visible4lstm: (batch_size * matrix_size, matrix_size, hidden_size)\n                visible4lstm = upper_visible.view(-1, matrix_size, vis_hidden_size)\n                span_pre, _ = self.lstm4span(visible4lstm)\n","AFTER":"        visible = guide.permute(0, 2, 1, 3)\n\n        shaking_pre = None\n\n        def add_presentation(all_prst, prst):\n            if all_prst is None:\n                all_prst = prst\n            else:\n                all_prst += prst\n            return all_prst\n\n        if self.only_look_after:\n            if \"lstm\" in self.shaking_type:\n                batch_size, _, matrix_size, vis_hidden_size = visible.shape\n                # mask lower triangle\n                mask = torch.ones(\n                    matrix_size, matrix_size, device=seq_hiddens.device).tril(-1).bool()[None, :, :, None]\n                # visible4lstm: (batch_size * matrix_size, matrix_size, hidden_size)\n                visible4lstm = visible.masked_fill(mask, 0).flatten(0, 1)\n\n                span_pre = self.lstm4span(visible4lstm)[0]\n"}