{"BEFORE":"        self._squeeze = nn.ModuleList([Transit(numCodewords, cin, order=\"last\") for numCodewords in k])\n        self._prob = nn.ModuleList([Transit(cin, numCodewords, order=\"first\") for numCodewords in k])\n        # self._encoder = nn.Transformer(cin, )\n        self._encoder = nn.TransformerEncoder(nn.TransformerEncoderLayer(cin, 8, cin, rate, \"gelu\"), 12, None)\n        self._decoder = nn.TransformerDecoder(nn.TransformerDecoderLayer(cin, 8, cin, rate, \"gelu\"), 12, None)\n        self._codebook = nn.ModuleList([nn.Linear(numCodewords, cin, bias=False) for numCodewords in k])\n","AFTER":"        for i, numCodewords in enumerate(k):\n            setattr(self, f\"codebook{i}\", nn.Parameter(torch.randn(numCodewords, cin)))\n        self._codebookAsKey = nn.ModuleList([nn.Linear(cin, cin) for numCodewords in k])\n        self._codebookAsValue = nn.ModuleList([nn.Linear(cin, cin) for numCodewords in k])\n        self._xAsQuery = nn.ModuleList([nn.Linear(cin, cin) for numCodewords in k])\n        self._k = k\n        self._scaling = [sqrt(kk) for kk in k]\n"}