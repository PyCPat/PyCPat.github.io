{"BEFORE":"        for key, task in task_flow.tasks.items():\n            setattr(self, key, FlowDictDecorator(task))\n","AFTER":"    def __init__(self, task_flow, prefix=''):\n        super().__init__()\n        self._task_flow = task_flow\n        # Save a reference to the flow function of the original class\n        # We will then call it by replacing the self, this way effectively running\n        # it with this class. And this class stores Pytorch modules as class attributes\n        self.flow = task_flow.get_flow_func()\n        self.prefix = prefix\n\n        for key, task in task_flow.tasks.items():\n            if not task.has_children():\n                instance = ModuleDecorator(task, prefix)\n            else:\n                instance = TaskFlowModule(task, prefix=f'{prefix}{task.get_name()}.')\n            setattr(self, key, instance)\n"}