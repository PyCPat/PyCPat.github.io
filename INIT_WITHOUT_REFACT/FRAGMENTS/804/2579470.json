{"BEFORE":"        edge_index = data.edge_index\n        vertex_slices = torch.Tensor(data.__slices__['x']).cpu().long()\n        edge_slices = torch.Tensor(data.__slices__['edge_index']).cpu().long()\n        batch = data.batch\n\n        if self.fake:\n            pers0, pers1 = self.compute_fake_persistence(\n            x, edge_index, vertex_slices, edge_slices, batch\n            )\n        else:\n            pers0, pers1 = self.compute_persistence(\n            x, edge_index, vertex_slices, edge_slices, batch\n            )\n\n\n        x0 = torch.cat(\n            [x, pers0.permute(1, 0, 2).reshape(pers0.shape[1], -1)], 1)\n\n        if self.dim1_flag:\n        # Dim 1 computations.\n            pers1_reshaped = pers1.permute(1,0,2).reshape(pers1.shape[1],-1)\n            pers1_mask = ~((pers1_reshaped==0).all(-1))\n            nodes_idx_dim1 = edge_index[:,pers1_mask]\n            x0_dim1 = torch.cat(\n                [ x[nodes_idx_dim1[0,:],:], x[nodes_idx_dim1[1,:],:], pers1_reshaped[pers1_mask]  ], 1)\n            x_dim1 = self.dim1_fn(x0_dim1, edge_slices, mask = pers1_mask)\n        else:\n            x_dim1 = None\n        \n        \n        for layer in self.set_fn0:\n            if isinstance(layer, DeepSetLayer):\n                x0 = layer(x0, batch)\n            else:\n                x0 = layer(x0)\n\n        # Collect valid\n        # valid_0 = (pers1 != 0).all(-1)\n\n        return x + self.bn(x0), x_dim1\n","AFTER":"        pers0, pers1 = self.compute_persistence(\n            x, edge_index, vertex_slices, edge_slices, batch\n        )\n\n        x0 = pers0.permute(1, 0, 2).reshape(pers0.shape[1], -1)\n\n        for layer in self.set_fn0:\n            if isinstance(layer, DeepSetLayer):\n                x0 = layer(x0, batch)\n            else:\n                x0 = layer(x0)\n\n        if self.dim1_flag:\n            # Dim 1 computations.\n            pers1_reshaped = pers1.permute(1, 0, 2).reshape(pers1.shape[1], -1)\n            pers1_mask = ~((pers1_reshaped == 0).all(-1))\n            x1 = pers1_reshaped[pers1_mask]\n            for layer in self.set_fn1:\n                if isinstance(layer, DeepSetLayerDim1):\n                    x1 = layer(x1, edge_slices, mask=pers1_mask)\n                else:\n                    x1 = layer(x1)\n        else:\n            x1 = None\n\n        # Collect valid\n        # valid_0 = (pers1 != 0).all(-1)\n        if self.residual_and_bn:\n            x0 = x + self.bn(x0)\n        else:\n            x0 = self.out(torch.cat([x, x0], dim=-1))\n\n        return x0, x1\n"}