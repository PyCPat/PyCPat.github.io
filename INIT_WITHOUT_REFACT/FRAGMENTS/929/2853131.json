{"BEFORE":"        x = self.shared(x)\n        if self.split_layer != 5:\n            x_v = self.v_private(x)\n            x_a = self.a_private(x)\n            x_v = x_v.squeeze().transpose(1, 2)\n            x_a = x_a.squeeze().transpose(1, 2)\n            if self.backend == 'gru':\n                x_v = self.gru_v(x_v)\n                x_a = self.gru_a(x_a)\n                return torch.cat((x_v, x_a), dim=-1)\n        else:\n            x = x.squeeze().transpose(1, 2)\n            if self.backend == 'gru':\n                x = self.gru(x)\n","AFTER":"    def forward(self, x, se, au):\n        x = self.shared(x)\n        if self.split_layer != 5:\n            x_v = self.v_private(x).squeeze()\n            x_a = self.a_private(x).squeeze()\n            x_v = torch.cat((x_v, se), dim=1) # valence \/ SENet\n            x_a = torch.cat((x_a, au), dim=1) # arousal \/ TCAE-AU\n            if self.backend == 'gru':\n                x_v = self.gru_v(x_v.transpose(1, 2))\n                x_a = self.gru_a(x_a.transpose(1, 2))\n                return torch.cat((x_v, x_a), dim=-1)\n        else:\n            x = x.squeeze()\n            x = torch.cat((x, se, au), dim=1)\n            if self.backend == 'gru':\n                x = self.gru(x.transpose(1, 2))\n"}