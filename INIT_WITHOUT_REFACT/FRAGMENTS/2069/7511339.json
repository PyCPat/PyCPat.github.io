{"BEFORE":"        latent = self.image_analysis(images)\n        hyper_latent = self.hyper_analysis(latent)\n        noisy_hyper_latent, hyper_latent_likelihoods = self.hyper_bottleneck(\n            hyper_latent\n        )\n        scales = self.hyper_synthesis(noisy_hyper_latent)\n\n        if scales.shape != latent.shape:\n            scales = _resize(scales, latent.shape[2:])\n\n        noisy_latent, latent_likelihoods = self.image_bottleneck(latent, scales)\n        reconstruction = self.image_synthesis(noisy_latent)\n\n        if reconstruction.shape != images.shape:\n            reconstruction = _resize(reconstruction, images.shape[2:])\n","AFTER":"        if not self.training:\n            images_shape = images.shape[-2:]\n            images = self._pad(images, images_shape)\n        else:\n            images_shape = None\n\n        latent = self.image_analysis(images)\n        hyper_latent = self.hyper_analysis(latent)\n        noisy_hyper_latent, hyper_latent_likelihoods = self.hyper_bottleneck(\n            hyper_latent\n        )\n        scales = self.hyper_synthesis(noisy_hyper_latent)\n\n        noisy_latent, latent_likelihoods = self.image_bottleneck(latent, scales)\n        reconstruction = self.image_synthesis(noisy_latent)\n\n        if not self.training:\n            assert images_shape is not None, \"image_shape not found\"\n            h, w = images_shape\n            reconstruction = reconstruction[..., :h, :w]\n"}