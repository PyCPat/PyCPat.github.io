{"BEFORE":"        self.shortcut = nn.Sequential()\n        if stride == 1 and in_planes != out_planes:\n            self.shortcut = nn.Sequential(\n                nn.Conv2d(in_planes, out_planes, kernel_size=1,\n                          stride=1, padding=0, bias=False),\n                nn.BatchNorm2d(out_planes),\n            )\n\n\n    def forward(self, x):\n","AFTER":"        self.expand_ratio = expand_ratio\n\n        # Expansion\n        planes = expand_ratio * in_planes\n        self.conv1 = nn.Conv2d(in_planes,\n                               planes,\n                               kernel_size=1,\n                               stride=1,\n                               padding=0,\n                               bias=False)\n        self.bn1 = nn.BatchNorm2d(planes)\n\n        # Depthwise conv\n        self.conv2 = nn.Conv2d(planes,\n                               planes,\n                               kernel_size=kernel_size,\n                               stride=stride,\n                               padding=(kernel_size - 1) \/\/ 2,\n                               groups=planes,\n                               bias=False)\n        self.bn2 = nn.BatchNorm2d(planes)\n\n        # SE layers\n        se_planes = max(1, int(planes * se_ratio))\n        self.se1 = nn.Conv2d(planes, se_planes, kernel_size=1)\n        self.se2 = nn.Conv2d(se_planes, planes, kernel_size=1)\n\n        # Output\n        self.conv3 = nn.Conv2d(planes,\n                               out_planes,\n                               kernel_size=1,\n                               stride=1,\n                               padding=0,\n                               bias=False)\n        self.bn3 = nn.BatchNorm2d(out_planes)\n\n        self.shortcut = (stride == 1) and (in_planes == out_planes)\n"}