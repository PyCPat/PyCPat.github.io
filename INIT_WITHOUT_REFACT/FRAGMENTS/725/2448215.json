{"BEFORE":"    def __init__(self):\n        super().__init__()\n\n        resl2ch = {\n            4   : 512,\n            8   : 512,\n            16  : 256,\n            32  : 128,\n            64  :  64,\n            128 :  32,\n        }\n\n        self.from_rgb = nn.Sequential(\n            EqualizedConv2d(3, resl2ch[128], 1, bias=False),\n            FusedLeakyReLU(resl2ch[128])\n        )\n\n        layers = []\n        for resl in list(resl2ch.keys())[::-1]:\n            layers += [\n                ResBlock(resl2ch[resl], resl2ch[resl\/\/2])\n            ]\n            if resl == list(resl2ch.keys())[1]:\n                break\n        \n        layers.append(MiniBatchStd())\n        layers += [\n            EqualizedConv2d(resl2ch[4]+1, resl2ch[4], 3, padding=1, bias=False),\n            FusedLeakyReLU(resl2ch[4]),\n            Flatten(),\n            EqualizedLinear(resl2ch[4]*4**2, resl2ch[4]),\n            FusedLeakyReLU(resl2ch[4]),\n            EqualizedLinear(resl2ch[4], 1)\n        ]\n","AFTER":"    def __init__(self, image_size=128, image_channels=3, channels=32, max_channels=512, block_num_conv=2, mbsd_groups=4):\n        super().__init__()\n        check_c = functools.partial(min, max_channels)\n        ochannels = channels\n        self.from_rgb = nn.Sequential(\n            Conv2d('elr', image_channels, ochannels, 1),\n            nn.LeakyReLU(0.2, inplace=True)\n        )\n        resl = image_size\n        blocks = []\n        while resl > 4:\n            resl = resl \/\/ 2\n            channels *= 2\n            ichannels, ochannels = ochannels, check_c(channels)\n            blocks.append(\n                DBlock(ichannels, ochannels, block_num_conv)\n            )\n        blocks.append(MiniBatchStdDev(mbsd_groups))\n        blocks.extend([\n            Conv2d('elr', ochannels+1, ochannels, 3, padding=1),\n            nn.LeakyReLU(0.2, inplace=True),\n            Flatten(),\n            Linear('elr', ochannels*(resl**2), ochannels),\n            nn.LeakyReLU(0.2, inplace=True),\n            Linear('elr', ochannels, 1)\n        ])\n"}