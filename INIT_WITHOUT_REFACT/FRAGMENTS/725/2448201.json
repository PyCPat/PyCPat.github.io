{"BEFORE":"        self._embedding_names: List[str] = []\n        table_names = set()\n        shared_feature: Dict[str, bool] = {}\n        for embedding_config in tables:\n            if embedding_config.name in table_names:\n                raise ValueError(f\"Duplicate table name {embedding_config.name}\")\n            table_names.add(embedding_config.name)\n            self.embeddings[embedding_config.name] = nn.Embedding(\n                num_embeddings=embedding_config.num_embeddings,\n                embedding_dim=embedding_config.embedding_dim,\n                device=device,\n            )\n            if not embedding_config.feature_names:\n                embedding_config.feature_names = [embedding_config.name]\n            for feature_name in embedding_config.feature_names:\n                if feature_name not in shared_feature:\n                    shared_feature[feature_name] = False\n                else:\n                    shared_feature[feature_name] = True\n\n        for embedding_config in tables:\n            for feature_name in embedding_config.feature_names:\n                if shared_feature[feature_name]:\n                    self._embedding_names.append(\n                        feature_name + \"@\" + embedding_config.name\n                    )\n                else:\n                    self._embedding_names.append(feature_name)\n","AFTER":"        self.embedding_dim: int = -1\n        table_names = set()\n        shared_feature: Dict[str, bool] = {}\n        for config in tables:\n            if config.name in table_names:\n                raise ValueError(f\"Duplicate table name {config.name}\")\n            table_names.add(config.name)\n            self.embedding_dim = (\n                config.embedding_dim if self.embedding_dim < 0 else self.embedding_dim\n            )\n            if self.embedding_dim != config.embedding_dim:\n                raise ValueError(\n                    \"All tables in a EmbeddingCollection are required to have same embedding dimension.\"\n                )\n            dtype = (\n                torch.float32 if config.data_type == DataType.FP32 else torch.float16\n            )\n            self.embeddings[config.name] = nn.Embedding(\n                num_embeddings=config.num_embeddings,\n                embedding_dim=config.embedding_dim,\n                device=device,\n                dtype=dtype,\n            )\n            if not config.feature_names:\n                config.feature_names = [config.name]\n            for feature_name in config.feature_names:\n                if feature_name not in shared_feature:\n                    shared_feature[feature_name] = False\n                else:\n                    shared_feature[feature_name] = True\n\n        self.embedding_names_by_table: List[List[str]] = []\n        for config in tables:\n            embedding_names = []\n            for feature_name in config.feature_names:\n                if shared_feature[feature_name]:\n                    embedding_names.append(feature_name + \"@\" + config.name)\n                else:\n                    embedding_names.append(feature_name)\n            self.embedding_names_by_table.append(embedding_names)\n"}