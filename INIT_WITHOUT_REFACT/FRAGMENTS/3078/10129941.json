{"BEFORE":"\t\tx = self.from_rgb(content_img)\n\n\t\tfor block in self.encoder:\n\t\t\tx = block(x)\n\n\t\tcontent_code = x\n\t\tif self.training and self.config['content_std'] != 0:\n\t\t\tnoise = torch.zeros_like(x)\n\t\t\tnoise.normal_(mean=0, std=self.config['content_std'])\n\n\t\t\tx = x + noise\n\n\t\tif self.training and self.config['style_std'] != 0:\n\t\t\tnoise = torch.zeros_like(style_code)\n\t\t\tnoise.normal_(mean=0, std=self.config['style_std'])\n\n\t\t\tstyle_code = style_code + noise\n\n\t\tfor block in self.decoder:\n\t\t\tx = block(x, style_code)\n\n\t\treturn {\n\t\t\t'img': self.to_rgb(x),\n\t\t\t'content_code': content_code.reshape(x.shape[0], -1)\n\t\t}\n","AFTER":"\t\t\tnoise = torch.zeros_like(content_code)\n\t\t\tnoise.normal_(mean=0, std=self.config['content_std'])\n\n\t\t\tcontent_code = content_code + noise\n\n\t\tif self.training and self.config['style_std'] != 0:\n\t\t\tnoise = torch.zeros_like(style_code)\n\t\t\tnoise.normal_(mean=0, std=self.config['style_std'])\n\n\t\t\tstyle_code = style_code + noise\n\n\t\tx = content_code\n\t\tfor block in self.decoder:\n\t\t\tx = block(x, style_code)\n\n\t\treturn self.to_rgb(x)\n"}