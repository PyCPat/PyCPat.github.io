{"BEFORE":"        n_units = self.n_units\n        \n        real, imag = torch.split(input, [n_units \/\/ 2, n_units \/\/ 2], dim=1)\n        magnitude = torch.sqrt(real**2 + imag**2)\n        output_magnitude = magnitude + self.bias\n        ratio = output_magnitude \/ (magnitude + self.eps)\n        ratio = torch.where(output_magnitude >= 0, ratio, torch.zeros_like(magnitude))\n        real, imag = ratio * real, ratio * imag\n        output = torch.cat([real, imag], dim=1)\n","AFTER":"        is_complex = torch.is_complex(input)\n\n        if not is_complex:\n            input = torch.view_as_complex(input)\n        \n        magnitude = torch.abs(input)\n        angle = torch.angle(input)\n        magnitude = F.relu(magnitude + self.bias.unsqueeze(dim=-1))\n        output = magnitude * torch.exp(1j * angle)\n        \n        if not is_complex:\n            output = torch.view_as_real(output)\n        \n        return output\n"}