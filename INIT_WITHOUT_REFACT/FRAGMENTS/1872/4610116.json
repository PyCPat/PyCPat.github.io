{"BEFORE":"        if dropout:\n            self._dropout = PointwiseDropout(0.05)\n        else:\n            self._dropout = None\n\n    def encode(self, latent):\n","AFTER":"    def __init__(self, m: int, k: int, d: int, dropout: bool = True, deterministic: bool = False, additionWeight: bool = True, ema: float = 0.8):\n        super().__init__()\n        self._m = m\n        d = d \/\/ m\n        self._codebook = nn.Parameter(torch.nn.init.kaiming_uniform_(torch.empty(m, k, d)))\n        if additionWeight:\n            self._wq = nn.Parameter(torch.nn.init.kaiming_uniform_(torch.empty(m, d, d)))\n            self._wk = nn.Parameter(torch.nn.init.kaiming_uniform_(torch.empty(m, d, d)))\n            self._wv = nn.Parameter(torch.nn.init.kaiming_uniform_(torch.empty(m, d, d)))\n        self._scale = math.sqrt(d)\n        self._additionWeight = additionWeight\n        self._deterministic = deterministic\n        self._temperature = nn.Parameter(torch.ones(()))\n"}