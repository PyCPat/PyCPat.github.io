{"BEFORE":"        m = self.model[-1]  # Detect()\n        if isinstance(m, Detect)or isinstance(m, ASFF_Detect):\n            s = 256  # 2x min stride\n            m.inplace = self.inplace\n            m.stride = torch.tensor([s \/ x.shape[-2] for x in self.forward(torch.zeros(1, ch, s, s))])  # forward\n            check_anchor_order(m)  # must be in pixel-space (not grid-space)\n            m.anchors \/= m.stride.view(-1, 1, 1)\n            self.stride = m.stride\n            if  m.decoupled:\n                LOGGER.info('decoupled done')\n                pass \n            else:\n                self._initialize_biases()  # only run once\n\n        # Init weights, biases\n        initialize_weights(self)\n","AFTER":"        m = self.model[-1]  # Detect()\n        if isinstance(m, Detect)or isinstance(m, ASFF_Detect)or isinstance(m, Decoupled_Detect):\n            s = 256  # 2x min stride\n            m.inplace = self.inplace\n            m.stride = torch.tensor([s \/ x.shape[-2] for x in self.forward(torch.zeros(1, ch, s, s))])  # forward\n            check_anchor_order(m)  # must be in pixel-space (not grid-space)\n            m.anchors \/= m.stride.view(-1, 1, 1)\n            self.stride = m.stride\n            # try:\n                # if m.decoupled:\n                    # LOGGER.info('decoupled done') \n            # except:    \n                # pass\n            try :\n                self._initialize_biases()  # only run once    \n                LOGGER.info('initialize_biases done') \n            except :\n                LOGGER.info('decoupled no biase ') \n\n        # Init weights, biases\n        initialize_weights(self)\n"}