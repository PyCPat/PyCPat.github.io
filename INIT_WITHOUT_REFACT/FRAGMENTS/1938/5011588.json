{"BEFORE":"        self\n    ):\n        pass\n","AFTER":"        self,\n        inp_channels:int=1,\n        num_layers:int=12,\n        initial_output_channels:int=24\n    ):\n        super(WaveUnet,self).__init__()\n\n        self.encoders = nn.ModuleList()\n        self.decoders = nn.ModuleList()\n        out_channels = initial_output_channels\n        for layer in range(num_layers):\n\n            encoder = WavenetEncoder(inp_channels,out_channels)\n            self.encoders.append(encoder)\n\n            inp_channels = out_channels\n            out_channels += initial_output_channels\n            if layer == num_layers -1 :\n                decoder = WavenetDecoder(num_layers * initial_output_channels + inp_channels,inp_channels)\n            else:\n                decoder = WavenetDecoder(inp_channels+out_channels,inp_channels)\n\n            self.decoders.insert(0,decoder)\n\n        bottleneck_dim = num_layers * initial_output_channels\n        self.bottleneck = nn.Sequential(\n            nn.Conv1d(bottleneck_dim,bottleneck_dim, 15, stride=1,\n                      padding=7),\n            nn.BatchNorm1d(bottleneck_dim),\n            nn.LeakyReLU(negative_slope=0.1, inplace=True)\n        )\n"}