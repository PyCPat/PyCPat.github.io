{"BEFORE":"        self.linear = nn.Linear(nz+label_width, 4 * 4 * ngf * 8) #4*4*512\n        self.main = nn.Sequential(\n            # state size: 4 x 4\n            nn.ConvTranspose2d(ngf * 8, ngf * 8, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf * 8),\n            nn.ReLU(True),\n            # state size. 8 x 8\n            nn.ConvTranspose2d(ngf * 8, ngf * 4, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf * 4),\n            nn.ReLU(True),\n            # state size. 16 x 16\n            nn.ConvTranspose2d(ngf * 4, ngf * 2, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf * 2),\n            nn.ReLU(True),\n            # state size. 32 x 32\n            nn.ConvTranspose2d(ngf * 2, ngf, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf),\n            nn.ReLU(True),\n            # state size. 64 x 64\n            nn.Conv2d(ngf, nc, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.Tanh()\n            # state size. (nc) x 64 x 64\n        )\n","AFTER":"        self.linear = nn.Linear(nz, 4 * 4 * ngf * 8) #4*4*512\n        self.conv1 = nn.Sequential(\n            # state size: 4 x 4\n            nn.ConvTranspose2d(ngf * 8, ngf * 8, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf * 8),\n            nn.ReLU(True),\n            # state size. 8 x 8\n        )\n        self.conv2 = nn.Sequential(\n            nn.ConvTranspose2d(ngf * 8, ngf * 4, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf * 4),\n            nn.ReLU(True),\n            # state size. 16 x 16\n            nn.ConvTranspose2d(ngf * 4, ngf * 2, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf * 2),\n            nn.ReLU(True),\n            # state size. 32 x 32\n            nn.ConvTranspose2d(ngf * 2, ngf, kernel_size=4, stride=2, padding=1, bias=bias), #h=2h\n            nn.BatchNorm2d(ngf),\n            nn.ReLU(True),\n            # state size. 64 x 64\n            nn.Conv2d(ngf, nc, kernel_size=3, stride=1, padding=1, bias=bias), #h=h\n            nn.Tanh()\n            # state size. (nc) x 64 x 64\n        )\n"}