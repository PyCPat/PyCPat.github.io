{"BEFORE":"        keys = sparse_features.keys()\n        assert len(keys) == len(self.offsets), f\"keys len: {len(keys)}, offsets len: {len(self.offsets)}\"\n\n        sparse_dict = sparse_features.to_dict()\n        flattened_sparse_features = torch.cat(\n            [sparse_dict[key].values() + offset for key, offset in zip(keys, self.offsets)])\n        batch_offsets = sparse_features.offsets()\n\n        batch_size = len(sparse_features.lengths()) \/\/ len(keys)\n        feature_size = len(keys)\n        flattened_sparse_embeddings = self.embedding(flattened_sparse_features,\n                                                 batch_offsets,\n                                                 send_shape=(batch_size, feature_size, -1))\n        return flattened_sparse_embeddings\n","AFTER":"        return self.embedding(sparse_features)\n"}