{"BEFORE":"        o3 = self.c3(c3)\n\n        out = self.upsample(o3, scale=self.scale)\n","AFTER":"    def forward(self, x, scale=None):\n        if self.scale is not None:\n            if scale is not None and scale != self.scale:\n                raise ValueError(f\"Network scale is {self.scale}, not {scale}\")\n            scale = self.scale\n        else:\n            if scale is None:\n                raise ValueError(f\"Network scale was not set\")\n        scale = self.scale\n        x = self.sub_mean(x)\n        x = self.entry(x)\n        c0 = o0 = x\n\n        b1 = self.b1(o0)\n        c1 = torch.cat([c0, b1], dim=1)\n        o1 = self.c1(c1)\n        \n        b2 = self.b2(o1)\n        c2 = torch.cat([c1, b2], dim=1)\n        o2 = self.c2(c2)\n        \n        b3 = self.b3(o2)\n        c3 = torch.cat([c2, b3], dim=1)\n        o3 = self.c3(c3)\n\n        out = self.upsample(o3, scale=scale)\n"}