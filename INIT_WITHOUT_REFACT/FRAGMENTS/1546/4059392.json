{"BEFORE":"                 num_filters=[128, 128, 256],\n                 norm_cfg=dict(type='BN', eps=1e-3, momentum=0.01)):\n        super(SECOND, self).__init__()\n        assert len(layer_strides) == len(layer_nums)\n        assert len(num_filters) == len(layer_nums)\n\n        if norm_cfg is not None:\n            Conv2d = partial(nn.Conv2d, bias=False)\n        else:\n            Conv2d = partial(nn.Conv2d, bias=True)\n\n        in_filters = [in_channels, *num_filters[:-1]]\n        # note that when stride > 1, conv2d with same padding isn't\n        # equal to pad-conv2d. we should use pad-conv2d.\n        blocks = []\n\n        for i, layer_num in enumerate(layer_nums):\n            norm_layer = (\n                build_norm_layer(norm_cfg, num_filters[i])[1]\n                if norm_cfg is not None else Empty)\n            block = [\n                nn.ZeroPad2d(1),\n                Conv2d(\n                    in_filters[i], num_filters[i], 3, stride=layer_strides[i]),\n                norm_layer,\n                nn.ReLU(inplace=True),\n            ]\n            for j in range(layer_num):\n                norm_layer = (\n                    build_norm_layer(norm_cfg, num_filters[i])[1]\n                    if norm_cfg is not None else Empty)\n                block.append(\n                    Conv2d(num_filters[i], num_filters[i], 3, padding=1))\n                block.append(norm_layer)\n","AFTER":"                 out_channels=[128, 128, 256],\n                 layer_nums=[3, 5, 5],\n                 layer_strides=[2, 2, 2],\n                 norm_cfg=dict(type='BN', eps=1e-3, momentum=0.01),\n                 conv_cfg=dict(type='Conv2d', bias=False)):\n        super(SECOND, self).__init__()\n        assert len(layer_strides) == len(layer_nums)\n        assert len(out_channels) == len(layer_nums)\n\n        in_filters = [in_channels, *out_channels[:-1]]\n        # note that when stride > 1, conv2d with same padding isn't\n        # equal to pad-conv2d. we should use pad-conv2d.\n        blocks = []\n        for i, layer_num in enumerate(layer_nums):\n            block = [\n                build_conv_layer(\n                    conv_cfg,\n                    in_filters[i],\n                    out_channels[i],\n                    3,\n                    stride=layer_strides[i],\n                    padding=1),\n                build_norm_layer(norm_cfg, out_channels[i])[1],\n                nn.ReLU(inplace=True),\n            ]\n            for j in range(layer_num):\n                block.append(\n                    build_conv_layer(\n                        conv_cfg,\n                        out_channels[i],\n                        out_channels[i],\n                        3,\n                        padding=1))\n                block.append(build_norm_layer(norm_cfg, out_channels[i])[1])\n"}