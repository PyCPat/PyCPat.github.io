{"BEFORE":"\t\tself.content_embedding = nn.Embedding(config['n_imgs'], config['content_dim'])\n\t\tself.style_embedding = nn.Embedding(config['n_imgs'], config['style_dim'])\n\t\tself.class_embedding = nn.Embedding(config['n_classes'], config['class_dim'])\n\n\t\tself.class_style_modulation = nn.Sequential(\n\t\t\tnn.Linear(in_features=config['class_dim'] + config['style_dim'], out_features=config['class_dim']),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\n\t\t\tnn.Linear(in_features=config['class_dim'], out_features=config['class_dim']),\n\t\t\tnn.LeakyReLU(negative_slope=0.2)\n\t\t)\n\n\t\tself.modulation = Modulation(config['class_dim'], n_adain_layers=4, adain_dim=256)\n\t\tself.decoder = Decoder(config['content_dim'], n_adain_layers=4, adain_dim=256, img_shape=config['img_shape'])\n\n\t\tself.apply(self.weights_init)\n","AFTER":"\t\tself.from_rgb = nn.Sequential(\n\t\t\tnn.Conv2d(in_channels=3, out_channels=256, kernel_size=3, stride=1, padding=1)\n\t\t)\n\n\t\tself.encoder = nn.Sequential(\n\t\t\tResBlk(dim_in=256, dim_out=512, normalize=True, downsample=True),\n\t\t\tResBlk(dim_in=512, dim_out=512, normalize=True, downsample=True),\n\t\t\t# ResBlk(dim_in=256, dim_out=256, normalize=True, downsample=True),\n\t\t\t# ResBlk(dim_in=256, dim_out=256, normalize=True, downsample=True),\n\n\t\t\tResBlk(dim_in=512, dim_out=512, normalize=True, downsample=False),\n\t\t\tResBlk(dim_in=512, dim_out=512, normalize=True, downsample=False)\n\t\t)\n\n\t\tself.decoder = nn.Sequential(\n\t\t\tAdainResBlk(dim_in=512, dim_out=512, style_dim=config['style_dim'], upsample=False),\n\t\t\tAdainResBlk(dim_in=512, dim_out=512, style_dim=config['style_dim'], upsample=False),\n\n\t\t\t# AdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=True),\n\t\t\t# AdainResBlk(dim_in=256, dim_out=256, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=512, dim_out=512, style_dim=config['style_dim'], upsample=True),\n\t\t\tAdainResBlk(dim_in=512, dim_out=256, style_dim=config['style_dim'], upsample=True)\n\t\t)\n\n\t\tself.to_rgb = nn.Sequential(\n\t\t\tnn.InstanceNorm2d(num_features=256, affine=True),\n\t\t\tnn.LeakyReLU(negative_slope=0.2),\n\t\t\tnn.Conv2d(in_channels=256, out_channels=3, kernel_size=1, stride=1, padding=0)\n\n\t\t\t# TODO: tanh?\n\t\t)\n\n\t\tself.apply(he_init)\n"}