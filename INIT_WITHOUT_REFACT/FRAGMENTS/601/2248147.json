{"BEFORE":"        self.out_channels = out_channels\n        assert self.out_channels in [1, 2,]\n        grayscale = nn.Conv2d(3, 1, kernel_size=1, stride=1, padding=0, bias=False)\n        grayscale.weight.data.fill_(1.0 \/ 3.0)\n        sobel_filter = nn.Conv2d(\n            1, self.out_channels, kernel_size=3, stride=1, padding=1, bias=False)\n        w = 1.414214 if self.isotropic else 2\n        sobel_filter.weight.data[0, 0].copy_(\n            torch.FloatTensor([[1,  0,  -1],\n                               [w,  0,  -w],\n                               [1,  0,  -1]]))\n        if self.out_channels == 2:\n            sobel_filter.weight.data[1, 0].copy_(\n                torch.FloatTensor([[ 1,  w,   1],\n                                   [ 0,  0,   0],\n                                   [-1, -w,  -1]]))\n","AFTER":"                 use_threshold=False,\n                 to_grayscale=True):\n        super(Sobel, self).__init__()\n        self.isotropic = isotropic\n        self.out_channels = out_channels\n        self.use_threshold = use_threshold\n        assert self.out_channels in [1, 2,]\n\n        if to_grayscale:\n            grayscale = nn.Conv2d(\n                in_channels=3, out_channels=1, kernel_size=1, bias=False)\n            grayscale.weight.data.fill_(1.0 \/ 3.0)\n        else:\n            grayscale = nn.Identity()\n        sobel_filter = nn.Conv2d(\n            in_channels=1, out_channels=self.out_channels, kernel_size=3, stride=1,\n            padding=1, padding_mode='reflect', bias=False)\n        w = 1.414214 if self.isotropic else 2\n        sobel_kernel = np.array([[1,  0,  -1],\n                                 [w,  0,  -w],\n                                 [1,  0,  -1]])\n        sobel_filter.weight.data[0, 0].copy_(\n            torch.from_numpy(sobel_kernel).type(torch.float32))\n        if self.out_channels == 2:\n            sobel_filter.weight.data[1, 0].copy_(\n                torch.from_numpy(sobel_kernel.T).type(torch.float32))\n"}