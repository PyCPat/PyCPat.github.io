{"BEFORE":"        self.norm_layer = norm_layer\n        self.act = act_layer\n\n        self.in_channel = layer_infos[0].in_ch\n        self.last_channels = layer_infos[-1].out_ch\n        self.out_channels = self.last_channels * 4\n\n        self.cur_block = 0\n        self.num_block = sum(stage.num_layers for stage in layer_infos)\n        self.stochastic_depth = stochastic_depth\n\n        self.features = nn.Sequential(\n            ConvBNAct(3, self.in_channel, 3, 2, 1, self.norm_layer, self.act),\n            *self.make_stages(layer_infos, block),\n            ConvBNAct(self.last_channels, self.out_channels, 1, 1, 1, self.norm_layer, self.act)\n        )\n","AFTER":"    def __init__(self, layer_infos, last_channel=1280, dropout=0.2, stochastic_depth=0.0, block=MBConv, act_layer=nn.SiLU, norm_layer=nn.BatchNorm2d):\n        super(EfficientNetV2, self).__init__()\n        self.layer_infos = layer_infos\n        self.norm_layer = norm_layer\n        self.act = act_layer\n\n        self.in_channel = layer_infos[0].in_ch\n        self.final_stage_channel = layer_infos[-1].out_ch\n        self.last_channel = last_channel\n\n        self.cur_block = 0\n        self.num_block = sum(stage.num_layers for stage in layer_infos)\n        self.stochastic_depth = stochastic_depth\n\n        self.stem = ConvBNAct(3, self.in_channel, 3, 2, 1, self.norm_layer, self.act)\n        self.blocks = nn.Sequential(*self.make_stages(layer_infos, block))\n        self.head = ConvBNAct(self.final_stage_channel, last_channel, 1, 1, 1, self.norm_layer, self.act)\n"}