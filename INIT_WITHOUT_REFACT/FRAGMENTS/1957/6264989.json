{"BEFORE":"        inter_channel = config.adjust_channels(config.in_ch, config.expand_ratio)\n        block = []\n\n        if config.fused:\n            block.append(ConvBNAct(config.in_ch, inter_channel, config.kernel, config.stride, 1, config.norm_layer, config.act))\n        else:\n            block.append(ConvBNAct(config.in_ch, inter_channel, 1, 1, 1, config.norm_layer, config.act))\n            block.append(ConvBNAct(inter_channel, inter_channel, config.kernel, config.stride, inter_channel, config.norm_layer, config.act))\n\n        if config.use_se:\n            block.append(SEUnit(inter_channel))\n\n        block.append(ConvBNAct(inter_channel, config.out_ch, 1, 1, 1, config.norm_layer, nn.Identity))\n        self.block = nn.Sequential(*block)\n","AFTER":"        inter_channel = config.adjust_channels(config.in_ch, config.expand_ratio)\n        block = []\n\n        if config.expand_ratio == 1:\n            block.append(('fused', ConvBNAct(config.in_ch, inter_channel, config.kernel, config.stride, 1, config.norm_layer, config.act)))\n        elif config.fused:\n            block.append(('fused', ConvBNAct(config.in_ch, inter_channel, config.kernel, config.stride, 1, config.norm_layer, config.act)))\n            block.append(('fused_point_wise', ConvBNAct(inter_channel, config.out_ch, 1, 1, 1, config.norm_layer, nn.Identity)))\n        else:\n            block.append(('linear_bottleneck', ConvBNAct(config.in_ch, inter_channel, 1, 1, 1, config.norm_layer, config.act)))\n            block.append(('depth_wise', ConvBNAct(inter_channel, inter_channel, config.kernel, config.stride, inter_channel, config.norm_layer, config.act)))\n            block.append(('se', SEUnit(inter_channel, 4 * config.expand_ratio)))\n            block.append(('point_wise', ConvBNAct(inter_channel, config.out_ch, 1, 1, 1, config.norm_layer, nn.Identity)))\n\n        self.block = nn.Sequential(OrderedDict(block))\n"}