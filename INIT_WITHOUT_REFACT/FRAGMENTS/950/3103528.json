{"BEFORE":"    def __init__(self, noise_dim: int = 100, dim: int = 64, data_shape: list = [3, 32, 32]):\n        super(Generator, self).__init__()\n        self.dim = dim\n        self.data_shape = data_shape\n        preprocess = nn.Sequential(\n            nn.Linear(noise_dim, 4 * 4 * 4 * dim)\n        )\n        preprocess_1 = nn.Sequential(\n            nn.BatchNorm2d(4 * 4 * 4 * dim),\n            nn.ReLU(True),\n        )\n        block1 = nn.Sequential(\n            nn.ConvTranspose2d(4 * dim, 2 * dim, 2, stride=2),\n            nn.BatchNorm2d(2 * dim),\n            nn.ReLU(True),\n        )\n        block2 = nn.Sequential(\n            nn.ConvTranspose2d(2 * dim, dim, 2, stride=2),\n            nn.BatchNorm2d(dim),\n            nn.ReLU(True),\n        )\n        deconv_out = nn.ConvTranspose2d(dim, 3, 2, stride=2)\n\n        self.preprocess = preprocess\n        self.preprocess_1 = preprocess_1\n        self.block1 = block1\n        self.block2 = block2\n        self.deconv_out = deconv_out\n","AFTER":"    def __init__(self, noise_dim: int = 100, dim: int = 64, data_shape: List[int] = [3, 32, 32]):\n        super().__init__()\n        self.noise_dim: int = noise_dim\n        self.dim: int = dim\n        self.data_shape: List[int] = data_shape\n        self.preprocess = nn.Linear(noise_dim, 4 * 4 * 4 * dim)\n        self.preprocess_1 = nn.Sequential(\n            nn.BatchNorm2d(4 * 4 * 4 * dim),\n            nn.ReLU(True),)\n        self.block1 = nn.Sequential(\n            nn.ConvTranspose2d(4 * dim, 2 * dim, 2, stride=2),\n            nn.BatchNorm2d(2 * dim),\n            nn.ReLU(True),)\n        self.block2 = nn.Sequential(\n            nn.ConvTranspose2d(2 * dim, dim, 2, stride=2),\n            nn.BatchNorm2d(dim),\n            nn.ReLU(True),)\n        self.deconv_out = nn.ConvTranspose2d(dim, 3, 2, stride=2)\n"}