{"BEFORE":"        for required_arg in self.REQUIRED_ARGS:\n            assert required_arg in model_args.keys(), f\"ERROR: model {self.NAME} requires parameter '{required_arg}'\"\n            setattr(self, required_arg, model_args[required_arg])\n            if required_arg == \"img_shape\":\n                self.img_h, self.img_w, self.img_c = self.img_shape\n            elif required_arg == \"tensor_value_range\":\n                assert isinstance(self.tensor_value_range, list) or isinstance(self.tensor_value_range, tuple)\n                assert len(self.tensor_value_range) == 2\n","AFTER":"        for required_arg in self.REQUIRED_ARGS:\n            if required_arg not in model_args.keys():\n                raise ValueError(f\"model {self.NAME} requires parameter '{required_arg}'\")\n            required_val = model_args[required_arg]\n\n            # pre-setattr checks\n            if required_arg == \"tensor_value_range\":\n                if type(required_val) not in [tuple, list] or len(required_val) != 2:\n                    raise ValueError(\"value for argument 'tensor_value_range' needs to be tuple or list with 2 elems\")\n\n            # set parameter\n            setattr(self, required_arg, required_val)\n"}