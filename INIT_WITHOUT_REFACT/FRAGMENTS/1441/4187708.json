{"BEFORE":"        width = self.image_width\n        out = self.model()\n\n        if not return_loss:\n            return out\n\n        cutn = 64\n        pieces = []\n        for ch in range(cutn):\n            size = torch.randint(int(.5 * width), int(.98 * width), ())\n            offsetx = torch.randint(0, width - size, ())\n            offsety = torch.randint(0, width - size, ())\n            apper = out[:, :, offsetx:offsetx + size, offsety:offsety + size]\n            apper = torch.nn.functional.interpolate(apper, (224, 224), mode = 'bilinear', align_corners = False)\n            pieces.append(normalize_image(apper))\n\n        image = torch.cat(pieces)\n","AFTER":"        out = self.model()\n\n        if not return_loss:\n            return out\n\n        cutout_specs = self.reg_config\n\n        pieces = []\n\n        for (num_images, (lo, hi), downsize) in cutout_specs:\n            for _ in range(num_images):\n                cutout = rand_cutout(out, ratio = (lo, hi))\n                if exists(downsize):\n                    cutout = interpolate(cutout, downsize)\n                resized_cutout = interpolate(cutout, 224)\n                pieces.append(normalize_image(resized_cutout))\n\n        image = torch.cat(pieces)\n"}