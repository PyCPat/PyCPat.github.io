{"BEFORE":"        mean = audio.mean(1, keepdim=True).detach()\n        std = (audio.var(1, keepdim=True).detach() + self.div_guard).sqrt()\n        return (audio - mean) \/ std\n","AFTER":"        self, audio: torch.Tensor, audio_lengths: torch.Tensor\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor]]:\n        \"\"\"Applies the normalization\n\n        Args:\n            audio : Audio tensor of shape [batch_size, time]\n\n        Returns:\n            Normalized audio tensor with same shape as input\n        \"\"\"\n        attention_mask: Optional[torch.Tensor] = None\n        if self.mask_input:\n            attention_mask = lengths_to_mask(\n                audio_lengths, max_len=audio.size(-1)\n            ).int()\n\n        return (\n            normalize_tensor(audio, attention_mask, div_guard=self.div_guard),\n            audio_lengths,\n        )\n"}