{"BEFORE":"        self.maxpooling_22 = nn.MaxPool2d(2, 2)\n        self.maxpooling_21 = nn.MaxPool2d((2, 2), (2, 1), (0, 1))\n        self.layer1 = self._make_layer(in_channels, 64, 3, 1, 1)\n        self.layer2 = self._make_layer(64, 128, 3, 1, 1)\n        self.layer3 = self._make_layer(128, 256, 3, 1, 1)\n        self.layer4 = self._make_layer(256, 256, 3, 1, 1)\n        self.layer5 = self._make_layer(256, 512, 3, 1, 1)\n        self.layer6 = self._make_layer(512, 512, 3, 1, 1)\n        self.layer7 = self._make_layer(512, 512, 2, 1, 0)\n        self.rnn = BidirectionalLSTM(512, rnn_size, number_class_symbols)\n","AFTER":"        lstm_len=3,\n    ):\n        super().__init__()\n        self.feature_extractor = get_resnet34_backbone(pretrained=True)\n        self.avg_pool = nn.AdaptiveAvgPool2d(\n            (time_feature_count, time_feature_count))\n        self.bilstm = BiLSTM(time_feature_count, lstm_hidden, lstm_len)\n        self.classifier = nn.Sequential(\n            nn.Linear(lstm_hidden * 2, time_feature_count),\n            nn.GELU(),\n            nn.Dropout(0.1),\n            nn.Linear(time_feature_count, number_class_symbols)\n        )\n"}