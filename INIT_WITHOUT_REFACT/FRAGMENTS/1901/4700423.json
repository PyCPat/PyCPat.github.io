{"BEFORE":"        self.nx = 0  # initialize number of x gridpoints\n        self.ny = 0  # initialize number of y gridpoints\n\n        if ONNX_EXPORT:\n            stride = [32, 16, 8][yolo_index]  # stride of this layer\n            nx = img_size[1] \/\/ stride  # number x grid points\n            ny = img_size[0] \/\/ stride  # number y grid points\n            create_grids(self, img_size, (nx, ny))\n\n    def forward(self, p, img_size, out):\n","AFTER":"    def __init__(self, anchors, nc, img_size, yolo_index, layers, stride):\n        super(YOLOLayer, self).__init__()\n        self.anchors = torch.Tensor(anchors)\n        self.index = yolo_index  # index of this layer in layers\n        self.layers = layers  # model output layer indices\n        self.stride = stride  # layer stride\n        self.nl = len(layers)  # number of output layers (3)\n        self.na = len(anchors)  # number of anchors (3)\n        self.nc = nc  # number of classes (80)\n        self.no = nc + 5  # number of outputs (85)\n        self.nx, self.ny = 0, 0  # initialize number of x, y gridpoints\n        self.anchor_vec = self.anchors \/ self.stride\n        self.anchor_wh = self.anchor_vec.view(1, self.na, 1, 1, 2)\n\n        if ONNX_EXPORT:\n            self.create_grids((img_size[1] \/\/ stride, img_size[0] \/\/ stride))  # number x, y grid points\n\n    def create_grids(self, ng=(13, 13), device='cpu'):\n"}