{"BEFORE":"        x = self.bn(x)\n        x_a = self.first_step(x)[:, self.n_d :]\n        sparse_loss = torch.zeros(1).to(x.device)\n        out = torch.zeros(x.size(0), self.n_d).to(x.device)\n        for step in self.steps:\n            x_te, l = step(x, x_a, priors)\n            out += F.relu(x_te[:, : self.n_d])  # split the feautre from feat_transformer\n            x_a = x_te[:, self.n_d :]\n            sparse_loss += l\n        return self.fc(out), sparse_loss\n","AFTER":"        sparse_loss = []\n        out = torch.zeros(x.size(0), self.n_d).to(x.device)\n        for step in self.steps:\n            x_te, l = step(x, x_a, priors)\n            out += F.relu(x_te[:, : self.n_d])  # split the feautre from feat_transformer\n            x_a = x_te[:, self.n_d :]\n            sparse_loss.append(l)\n        return self.fc(out), sum(sparse_loss)\n"}