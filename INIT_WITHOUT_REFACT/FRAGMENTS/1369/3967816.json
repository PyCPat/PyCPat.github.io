{"BEFORE":"        pearson = [neg_Pearson_Loss(prediction,targets) for prediction in predictions ]\r\n        # snr_loss = [si_snr(prediction,targets) for prediction in predictions ]\r\n\r\n        return torch.mean(torch.tensor(pearson))#torch.sum(torch.Tensor(pearson)) #+ torch.sum(torch.Tensor(snr_loss))#torch.mean(torch.tensor(pearson))\r\n","AFTER":"    def forward(self, predictions, targets, i, epoch):\r\n        # [f,l,r,t]\r\n        # (f >-< t,f <->r) (f >-< t, f<->l)\r\n        # (l >-< t, l <->f) (l >-<r, l <-> f)\r\n        # (r >-< t, r <->f) (r >-<r, r <-> f)\r\n\r\n        r_loss = 0\r\n        m_loss = 0\r\n        p_loss = 0\r\n\r\n        # pearson = [neg_Pearson_Loss(prediction,targets) for prediction in predictions ]\r\n\r\n        loss = neg_Pearson_Loss(predictions[i], targets)\r\n\r\n        # p_loss = mutual_information_loss(predictions[i], targets)\r\n\r\n        if epoch >= 400:\r\n            loss += phase_correlation_loss(predictions[i],targets)\r\n            loss += power_spectrum_loss(predictions[i], targets)\r\n        shrink_factor = 4\r\n\r\n\r\n        if epoch >= 700:\r\n            loss += mutual_information_loss(predictions[i], targets)\r\n\r\n\r\n        # p_loss = phase_correlation_loss(predictions[i], targets)\r\n            # if i == 0:\r\n            #     loss += (self.trip(predictions[0], targets, predictions[1].detach()) + self.trip(predictions[0], targets, predictions[2].detach()))\/shrink_factor\r\n            # elif i == 1:\r\n            #     loss += (self.trip(predictions[1], targets, predictions[0].detach()) + self.trip(predictions[1], predictions[2].detach(), predictions[0].detach()))\/shrink_factor\r\n            # else:\r\n            #     loss += (self.trip(predictions[2], targets, predictions[0].detach()) + self.trip(predictions[2], predictions[1].detach(), predictions[0].detach()))\/shrink_factor\r\n\r\n\r\n\r\n        return loss\r\n"}