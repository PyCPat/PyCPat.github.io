{"BEFORE":"    def forward(self, *inputs: torch.Tensor) -> torch.Tensor:\n        pass\n","AFTER":"    def forward(self, data: Dict[Union[ChannelEnum, str], torch.Tensor],\n                **kwargs) -> Dict[Union[ChannelEnum, str], torch.Tensor]:\n        input, norm_consts = self.assemble_input(data)\n\n        if self.num_samples > 1:\n            samples = []\n            for i in range(self.num_samples):\n                samples.append(self.forward_pass(input=input, data=data))\n\n            mean = torch.mean(torch.stack(samples), dim=0)\n            var = torch.var(torch.stack(samples), dim=0)\n\n            output = {ChannelEnum.RECONSTRUCTED_ELEVATION_MAP: mean,\n                      ChannelEnum.MODEL_UNCERTAINTY_MAP: var}\n\n        else:\n            x = self.forward_pass(input=input, data=data)\n\n            output = {ChannelEnum.RECONSTRUCTED_ELEVATION_MAP: x}\n\n        output = self.denormalize_output(data, output, norm_consts)\n\n        return output\n"}