{"BEFORE":"            x = layer(x) + residual_layer(x)\n\n        out = self.to_logits(x)\n\n        # self-supervised auto-encoding loss\n\n        reconstructed_img = self.decoder(x)\n\n        aux_loss = F.mse_loss(\n","AFTER":"        orig_img = x\n\n        for layer in self.non_residual_layers:\n            x = layer(x)\n\n        layer_outputs = []\n\n        for (layer, residual_layer) in self.residual_layers:\n            x = layer(x) + residual_layer(x)\n            layer_outputs.append(x)\n\n        out = self.to_logits(x)\n\n        # self-supervised auto-encoding loss\n\n        layer_8x8 = layer_outputs[-1]\n        layer_16x16 = layer_outputs[-2]\n\n        recon_img_8x8 = self.decoder1(layer_8x8)\n\n        aux_loss1 = F.mse_loss(\n            recon_img_8x8,\n            F.interpolate(orig_img, size = recon_img_8x8.shape[2:])\n        )\n\n        rand_quadrant = floor(random() * 4)\n\n        layer_16x16_part = rearrange(layer_16x16, 'b c (m h) (n w) -> (m n) b c h w', m = 2, n = 2)[rand_quadrant]\n        img_part = rearrange(orig_img, 'b c (m h) (n w) -> (m n) b c h w', m = 2, n = 2)[rand_quadrant]\n\n        recon_img_16x16 = self.decoder2(layer_16x16_part)\n\n        aux_loss2 = F.mse_loss(\n            recon_img_16x16,\n            F.interpolate(img_part, size = recon_img_16x16.shape[2:])\n        )\n\n        aux_loss = aux_loss1 + aux_loss2\n"}