{"BEFORE":"\t\tbatch_size = content_code.shape[0]\n\n\t\tif self.training and self.config['content_std'] != 0:\n\t\t\tnoise = torch.zeros_like(content_code)\n\t\t\tnoise.normal_(mean=0, std=self.config['content_std'])\n\n\t\t\tcontent_code = content_code + noise\n\n\t\tclass_code = self.class_embedding(class_id)\n\t\tclass_code_repeated = class_code.view((batch_size, -1, 1, 1)).repeat((1, 1, 16, 16))\n\t\tx = torch.cat((content_code, class_code_repeated), dim=1)\n\n\t\tfor block in self.adains:\n\t\t\tx = block(x, class_code)\n\n\t\treturn self.convs(x)\n","AFTER":"\t\tbatch_size = content_img_id.shape[0]\n\n\t\tcontent_code = self.content_embedding(content_img_id)\n\t\tcontent_code = content_code.view((batch_size, -1, 16, 16))\n\n\t\tif self.training and self.config['content_std'] != 0:\n\t\t\tnoise = torch.zeros_like(content_code)\n\t\t\tnoise.normal_(mean=0, std=self.config['content_std'])\n\n\t\t\tcontent_code_regularized = content_code + noise\n\t\telse:\n\t\t\tcontent_code_regularized = content_code\n\n\t\tclass_code = self.class_embedding(class_id)\n\t\tclass_code = class_code.view((batch_size, -1, 16, 16))\n\n\t\tx = torch.cat((content_code_regularized, class_code), dim=1)\n\n\t\tfor block in self.adains:\n\t\t\tx = block(x, class_code.view((batch_size, -1)))\n\n\t\treturn {\n\t\t\t'img': self.convs(x),\n\t\t\t'content_code': content_code\n\t\t}\n"}