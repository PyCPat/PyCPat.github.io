{"BEFORE":"        pretrained_dimension = field.vocab.vectors.size(-1)\n        self.pretrained_embeddings = [nn.Embedding(len(field.vocab), pretrained_dimension)]\n        self.pretrained_embeddings[0].weight.data = field.vocab.vectors\n        self.pretrained_embeddings[0].weight.requires_grad = False\n        dimension += pretrained_dimension\n        if self.project:\n            self.projection = Feedforward(dimension, trained_dimension)\n        dimension = trained_dimension\n","AFTER":"    def __init__(self, field, output_dimension, trained_dimension=0, dropout=0.0, project=True):\n        super().__init__()\n        self.field = field\n        self.project = project\n        dimension = 0\n        pretrained_dimension = field.vocab.vectors.size(-1)\n        self.pretrained_embeddings = nn.Embedding(len(field.vocab), pretrained_dimension)\n        self.pretrained_embeddings.weight.data = field.vocab.vectors\n        self.pretrained_embeddings.weight.requires_grad = False\n        dimension += pretrained_dimension\n\n        if trained_dimension > 0:\n            self.trained_embeddings = nn.Embedding(len(field.vocab), trained_dimension)\n        else:\n            self.trained_embeddings = None\n        if self.project:\n            self.projection = Feedforward(dimension, output_dimension)\n        dimension = output_dimension\n"}