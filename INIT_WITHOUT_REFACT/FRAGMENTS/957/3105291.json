{"BEFORE":"        self.proj = nn.Conv1d(dim_seq, dim_seq, 1)\n\n        self.act = act\n\n        init_eps \/= dim_seq\n        nn.init.uniform_(self.proj.weight, -init_eps, init_eps)\n        nn.init.constant_(self.proj.bias, 1.)\n","AFTER":"    def __init__(self, dim, dim_seq, causal = False, act = nn.Identity(), init_eps = 1e-3, use_circulant_matrix = False):\n        super().__init__()\n        dim_out = dim \/\/ 2\n        self.causal = causal\n\n        self.norm = nn.LayerNorm(dim_out)\n        self.proj = nn.Conv1d(dim_seq, dim_seq, 1)\n\n        self.act = act\n\n        # parameters\n\n        self.use_circulant_matrix = use_circulant_matrix\n        shape = (dim_seq,) if use_circulant_matrix else (dim_seq, dim_seq)\n        weight = torch.zeros(shape)\n\n        self.weight = nn.Parameter(weight)\n        init_eps \/= dim_seq\n        nn.init.uniform_(self.weight, -init_eps, init_eps)\n\n        self.bias = nn.Parameter(torch.ones(dim_seq))\n"}