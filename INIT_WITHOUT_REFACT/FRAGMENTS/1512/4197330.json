{"BEFORE":"        self.concat = concat\n        self.residual = residual\n        self.mode = mode # vanilla, res_mask\n\n        self.conv2 = []\n        self.up_conv = up_conv2x2(in_channels, out_channels, transpose=False)\n        if isinstance(norm, str):\n            if norm == 'bn':\n                norm = nn.BatchNorm2d\n            elif norm == 'in':\n                norm = nn.InstanceNorm2d\n            else:\n                raise TypeError(\"Unknown Type:\\t{}\".format(norm))\n        self.norm0 = norm(out_channels)\n\n        if self.concat:\n            if self.mode == 'res_mask':\n                k= 2*out_channels + 1\n            else:\n                k = 2*out_channels\n            self.conv1 = conv3x3(k, out_channels)\n            self.norm1 = norm(out_channels)\n        else:\n            self.conv1 = conv3x3(out_channels, out_channels)\n            self.norm1 = norm(out_channels)\n\n        for i in range(blocks):\n            self.conv2.append(conv3x3(out_channels, out_channels))\n","AFTER":"        self.concat = concat\n        self.residual = residual\n        self.mode = mode # vanilla, res_mask\n\n        self.up_conv = up_conv3x3(in_channels, out_channels, transpose=False)\n        if isinstance(norm, str):\n            if norm == 'bn':\n                norm = nn.BatchNorm2d\n            elif norm == 'in':\n                norm = nn.InstanceNorm2d\n            else:\n                raise TypeError(\"Unknown Type:\\t{}\".format(norm))\n        self.norm0 = norm(out_channels)\n\n        if self.concat:\n            conv1_in = 2*out_channels\n        else:\n            conv1_in = out_channels\n        self.conv1 = conv3x3(conv1_in, out_channels)\n        self.norm1 = norm(out_channels)\n\n        # residual structure\n        self.conv2 = []\n        self.conv3 = []\n        for i in range(blocks):\n            self.conv2.append(\n                nn.Sequential(*[\n                    nn.Conv2d(out_channels \/\/ 2 + 1, out_channels \/\/ 4, 5, 1, 2),\n                    nn.ReLU(True),\n                    nn.Conv2d(out_channels \/\/ 4, 1, 5, 1, 2),\n                    nn.Sigmoid()\n                ])\n            )\n            self.conv3.append(conv3x3(out_channels \/\/ 2, out_channels))\n        \n        self.bn = []\n        for _ in range(blocks):\n            self.bn.append(norm(out_channels))\n        self.bn = nn.ModuleList(self.bn)\n        self.conv2 = nn.ModuleList(self.conv2)\n        self.conv3 = nn.ModuleList(self.conv3)\n"}