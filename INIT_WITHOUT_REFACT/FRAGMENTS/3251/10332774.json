{"BEFORE":"        fpn_maps = [self._lateral[level](fm) for level, fm in enumerate(x.values())]\n\n        # Forward up\n        out_up = []\n        for idx, x in enumerate(reversed(fpn_maps), 1):\n            level = self._num_stages - idx - 1\n\n            if idx != 1:\n                x = x + up\n\n            if idx != self._num_stages:\n                up = self._up[level](x)\n\n            out_up.append(x)\n\n        # Forward out\n        outputs = {'P' + str(level): self._out[level](fm) for level, fm in enumerate(reversed(out_up))}\n","AFTER":"        lateral_out = [lateral(fmap) for lateral, fmap in zip(self._lateral, list(x.values())[-self._lateral_levels:])]\n\n        # Forward up\n        up_out = []\n        for idx, x in enumerate(reversed(lateral_out)):\n            if idx != 0:\n                x = x + up\n            \n            if idx < self._lateral_levels - 1:\n                up = self._up[idx](x)\n\n            up_out.append(x)\n\n        # Forward out\n        if self._seg_proxy:\n            out_fmaps = [(list(reversed(up_out))[stage], stage) for stage in self._required_stages]\n        else:\n            out_fmaps = zip(reversed(up_out), self._required_stages)\n\n        outputs = {'P' + str(stage): self._out[idx](fmap) for idx, (fmap, stage) in enumerate(out_fmaps)}\n"}