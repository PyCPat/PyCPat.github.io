{"BEFORE":"        mults = [2 ** i for i in reversed(range(num_heirarchies))]\n\n        layer_heads = list(map(lambda t: t * heads, mults))\n        layer_dims = list(map(lambda t: t * dim, mults))\n\n        layer_dims = [*layer_dims, layer_dims[-1]]\n        dim_pairs = zip(layer_dims[:-1], layer_dims[1:])\n\n        self.to_patch_embedding = nn.Sequential(\n            Rearrange('b c (h p1) (w p2) -> b (p1 p2 c) h w', p1 = patch_size, p2 = patch_size),\n            nn.Conv2d(patch_dim, layer_dims[0], 1),\n        )\n\n        block_repeats = cast_tuple(block_repeats, num_heirarchies)\n\n        self.layers = nn.ModuleList([])\n\n        for level, heads, (dim_in, dim_out), block_repeat in zip(reversed(range(num_heirarchies)), layer_heads, dim_pairs, block_repeats):\n","AFTER":"        heirarchies = list(reversed(range(num_heirarchies)))\n        mults = [2 ** i for i in heirarchies]\n\n        layer_heads = list(map(lambda t: t * heads, mults))\n        layer_dims = list(map(lambda t: t * dim, mults))\n\n        layer_dims = [*layer_dims, layer_dims[-1]]\n        dim_pairs = zip(layer_dims[:-1], layer_dims[1:])\n\n        self.to_patch_embedding = nn.Sequential(\n            Rearrange('b c (h p1) (w p2) -> b (p1 p2 c) h w', p1 = patch_size, p2 = patch_size),\n            nn.Conv2d(patch_dim, layer_dims[0], 1),\n        )\n\n        block_repeats = cast_tuple(block_repeats, num_heirarchies)\n\n        self.layers = nn.ModuleList([])\n\n        for level, heads, (dim_in, dim_out), block_repeat in zip(heirarchies, layer_heads, dim_pairs, block_repeats):\n"}