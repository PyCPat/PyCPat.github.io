{"BEFORE":"        raise NotImplementedError\n","AFTER":"    def forward(self, x, pred_length=1, **kwargs):\n        \"\"\" Predicts pred_length frames into the future. \"\"\"\n        # input: T frames: [b, T, c, h, w]\n        # output: pred_length (P) frames: [b, P, c, h, w]\n        preds = []\n        loss_dicts = []\n        for i in range(pred_length):\n            pred, loss_dict = self.pred_1(x, **kwargs)\n            pred = pred.unsqueeze(dim=1)\n            preds.append(pred)\n            loss_dicts.append(loss_dict)\n            x = torch.cat([x[:, 1:], pred], dim=1)\n\n        pred = torch.cat(preds, dim=1)\n        if loss_dicts[0] is not None:\n            loss_dict = {k: torch.mean([loss_dict[k] for loss_dict in loss_dicts]) for k in loss_dicts[0]}\n        else:\n            loss_dict = None\n        return pred, loss_dict\n"}