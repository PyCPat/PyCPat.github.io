{"BEFORE":"        global_ball_loss = self.ball_loss_criterion(pred_ball_position_global, target_ball_position)\n        local_ball_loss = self.ball_loss_criterion(pred_ball_position_local, target_ball_position)\n        event_loss = self.event_loss_criterion(pred_events, target_events)\n        seg_loss = self.seg_loss_criterion(pred_seg, target_seg)\n\n        total_loss = global_ball_loss + local_ball_loss + event_loss + seg_loss\n\n        return pred_ball_position_global, pred_ball_position_local, pred_events, pred_seg, total_loss, None\n","AFTER":"    def forward(self, original_batch_input, resize_batch_input, org_ball_pos_xy, global_ball_pos_xy, event_class, target_seg):\n        pred_ball_global, pred_ball_local, pred_events, pred_seg, local_ball_pos_xy = self.model(original_batch_input,\n                                                                                                 resize_batch_input,\n                                                                                                 org_ball_pos_xy)\n        # Create target for events spotting and ball position (local and global)\n        batch_size = pred_ball_global.size(0)\n        target_ball_global = torch.zeros_like(pred_ball_global)\n        target_ball_local = torch.zeros_like(pred_ball_global)\n        target_events = torch.zeros((batch_size, 2), device=self.device)\n        for idx in range(batch_size):\n            target_ball_global[idx] = create_target_ball(global_ball_pos_xy[idx], sigma=1., w=self.w, h=self.h,\n                                                         thresh_mask=0.01, device=self.device)\n            target_ball_local[idx] = create_target_ball(local_ball_pos_xy[idx], sigma=1., w=self.w, h=self.h,\n                                                        thresh_mask=0.01, device=self.device)\n            target_events[idx] = create_target_events(event_class[idx], device=self.device)\n\n        global_ball_loss = self.ball_loss_criterion(pred_ball_global, target_ball_global)\n        local_ball_loss = self.ball_loss_criterion(pred_ball_local, target_ball_local)\n        event_loss = self.event_loss_criterion(pred_events, target_events)\n        seg_loss = self.seg_loss_criterion(pred_seg, target_seg)\n\n        total_loss = global_ball_loss + local_ball_loss + event_loss + seg_loss\n\n        return pred_ball_global, pred_ball_local, pred_events, pred_seg, local_ball_pos_xy, total_loss, None\n"}