{"BEFORE":"        conv1 = []\n        conv1.append(RobustConv(in_features,\n                                hids[0],\n                                bias=bias,\n                                activation=activations.get(acts[0])))\n\n        if bn:\n            conv1.append(nn.BatchNorm1d(hids[0]))\n        self.conv1 = Sequential(*conv1)\n\n        conv2 = nn.ModuleList()\n        in_features = hids[0]\n\n        for hid, act in zip(hids[1:], acts[1:]):\n            conv2.append(RobustConv(in_features,\n                                    hid,\n                                    bias=bias,\n                                    gamma=gamma,\n                                    activation=activations.get(act)))\n            if bn:\n                conv2.append(nn.BatchNorm1d(hid))\n\n            in_features = hid\n        if bn:\n            conv2.append(nn.BatchNorm1d(in_features))\n        conv2.append(RobustConv(in_features, out_features, gamma=gamma, bias=bias))\n","AFTER":"        self.conv1 = RobustConv(in_features,\n                                hids[0],\n                                bias=bias,\n                                activation=activations.get(acts[0]))\n\n        if bn:\n            self.bn1 = nn.BatchNorm1d(hids[0])\n        else:\n            self.bn1 = lambda x : x\n\n        conv2 = nn.ModuleList()\n        bn2 = nn.ModuleList()\n\n        in_features = hids[0]\n        for hid, act in zip(hids[1:], acts[1:]):\n            conv2.append(RobustConv(in_features,\n                                    hid,\n                                    bias=bias,\n                                    gamma=gamma,\n                                    activation=activations.get(act)))\n            if bn:\n                bn2.append(nn.BatchNorm1d(hid))\n            else:\n                bn2.append(lambda x : x)\n                \n            in_features = hid\n                \n        conv2.append(RobustConv(in_features, out_features, gamma=gamma, bias=bias))\n        self.conv2 = conv2\n        self.bn2 = bn2\n"}