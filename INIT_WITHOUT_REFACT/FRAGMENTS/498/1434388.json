{"BEFORE":"        self.inplanes = 64\n        self.dilation = 1\n        self.groups = 1\n        self.base_width = 64\n\n        if pretrained:\n            self.stem = None\n            self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)\n            self.bn1 = nn.BatchNorm2d(self.inplanes)\n            self.relu = nn.ReLU(inplace=True)\n        else:\n            self.stem = nn.Sequential(\n                    nn.Conv2d(3, self.inplanes, kernel_size=3, stride=2, padding=1, bias=False),\n                    nn.BatchNorm2d(self.inplanes),\n                    nn.ReLU(inplace=True),\n                    nn.Conv2d(self.inplanes, self.inplanes, kernel_size=3, stride=1, padding=1, bias=False),\n                    nn.BatchNorm2d(self.inplanes),\n                    nn.ReLU(inplace=True),\n                    nn.Conv2d(self.inplanes, self.inplanes, kernel_size=3, stride=1, padding=1, bias=False),\n                    nn.BatchNorm2d(self.inplanes),\n                    nn.ReLU(inplace=True),\n                )            \n\n        self.depth = depth\n        if self.depth == 18:\n            (block, layers) = (BasicBlock, [2, 2, 2, 2])\n        elif self.depth == 34:\n            (block, layers) = (BasicBlock, [3, 4, 6, 3])\n        elif self.depth == 50:\n            (block, layers) = (Bottleneck, [3, 4, 6, 3])\n        elif self.depth == 101:\n","AFTER":"        self.version = version\n        if self.version == \"resnet18\":\n            (block, layers) = (BasicBlock, [2, 2, 2, 2])\n            self.out_channels = (256, 512)\n        elif self.version == \"resnet34\":\n            (block, layers) = (BasicBlock, [3, 4, 6, 3])\n            self.out_channels = (256, 512)\n        elif self.version == \"resnet50\":\n            (block, layers) = (Bottleneck, [3, 4, 6, 3])\n            self.out_channels = (1024, 2048)\n        elif self.version == \"resnet101\":\n            (block, layers) = (Bottleneck, [3, 4, 23, 3])\n            self.out_channels = (1024, 2048)\n        else:\n            raise ValueError\n\n        self.conv1 = nn.Conv2d(\n            3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False\n        )\n        self.bn1 = nn.BatchNorm2d(self.inplanes)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n\n        self.layer1 = self._make_layer(block, 64, layers[0])\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\n\n        if pretrained:\n            self.load_pre_trained_weights()\n\n            # freeze params\n            for module in [self.conv1, self.bn1, self.layer1]:\n                module.eval()\n                for param in module.parameters():\n                    param.requires_grad = False\n\n    def load_pre_trained_weights(self):\n"}