{"BEFORE":"    def __init__(self, C3_size=256, C4_size=512, C5_size=512, inner_p4=512, outer_p4=256, version='S'):\n        super(PyramidFeatures, self).__init__()\n        self.C3_size = C3_size\n        self.C4_size = C4_size\n        self.C5_size = C5_size\n\n        self.version = version\n        gains = {'s': {'gd': 0.33, 'gw': 0.5},\n                 'm': {'gd': 0.67, 'gw': 0.75},\n                 'l': {'gd': 1, 'gw': 1},\n                 'x': {'gd': 1.33, 'gw': 1.25}}\n\n        if self.version.lower() in gains:\n            # only for yolov5\n            self.gd = gains[self.version.lower()]['gd']  # depth gain\n            self.gw = gains[self.version.lower()]['gw']  # width gain\n        else:\n            self.gd = 0.33\n            self.gw = 0.5\n\n        self.channels_out = {\n            'inner_p4': inner_p4,\n            'outer_p4': outer_p4,\n        }\n        self.re_channels_out()\n        self.concat = Concat()\n\n        self.P5_upsampled = nn.Upsample(scale_factor=2, mode='nearest')\n\n        self.P4_1 = C3(self.C5_size + self.C4_size, self.channels_out['inner_p4'], self.get_depth(3), False)\n        self.P4_upsampled = nn.Upsample(scale_factor=2, mode='nearest')\n        self.P4_2 = Conv(self.channels_out['inner_p4'], self.channels_out['outer_p4'], 1, 1)\n        self.out_shape = {'P3_size': self.C3_size + self.channels_out['outer_p4'],\n                          'P4_size': self.channels_out['outer_p4'],\n                          'P5_size': self.C5_size}\n        print(\"FPN input channel size: C3 {}, C4 {}, C5 {}\".format(self.C3_size, self.C4_size, self.C5_size))\n        print(\"FPN output channel size: P3 {}, P4 {}, P5 {}\".format(self.C3_size + self.channels_out['outer_p4'], self.channels_out['outer_p4'],\n                                                                    self.C5_size))\n","AFTER":"        self.C3_size = C3_size\n        self.C4_size = C4_size\n        self.C5_size = C5_size\n        self.channels_outs = channel_outs\n        self.version = version\n        gains = {\n                'n': {'gd': 0.33, 'gw': 0.25},\n                's': {'gd': 0.33, 'gw': 0.5},\n                'm': {'gd': 0.67, 'gw': 0.75},\n                'l': {'gd': 1, 'gw': 1},\n                'x': {'gd': 1.33, 'gw': 1.25}\n                }\n\n        if self.version.lower() in gains:\n            # only for yolov5\n            self.gd = gains[self.version.lower()]['gd']  # depth gain\n            self.gw = gains[self.version.lower()]['gw']  # width gain\n        else:\n            self.gd = 0.33\n            self.gw = 0.5\n\n        self.re_channels_out()\n        self.concat = Concat()\n\n        self.P5 = Conv(self.C5_size, self.channels_outs[0], 1, 1)\n        self.P5_upsampled = nn.Upsample(scale_factor=2, mode='nearest')\n        self.conv1 = C3(self.channels_outs[0] + self.C4_size, self.channels_outs[0], self.get_depth(3), False)\n\n        self.P4 = Conv(self.channels_outs[0], self.channels_outs[1], 1, 1)\n        self.P4_upsampled = nn.Upsample(scale_factor=2, mode='nearest')\n\n        self.P3 = C3(self.channels_outs[1] + self.C3_size, self.channels_outs[1], self.get_depth(3), False)\n\n\n        self.out_shape = {'P3_size': self.channels_outs[1],\n                          'P4_size': self.channels_outs[1],\n                          'P5_size': self.channels_outs[0]}\n        print(\"FPN input channel size: C3 {}, C4 {}, C5 {}\".format(self.C3_size, self.C4_size, self.C5_size))\n        print(\"FPN output channel size: P3 {}, P4 {}, P5 {}\".format(self.channels_outs[1], self.channels_outs[1],\n                                                                    self.channels_outs[0]))\n"}