{"BEFORE":"        prob = F.relu(self.norm_pi1(self.fc_pi1(out)))\n        prob = self.fc_pi2(prob)\n        prob = F.softmax(prob, dim=2)\n\n        v = F.relu(self.norm_v1(self.fc_v1(out)))\n        v = self.fc_v2(v)\n\n        return prob, v, h_out\n","AFTER":"        avail = state_dict[\"avail\"]\n        \n        player_embed = self.norm_player(self.fc_player(player_state))\n        ball_embed = self.norm_ball(self.fc_ball(ball_state))\n        left_team_embed = self.norm_left(self.fc_left(left_team_state))\n        left_closest_embed = self.norm_left_closest(self.fc_left_closest(left_closest_state))\n        right_team_embed = self.norm_right(self.fc_right(right_team_state))\n        right_closest_embed = self.norm_right_closest(self.fc_right_closest(right_closest_state))\n        \n        left_team_embed = self.pool(left_team_embed).squeeze(2)\n        right_team_embed = self.pool(right_team_embed).squeeze(2)\n\n        cat = torch.cat([player_embed, ball_embed, left_team_embed, right_team_embed, left_closest_embed, right_closest_embed], 2)\n        cat = F.relu(self.norm_cat(self.fc_cat(cat)))\n        h_in = state_dict[\"hidden\"]\n        out, h_out = self.lstm(cat, h_in)\n        \n        a_out = F.relu(self.norm_pi_a1(self.fc_pi_a1(out)))\n        a_out = self.fc_pi_a2(a_out)\n        logit = a_out + (avail-1)*1e8\n        prob = F.softmax(logit, dim=2)\n        \n        prob_m = F.relu(self.norm_pi_m1(self.fc_pi_m1(out)))\n        prob_m = self.fc_pi_m2(prob_m)\n        prob_m = F.softmax(prob_m, dim=2)\n\n        v = F.relu(self.norm_v1(self.fc_v1(out)))\n        v = self.fc_v2(v)\n\n        return prob, prob_m, v, h_out\n"}