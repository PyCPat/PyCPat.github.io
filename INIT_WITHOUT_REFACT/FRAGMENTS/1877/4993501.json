{"BEFORE":"        self.crossnet = nn.ModuleList([CrossNetComp(config) for _ in range(self.depth)])\r\n        self.linear = nn.Linear(config[\"feature_num\"] * config[\"embedding_size\"], 1)\r\n        nn.init.normal_(self.linear.weight)\r\n        self.backbone = ['crossnet', 'linear', 'embedding_layer']\r\n        self.loss_fn = nn.BCELoss()\r\n        if torch.cuda.is_available():\r\n            self.device = torch.device('cuda')\r\n        else:\r\n            self.device = torch.device('cpu')\r\n\r\n    def FeatureInteraction(self, feature):\r\n","AFTER":"        self.depth = config[\"depth\"]\r\n        self.embedding_size = config[\"embedding_size\"]\r\n        self.feature_num = config[\"feature_num\"]\r\n        self.in_feature_num = self.feature_num * self.embedding_size\r\n        self.cross_layer_w = nn.ParameterList(\r\n            nn.Parameter(torch.randn(self.in_feature_num, self.in_feature_num)) for _ in range(self.depth)\r\n        )\r\n        self.bias = nn.ParameterList(nn.Parameter(torch.zeros(self.in_feature_num, 1)) for _ in range(self.depth))\r\n        self.linear = nn.Linear(self.in_feature_num, 1)\r\n"}