{"BEFORE":"            mask = x.abs() > 0.0\n            return normalize_tensor(x, mask, div_guard=self.div_guard)\n","AFTER":"        self, x: torch.Tensor, lengths: torch.Tensor\n    ) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Args:\n            x : Tensor of shape (batch, features, time)\n        \"\"\"\n        # https:\/\/github.com\/pytorch\/pytorch\/issues\/45208\n        # https:\/\/github.com\/pytorch\/pytorch\/issues\/44768\n        with torch.no_grad():\n            mask = lengths_to_mask(lengths, x.shape[-1])\n            return (\n                normalize_tensor(x, mask.unsqueeze(1), div_guard=self.div_guard),\n                lengths,\n            )\n"}