{"BEFORE":"    self.channels = global_params.channels\n    self.image_size = global_params.image_size\n    self.relu_negative_slope = global_params.relu_negative_slope\n\n    def block(in_features, out_features):\n      r\"\"\" Define neuron module layer.\n\n      Args:\n        in_features (int): size of each input sample.\n        out_features (int): size of each output sample.\n\n      Returns:\n        Some neural model layers\n\n      Examples:\n        >>> block(6, 16)\n        [Linear(in_features=6, out_features=16, bias=True),\n        LeakyReLU(negative_slope=0.2, inplace=True)]\n      \"\"\"\n      layers = [nn.Linear(in_features, out_features),\n                nn.LeakyReLU(self.relu_negative_slope, inplace=True)]\n      return layers\n\n    self.main = nn.Sequential(\n      *block(self.channels * self.image_size * self.image_size, 512),\n      *block(512, 256),\n","AFTER":"      nn.Linear(global_params.channels * global_params.image_size * global_params.image_size, 512),\n      nn.LeakyReLU(global_params.negative_slope, inplace=True),\n\n      nn.Linear(512, 256),\n      nn.LeakyReLU(global_params.negative_slope, inplace=True),\n"}