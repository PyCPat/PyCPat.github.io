{"BEFORE":"        outp = []\n        x = inp\n\n        if self.resize_input:\n            x = F.interpolate(x,\n                              size=(299, 299),\n                              mode='bilinear',\n                              align_corners=False)\n\n        if self.normalize_input:\n            x = 2 * x - 1  # Scale from range (0, 1) to range (-1, 1)\n\n        for idx, block in enumerate(self.blocks):\n            x = block(x)\n            if idx in self.output_blocks:\n                outp.append(x)\n\n            if idx == self.last_needed_block:\n                break\n\n        if self.last_needed_block >= 4:\n            x = F.dropout(x, training=self.training)\n            # N x 2048 x 1 x 1\n            x = torch.flatten(x, 1)\n            # N x 2048\n            x = self.fc(x)\n            x = F.softmax(x, dim=1)\n            outp.append(x)\n\n        return outp\n","AFTER":"        outputs = [None for _ in range(len(self.output_blocks))]\n\n        if self.resize_input:\n            x = F.interpolate(x,\n                              size=(299, 299),\n                              mode='bilinear',\n                              align_corners=False)\n\n        if self.normalize_input:\n            x = 2 * x - 1  # Scale from range (0, 1) to range (-1, 1)\n\n        for idx, block in enumerate(self.blocks):\n            if idx < 4:\n                x = block(x)\n            else:\n                x = F.dropout(x, training=self.training)    # N x 2048 x 1 x 1\n                x = torch.flatten(x, start_dim=1)           # N x 2048\n                x = block(x)                                # N x 1000\n                x = F.softmax(x, dim=1)\n\n            if idx in self.output_blocks:\n                order = self.output_blocks.index(idx)\n                outputs[order] = x\n\n            if idx == self.last_needed_block:\n                break\n\n        return outputs\n"}