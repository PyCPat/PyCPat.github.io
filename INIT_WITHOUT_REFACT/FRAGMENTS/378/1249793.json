{"BEFORE":"        assert (image_height % patch_size) == 0 and (image_width % patch_size) == 0, 'image height and width must be divisible by patch size'\n        num_patches = (image_height \/\/ patch_size) * (image_width \/\/ patch_size)\n\n        dim_ff = dim * ff_mult\n\n        self.to_patch_embed = nn.Sequential(\n            Rearrange('b c (h p1) (w p2) -> b (h w) (c p1 p2)', p1 = patch_size, p2 = patch_size),\n            nn.Linear(channels * patch_size ** 2, dim)\n","AFTER":"        patch_height, patch_width = pair(patch_size)\n        assert (image_height % patch_height) == 0 and (image_width % patch_width) == 0, 'image height and width must be divisible by patch size'\n        num_patches = (image_height \/\/ patch_height) * (image_width \/\/ patch_width)\n\n        dim_ff = dim * ff_mult\n\n        self.to_patch_embed = nn.Sequential(\n            Rearrange('b c (h p1) (w p2) -> b (h w) (c p1 p2)', p1 = patch_height, p2 = patch_width),\n            nn.Linear(channels * patch_height * patch_width, dim)\n"}