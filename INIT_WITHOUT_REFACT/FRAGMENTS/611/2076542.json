{"BEFORE":"        self.conv1 = nn.Conv2d(in_channels, out_channels, 3, 1, padding=1)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, 3, 1, padding=1)\n\n        # Batch Normalization\n        self.bn1 = nn.BatchNorm2d(in_channels)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n        self.bn3 = nn.BatchNorm2d(out_channels)\n\n        # Initialization\n        # Xavier Initialization\n        nn.init.xavier_uniform(self.conv1.weight.data, 1.0)\n        nn.init.xavier_uniform(self.conv2.weight.data, 1.0)\n\n        self.model_base = nn.Sequential(\n            nn.ReLU(),\n            self.bn1,\n            self.conv1,\n            nn.ReLU(),\n            self.bn2,\n            self.conv2\n        )\n\n        self.bypass = nn.Sequential()\n        if stride == 1:\n            self.model = self.model_base\n        else:\n            self.model = nn.Sequential(\n                self.model_base,\n                nn.AvgPool2d(2, stride=stride, padding=0)\n            )\n            # add Bypass\n            self.bypass_conv = nn.Conv2d(\n                in_channels, out_channels, 1, 1, padding=0)\n            self.bypass = nn.Sequential(\n                self.bn3,\n                self.bypass_conv,\n                nn.AvgPool2d(2, stride=stride, padding=0)\n            )\n            # Xavier Initialization\n            nn.init.xavier_uniform(self.bypass_conv.weight.data, 1.4142)\n","AFTER":"    def __init__(self, in_channels, out_channels, noise_channel, stride=1, dropout=0, use_affine_level=False):\n        super(ResBlockUp, self).__init__()\n        self.use_affine_level = use_affine_level\n        if self.use_affine_level:\n            self.noise_func = Conv1dWithInitialization(\n                in_channels=noise_channel,\n                out_channels=out_channels*2,\n                kernel_size=3,\n                stride=1,\n                padding=1\n            )\n        else:\n            self.noise_func = Conv1dWithInitialization(\n                in_channels=noise_channel,\n                out_channels=out_channels,\n                kernel_size=3,\n                stride=1,\n                padding=1\n            )\n\n        self.conv1 = nn.Conv2d(in_channels, out_channels, 3, 1, padding=1)\n        self.conv2 = nn.Conv2d(out_channels, out_channels, 3, 1, padding=1)\n\n        # Batch Normalization\n        self.bn1 = nn.BatchNorm2d(in_channels)\n        self.bn2 = nn.BatchNorm2d(out_channels)\n\n        self.model1 = nn.Sequential(\n            self.bn1,\n            nn.ReLU(),\n            nn.Upsample(scale_factor=2) if stride > 1 else nn.Identity(),\n            self.conv1,\n        )\n        self.model2 = nn.Sequential(\n            self.bn2,\n            nn.ReLU(),\n            nn.Dropout(dropout) if dropout > 0 else nn.Identity(),\n            self.conv2\n        )\n        self.bypass = nn.Sequential()\n        if stride != 1:\n            self.bypass = nn.Upsample(scale_factor=2)\n"}