{"BEFORE":"        out = self.tanh(self.conv7(torch.cat((out6, out1), 1)))\n\n        return out\n","AFTER":"        alpha_stacked = self.tanh(self.conv7(torch.cat((out6, out1), 1)))\n\n        alphas = torch.split(alpha_stacked, 3, 1)\n        results = [x]\n        for i in range(self.n):\n            # x = x + alphas[i] * (x - x**2)  # as described in the paper\n            # sign doesn't really matter becaus of symmetry.\n            x = x + alphas[i] * (torch.pow(x, 2) - x)\n            if i + 1 in self.ret:\n                results.append(x)\n\n        return results, alpha_stacked\n"}