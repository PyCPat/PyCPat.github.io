{"BEFORE":"        self.add_module('fc2', nn.Linear(1024, 256))\n        self.add_module('classifier', nn.Linear(256, n_classes))\n","AFTER":"        filters = {\n            'pexp1_1': [56, 56],\n            'pexp1_2': [56, 56],\n            'pexp1_3': [56, 56],\n            'pexp2_1': [56, 112],\n            'pexp2_2': [112, 112],\n            'pexp2_3': [112, 112],\n            'pexp2_4': [112, 112],\n            'pexp3_1': [112, 216],\n            'pexp3_2': [216, 216],\n            'pexp3_3': [216, 216],\n            'pexp3_4': [216, 216],\n            'pexp3_5': [216, 216],\n            'pexp3_6': [216, 216],\n            'pexp4_1': [216, 424],\n            'pexp4_2': [424, 424],\n            'pexp4_3': [424, 424],\n        }\n\n        self.add_module('conv1', nn.Conv2d(in_channels=3, out_channels=56, kernel_size=7, stride=2, padding=3))\n        for key in filters:\n\n            if ('pool' in key):\n                self.add_module(key, nn.MaxPool2d(filters[key][0], filters[key][1]))\n            else:\n                self.add_module(key, PEXP(filters[key][0], filters[key][1]))\n\n        if (model == 'large'):\n\n            self.add_module('conv1_1x1', nn.Conv2d(in_channels=56, out_channels=112, kernel_size=1))\n            self.add_module('conv2_1x1', nn.Conv2d(in_channels=112, out_channels=216, kernel_size=1))\n            self.add_module('conv3_1x1', nn.Conv2d(in_channels=216, out_channels=424, kernel_size=1))\n            self.add_module('conv4_1x1', nn.Conv2d(in_channels=424, out_channels=424, kernel_size=1))\n\n            self.__forward__ = self.forward_large_net\n        else:\n            self.__forward__ = self.forward_small_net\n        self.add_module('flatten', Flatten())\n        self.add_module('fc1', nn.Linear(7 * 7 * 424, 512))\n\n\n        self.add_module('classifier', nn.Linear(512, n_classes))\n"}