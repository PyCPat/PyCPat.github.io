{"BEFORE":"    def forward(self, x):\n        return x\n","AFTER":"    def forward(self, x, context = None, mask = None):\n        h = self.heads\n        context = default(context, x)\n\n        q = self.to_q(x)\n        k, v = self.to_kv(context).chunk(2, dim = -1)\n\n        q = q * self.scale\n\n        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = h), (q, k, v))\n\n        out = attention(q, k, v, mask = mask, causal = self.causal)\n\n        out = rearrange(out, 'b h n d -> b n (h d)')\n        return self.to_out(out)\n"}