{"BEFORE":"        return x\n","AFTER":"        raw_init_std = np.log(np.exp(self.init_std) - 1)\n        x = self.model(x)\n        mean, std = torch.chunk(x, 2, dim=-1)\n        mean = self.mean_scale * torch.tanh(mean \/ self.mean_scale)\n        std = self.softplus(std + raw_init_std) + self.min_std\n        dist = td.Normal(mean, std)\n        transforms = [TanhBijector()]\n        dist = td.transformed_distribution.TransformedDistribution(\n            dist, transforms)\n        dist = td.Independent(dist, 1)\n        return dist\n"}