{"BEFORE":"        c0 = c[:, 0]\n        c1 = c[:, 1:] * self.arange\n        c1 = torch.flip(c1, [1])\n\n        h = []\n        h.append(torch.exp(c0))\n        for n in range(1, self.impulse_response_length):\n            idx = -min(n, self.cep_order)\n            h.append(\n                torch.einsum(\n                    \"bd,bd->b\",\n                    torch.stack(h[idx:], 1),\n                    c1[:, idx:],\n                )\n                \/ n\n            )\n        h = torch.stack(h, 1)\n","AFTER":"        c0 = c[:, 0]\n        c1 = c[:, 1:] * self.arange\n        c1 = torch.flip(c1, [1])\n\n        h = torch.empty((c.shape[0], self.impulse_response_length), device=c.device)\n        h[:, 0] = torch.exp(c0)\n        for n in range(1, self.impulse_response_length):\n            s = n - self.cep_order\n            h[:, n] = (\n                torch.einsum(\n                    \"bd,bd->b\",\n                    h[:, max(0, s) : n].clone(),\n                    c1[:, max(0, -s) :],\n                )\n                \/ n\n            )\n"}