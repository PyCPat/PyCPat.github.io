{"BEFORE":"        out = einsum('b h i j, b h j d -> b h i d', attn, v)\n\n        out = rearrange(out, 'b h n d -> b n (h d)')\n","AFTER":"        fmap_size = x.shape[-1]\n        h = self.heads\n\n        x = self.norm(x)\n\n        q, k, v = self.to_qkv(x).chunk(3, dim = 1)\n        q, k, v = rearrange_many((q, k, v), 'b (h d) x y -> b h (x y) d', h = h)\n\n        q = q * self.scale\n        sim = einsum('b h i d, b h j d -> b h i j', q, k)\n\n        if exists(self.rel_pos_bias):\n            sim = sim + self.rel_pos_bias(sim)\n\n        attn = sim.softmax(dim = -1, dtype = torch.float32)\n\n        out = einsum('b h i j, b h j d -> b h i d', attn, v)\n\n        out = rearrange(out, 'b h (x y) d -> b (h d) x y', x = fmap_size, y = fmap_size)\n"}