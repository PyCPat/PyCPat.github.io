{"BEFORE":"        super(MPPLoss, self).__init__()\n        self.patch_size = patch_size\n        self.channels = channels\n        self.output_channel_bits = output_channel_bits\n        self.max_pixel_val = max_pixel_val\n\n        if mean:\n            self.mean = torch.tensor(mean).view(-1, 1, 1)\n        else:\n            self.mean = None\n        if std:\n            self.std = torch.tensor(std).view(-1, 1, 1)\n        else:\n            self.std = None\n\n    def forward(self, predicted_patches, target, mask):\n","AFTER":"        super().__init__()\n        self.patch_size = patch_size\n        self.channels = channels\n        self.output_channel_bits = output_channel_bits\n        self.max_pixel_val = max_pixel_val\n\n        self.mean = torch.tensor(mean).view(-1, 1, 1) if mean else None\n        self.std = torch.tensor(std).view(-1, 1, 1) if std else None\n"}