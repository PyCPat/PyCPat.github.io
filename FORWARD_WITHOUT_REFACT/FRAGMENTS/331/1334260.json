{"BEFORE":"    def forward(self, output, target, target_weights):\n        \"\"\"Forward function.\"\"\"\n        batch_size = output.size(0)\n        num_joints = output.size(1)\n\n        heatmaps_pred = output.reshape(\n            (batch_size, num_joints, -1)).split(1, 1)\n        heatmaps_gt = target.reshape((batch_size, num_joints, -1)).split(1, 1)\n\n        loss = 0.\n\n        for idx in range(num_joints):\n            heatmap_pred = heatmaps_pred[idx].squeeze(1)\n            heatmap_gt = heatmaps_gt[idx].squeeze(1)\n            target_weight = target_weights[:, idx, None]\n            if self.use_target_weight:\n                loss += self.criterion(heatmap_pred * target_weight,\n                                       heatmap_gt * target_weight)\n            else:\n                loss += self.criterion(heatmap_pred, heatmap_gt)\n\n        return loss \/ num_joints * self.loss_weight\n","AFTER":"    def forward(self, output: Tensor, target: Tensor,\n                target_weights: Tensor) -> Tensor:\n        \"\"\"Forward function of loss.\n\n        Note:\n            - batch_size: B\n            - num_keypoints: K\n            - heatmaps height: H\n            - heatmaps weight: W\n\n        Args:\n            output (Tensor): The output heatmaps with shape [B, K, H, W].\n            target (Tensor): The target heatmaps with shape [B, K, H, W].\n            target_weights (Tensor): The target weights of differet keypoints,\n                with shape [B, K].\n\n        Returns:\n            Tensor: The calculated loss.\n        \"\"\"\n        if self.use_target_weight:\n            loss = self.criterion(output * target_weights[..., None, None],\n                                  target * target_weights[..., None, None])\n        else:\n            loss = self.criterion(output, target)\n\n        return loss * self.loss_weight\n"}