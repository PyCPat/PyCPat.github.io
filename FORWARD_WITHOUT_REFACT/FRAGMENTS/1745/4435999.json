{"BEFORE":"        self.avgpool = nn.AdaptiveAvgPool2d(14)\n\n        self.classifier = nn.Sequential(\n            nn.Linear(512 * 14 * 14, 1024),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            nn.Linear(1024, 1)\n        )\n\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                nn.init.kaiming_normal_(m.weight, mode=\"fan_out\", nonlinearity=\"leaky_relu\")\n                if m.bias is not None:\n                    nn.init.constant_(m.bias, 0)\n            elif isinstance(m, nn.BatchNorm2d):\n                nn.init.constant_(m.weight, 1)\n                nn.init.constant_(m.bias, 0)\n            elif isinstance(m, nn.Linear):\n                nn.init.normal_(m.weight, 0, 0.01)\n                nn.init.constant_(m.bias, 0)\n\n    def forward(self, input: Tensor) -> Tensor:\n","AFTER":"        self.avgpool = nn.AdaptiveAvgPool2d((14, 14))\n\n        self.fc = nn.Sequential(\n            nn.Linear(512 * 14 * 14, 1024),\n            nn.LeakyReLU(negative_slope=0.2, inplace=True),\n            nn.Linear(1024, 1),\n            nn.Sigmoid()\n"}