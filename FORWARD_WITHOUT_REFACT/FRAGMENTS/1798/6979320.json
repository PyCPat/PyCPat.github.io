{"BEFORE":"\t\tfeat1 = src[..., :3].transpose(1, 2)\n\t\tfeat2 = tgt[..., :3].transpose(1, 2)\n\t\tsrc = src[..., :3]\n\t\ttgt = tgt[..., :3]\n\n\t\tsrc_embedding = self.emb_nn(feat1)\n\t\ttgt_embedding = self.emb_nn(feat2)\n\t\tsrc_embedding_p, tgt_embedding_p = self.pointer(src_embedding, tgt_embedding)\n\t\tsrc_embedding = src_embedding + src_embedding_p\n\t\ttgt_embedding = tgt_embedding + tgt_embedding_p\n\n\t\tscores = torch.matmul(src_embedding.transpose(2, 1).contiguous(), tgt_embedding) \/ math.sqrt(self.emb_dims)\n\t\tscores = torch.softmax(scores, dim=2)\n\t\t# b x points x points\n\t\tfeat1_corr = torch.matmul(feat2, scores.transpose(2, 1).contiguous())\n\t\trotation_ab, translation_ab = self.head(feat1, feat1_corr)\n\n\t\tT_12 = rt_to_transformation(rotation_ab, translation_ab.unsqueeze(2))\n\t\t\n\t\tif T_gt == None:\n\t\t\treturn T_12\n\t\telse:\n\t\t\tr_err = rotation_error(T_12[:, :3, :3], T_gt[:, :3, :3])\n\t\t\tt_err = translation_error(T_12[:, :3, 3], T_gt[:, :3, 3])\n\t\t\trmse = rmse_loss(src, T_12, T_gt)\n","AFTER":"        src_point = src\n        tgt_point = tgt\n\n        src = src.transpose(1,2).contiguous()\n        tgt = tgt.transpose(1,2).contiguous()\n\n        batch_size, _, _ = src.size()\n\n        src_embedding = self.emb_nn(src)\n        tgt_embedding = self.emb_nn(tgt)\n\n        src_embedding_p, tgt_embedding_p = self.pointer(src_embedding, tgt_embedding)\n\n        src_embedding = src_embedding + src_embedding_p\n        tgt_embedding = tgt_embedding + tgt_embedding_p\n\n        rotation_ab, translation_ab = self.head(src_embedding, tgt_embedding, src, tgt)\n        if self.cycle:\n            rotation_ba, translation_ba = self.head(tgt_embedding, src_embedding, tgt, src)\n\n        else:\n            rotation_ba = rotation_ab.transpose(2, 1).contiguous()\n            translation_ba = -torch.matmul(rotation_ba, translation_ab.unsqueeze(2)).squeeze(2)\n        \n        T_12 = rt_to_transformation(rotation_ab, translation_ab.unsqueeze(2))\n\n        if T_gt == None:\n            return T_12\n        else:\n            r_err = rotation_error(T_12[:, :3, :3], T_gt[:, :3, :3])\n            t_err = translation_error(T_12[:, :3, 3], T_gt[:, :3, 3])\n            rmse = rmse_loss(src_point, T_12, T_gt)\n"}