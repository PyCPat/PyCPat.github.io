{"BEFORE":"        self.gate_type = set_default(_look='gate_type', _dict=config, _default='features')\n        self.output_name = set_default(_look='output_name', _dict=config, _default='x')\n\n        input_shape = _streams[self.input_name]\n        assert self.gate_type == 'features' or self.gate_type == 'heads', f'Gate type must be \"features\" or \"heads\"!'\n\n        # Initialize gate to 1\n        if self.gate_type == 'features':\n            self.scale = nn.Parameter(torch.ones((input_shape[-1],)), requires_grad=True).view(1, 1, input_shape[-1])\n        elif self.gate_type == 'heads':\n            self.scale = nn.Parameter(torch.ones((input_shape[1],)), requires_grad=True).view(1, input_shape[1], 1, 1)\n            self.scale = self.scale.repeat(1, 1, 1, input_shape[-1])\n\n        # Prepare streams info\n        self.streams_in_module = {'inputs': [[self.input_name, input_shape],\n                                             ],\n\n                                  'outputs': [[self.output_name, input_shape],\n","AFTER":"        self.dim_to_scale = set_default(_look='dim_to_scale', _dict=config, _default=2, _type=int)\n        self.output_name = set_default(_look='output_name', _dict=config, _default='x')\n\n        self.input_shape = _streams[self.input_name]\n        assert self.dim_to_scale > 0, f'dim_to_scale must be greater than 0!'\n        assert self.dim_to_scale <= len(self.input_shape), f'dim_to_scale must less than or equal to the number of ' \\\n                                                           f'input dimensions!'\n        num_params = self.input_shape[self.dim_to_scale]\n\n        # Initialize gate to 1\n        self.scale = nn.Parameter(torch.ones(num_params), requires_grad=True)\n\n        # Built einsum input strings\n        self.einsum_in_1 = 'abcdef'\n        self.einsum_in_1 = self.einsum_in_1[:len(self.input_shape)]\n        self.einsum_in_2 = self.einsum_in_1[self.dim_to_scale]\n\n        print(f\"{self.einsum_in_1},{self.einsum_in_2}->{self.einsum_in_1}\")\n\n        # Prepare streams info\n        self.streams_in_module = {'inputs': [[self.input_name, self.input_shape],\n                                             ],\n\n                                  'outputs': [[self.output_name, self.input_shape],\n"}