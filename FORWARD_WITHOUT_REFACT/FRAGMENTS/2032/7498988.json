{"BEFORE":"        train_bs, class_num = g_t.size(0), g_t.size(1)\n        g_t_temp = g_t \/ self.temperature\n        g_t_temp_softmax = nn.Softmax(dim=1)(g_t_temp)\n        target_entropy_weight = entropy(g_t_temp_softmax).detach()\n        target_entropy_weight = 1 + torch.exp(-target_entropy_weight)\n        target_entropy_weight = train_bs * target_entropy_weight \/ torch.sum(target_entropy_weight)\n        c_matrix = g_t_temp_softmax.mul(target_entropy_weight.view(-1,1)).transpose(1,0).mm(g_t_temp_softmax)\n","AFTER":"        batch_size, num_classes = logits.shape\n        predictions = F.softmax(logits \/ self.temperature, dim=1)  # batch_size x num_classes\n        entropy_weight = entropy(predictions).detach()\n        entropy_weight = 1 + torch.exp(-entropy_weight)\n        entropy_weight = (batch_size * entropy_weight \/ torch.sum(entropy_weight)).unsqueeze(dim=1)  # batch_size x 1\n        class_confusion_matrix = torch.mm((predictions * entropy_weight).transpose(1, 0), predictions)\n"}