{"BEFORE":"        mean = F.relu(mean)\n        var = F.relu(var)\n\n        is_edge_like = is_edge_index(edge_index)\n\n        if is_edge_like:\n            edge_index, edge_weight = gcn_norm(\n                edge_index, edge_weight, mean.size(0), improved=False,\n                add_self_loops=self.add_self_loops, dtype=mean.dtype)\n        elif isinstance(edge_index, SparseTensor):\n            adj = gcn_norm(edge_index, mean.size(0), improved=False,\n                           add_self_loops=self.add_self_loops,\n                           dtype=mean.dtype)\n\n        else:\n            # N by N dense adjacency matrix\n            adj = dense_gcn_norm(edge_index, improved=False,\n                                 add_self_loops=self.add_self_loops)\n\n        attention = torch.exp(-self.gamma * var)\n        mean = mean * attention\n        var = var * attention * attention\n\n        # TODO: actually, using .square() is not always right,\n        # particularly weighted graph\n        if is_edge_like:\n            mean = spmm(mean, edge_index, edge_weight)\n            var = spmm(var, edge_index, edge_weight.square())\n        else:\n            mean = adj @ mean\n            var = (adj * adj) @ var\n","AFTER":"        if self.add_self_loops:\n            edge_index, edge_weight = make_self_loops(edge_index, edge_weight,\n                                                      num_nodes=x.size(0))\n\n        if self.normalize:\n            edge_index, edge_weight = make_gcn_norm(edge_index, edge_weight)\n\n        attention = torch.exp(-self.gamma * var)\n        mean = mean * attention\n        var = var * attention * attention\n\n        # TODO: actually, using .square() is not always right,\n        # particularly weighted graph\n        if edge_weight is not None:\n            mean = spmm(mean, edge_index, edge_weight)\n            var = spmm(var, edge_index, edge_weight.square())\n        else:\n            # N by N adjacency matrix (sparse or dense)\n            mean = edge_index @ mean\n            var = (edge_index * edge_index) @ var\n"}