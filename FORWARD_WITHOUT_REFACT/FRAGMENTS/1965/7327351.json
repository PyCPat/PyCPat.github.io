{"BEFORE":"        hiddens = []\n        prev_attn = None\n        prev_cross_attn = None\n\n        pos_emb = self.pos_emb(x)\n\n        mems = mems.copy() if exists(mems) else ([None] * self.depth)\n\n        for ind, (layer_type, (norm, block)) in enumerate(zip(self.layer_types, self.layers)):\n            is_last = ind == (len(self.layers) - 1)\n\n            if layer_type == 'a':\n                hiddens.append(x)\n                layer_mem = mems.pop(0)\n\n            if self.pre_norm:\n                x = norm(x)\n\n            if layer_type == 'a':\n                out, pre_attn = block(x, mask = mask, pia_emb = pos_emb, rel_pos = self.rel_pos, prev_attn = prev_attn, mem = layer_mem)\n            elif layer_type == 'c':\n                out, pre_attn = block(x, context = context, mask = mask, context_mask = context_mask, prev_attn = prev_cross_attn)\n            elif layer_type == 'f':\n                out = block(x)\n\n            x = x + out\n\n            if layer_type == 'a' and self.residual_attn:\n                prev_attn = pre_attn\n            elif layer_type == 'c' and self.cross_residual_attn:\n                prev_cross_attn = pre_attn\n\n            if not self.pre_norm and not is_last:\n                x = norm(x)\n\n        if return_hiddens:\n            return x, hiddens\n\n        return x\n","AFTER":"        intermediates = []\n        prev_attn = None\n        prev_cross_attn = None\n\n        pos_emb = self.pos_emb(x)\n\n        mems = mems.copy() if exists(mems) else ([None] * self.depth)\n\n        for ind, (layer_type, (norm, block)) in enumerate(zip(self.layer_types, self.layers)):\n            is_last = ind == (len(self.layers) - 1)\n\n            if layer_type == 'a':\n                hiddens.append(x)\n                layer_mem = mems.pop(0)\n\n            if self.pre_norm:\n                x = norm(x)\n\n            if layer_type == 'a':\n                out, inter = block(x, mask = mask, pia_emb = pos_emb, rel_pos = self.rel_pos, prev_attn = prev_attn, mem = layer_mem)\n            elif layer_type == 'c':\n                out, inter = block(x, context = context, mask = mask, context_mask = context_mask, prev_attn = prev_cross_attn)\n            elif layer_type == 'f':\n                out = block(x)\n\n            x = x + out\n\n            if layer_type in ('a', 'c'):\n                intermediates.append(inter)\n\n            if layer_type == 'a' and self.residual_attn:\n                prev_attn = inter.pre_softmax_attn\n            elif layer_type == 'c' and self.cross_residual_attn:\n                prev_cross_attn = inter.pre_softmax_attn\n\n            if not self.pre_norm and not is_last:\n                x = norm(x)\n\n        if return_hiddens:\n            intermediates = LayerIntermediates(\n                hiddens = hiddens,\n                attn_intermediates = intermediates\n            )\n\n            return x, intermediates\n\n        return x\n"}