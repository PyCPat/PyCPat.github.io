{"BEFORE":"    def __init__(self, in_channels, out_channels, g_spectral_norm, activation_fn, conditional_bn, num_classes):\n        super(GenBlock, self).__init__()\n        self.conditional_bn = conditional_bn\n\n        if g_spectral_norm:\n            self.deconv0 = sndeconv2d(in_channels=in_channels, out_channels=out_channels,\n                                  kernel_size=4, stride=2, padding=1)\n        else:\n            self.deconv0 = deconv2d(in_channels=in_channels, out_channels=out_channels,\n                                  kernel_size=4, stride=2, padding=1)\n\n        if self.conditional_bn:\n            self.bn0 = ConditionalBatchNorm2d(num_features=out_channels, num_classes=num_classes,\n                                              spectral_norm=g_spectral_norm)\n        else:\n            self.bn0 = batchnorm_2d(in_features=out_channels)\n\n        if activation_fn == \"ReLU\":\n            self.activation = nn.ReLU(inplace=True)\n        elif activation_fn == \"Leaky_ReLU\":\n            self.activation = nn.LeakyReLU(negative_slope=0.1, inplace=True)\n        elif activation_fn == \"ELU\":\n            self.activation = nn.ELU(alpha=1.0, inplace=True)\n        elif activation_fn == \"GELU\":\n            self.activation = nn.GELU()\n        else:\n            raise NotImplementedError\n\n    def forward(self, x, label):\n","AFTER":"    def __init__(self, in_channels, out_channels, g_cond_mtd, num_classes, MODULES):\n        super(GenBlock, self).__init__()\n        self.g_cond_mtd = g_cond_mtd\n\n        self.deconv0 = MODULES.g_deconv2d(in_channels=in_channels,\n                                          out_channels=out_channels,\n                                          kernel_size=4,\n                                          stride=2,\n                                          padding=1)\n\n        if self.g_cond_mtd == \"W\/O\":\n            self.bn0 = MODULES.g_bn(in_features=out_channels)\n        elif self.g_cond_mtd == \"cBN\":\n            self.bn0 = MODULES.g_bn(num_classes, out_channels, MODULES)\n        else:\n            raise NotImplementedError\n\n        self.activation = MODULES.g_act_fn\n"}