{"BEFORE":"        self.net = nn.Sequential(\n            # Input: N x channels_noise x 1 x 1\n            self._block(channels_noise, features_g * 16, 4, 1, 0),  # img: 4x4\n            self._block(features_g * 16, features_g * 8, 4, 2, 1),  # img: 8x8\n            self._block(features_g * 8, features_g * 4, 4, 2, 1),  # img: 16x16\n            self._block(features_g * 4, features_g * 2, 4, 2, 1),  # img: 32x32\n            nn.ConvTranspose2d(\n                features_g * 2, channels_img, kernel_size=4, stride=2, padding=1\n            ),\n            # Output: N x channels_img x 64 x 64\n            nn.Tanh(),\n        )\n","AFTER":"        self.net = nn.Sequential(OrderedDict([\n            # Input: N x channels_noise x 1 x 1\n            ('block1', self._block(channels_noise, features_g * 16, 4, 1, 0)),  # img: 4x4\n            ('block2', self._block(features_g * 16, features_g * 8, 4, 2, 1)),  # img: 8x8\n            ('block3', self._block(features_g * 8, features_g * 4, 4, 2, 1)),  # img: 16x16\n            ('block4', self._block(features_g * 4, features_g * 2, 4, 2, 1)),  # img: 32x32\n            ('transpose_conv_out', nn.ConvTranspose2d(\n                features_g * 2, channels_img, kernel_size=4,\n                stride=2, padding=1)),\n            # Output: N x channels_img x 64 x 64\n            ('tanh', nn.Tanh()),\n            ]))\n"}