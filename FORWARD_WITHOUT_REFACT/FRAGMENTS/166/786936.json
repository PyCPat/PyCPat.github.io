{"BEFORE":"    def forward(self, x):\n        \"\"\"\n        x: B, H*W, C\n        \"\"\"\n        H, W = self.input_resolution\n        B, L, C = x.shape\n        assert L == H * W, \"input feature has wrong size\"\n        assert H % 2 == 0 and W % 2 == 0, f\"x size ({H}*{W}) are not even.\"\n","AFTER":"    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        \"\"\"Froward method for patch merging.\n\n        Args:\n            x: Input tensor with shape B, H*W, C.\n\n        Returns:\n            x: Output tensor with shape (B, H\/2*W\/2, 2*C).\n\n        Raises:\n            ValueError: If self.input_resolution don't match with input tensor.\n            ValueError: If one of H or W in self.input_resolution is odd number.\n        \"\"\"\n        H, W = self.input_resolution\n        B, L, C = x.shape\n        if  L != H * W:\n            raise ValueError('PatchMerging forward method, input feature has wrong size.')\n        if H % 2 != 0 or W % 2 != 0:\n            raise ValueError(f\"PatchMerging forward method, x size ({H}*{W}) are not even.\")\n\n        x = x.view(B, H, W, C)\n"}