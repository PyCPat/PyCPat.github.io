{"BEFORE":"    def __init__(self, c_in, c_out, k=3, pad=1, stride=2, first_layer=False, use_incr=False):\r\n        super().__init__()\r\n        incr = 0 if (first_layer != True or use_incr == False) else 4\r\n        self.encoder = nn.Sequential(\r\n            nn.Identity() if first_layer else nn.ReLU(),\r\n            nn.Conv2d(c_in, c_out, (k + 1 + incr), padding=(pad + incr \/\/ 2), stride=stride),\r\n            nn.Identity() if first_layer else nn.InstanceNorm2d(c_out),\r\n            nn.ReLU(),\r\n            nn.Conv2d(c_out, c_out, k, padding=pad),\r\n            nn.InstanceNorm2d(c_out)\r\n","AFTER":"        self.residual = residual\r\n        if not mid_channels:\r\n            mid_channels = out_channels\r\n        self.double_conv = nn.Sequential(\r\n            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),\r\n            nn.GroupNorm(1, mid_channels),\r\n            nn.GELU(),\r\n            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),\r\n            nn.GroupNorm(1, out_channels),\r\n"}