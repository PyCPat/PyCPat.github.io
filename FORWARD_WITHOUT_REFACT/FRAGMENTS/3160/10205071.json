{"BEFORE":"    def forward(self,vals,pos):\n\n        if self.method == 'variance':\n            loss = self.wf.variance(pos)\n\n        elif self.method == 'energy':\n            loss = self.wf.energy(pos)\n\n        elif self.method == 'density':\n            loss = 1.\/(torch.exp(torch.mean(vals**2))+1)\n\n        elif callable(self.method):\n            loss = nn.MSELoss()\n            target = torch.tensor(self.method(pos.detach().numpy()))\n            return loss(vals,target)\n\n        else:\n            raise ValueError('method must be variance, energy or callable')\n","AFTER":"            raise ValueError('method must be variance, energy')\n"}