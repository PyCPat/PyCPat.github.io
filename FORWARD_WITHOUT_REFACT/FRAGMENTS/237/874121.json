{"BEFORE":"        dropped_waveform = clean_waveform.clone()\n\n        # Don't drop (return early) 1-`drop_prob` portion of the batches\n        if torch.rand(1) > self.drop_prob:\n            self.rng_state = torch.random.get_rng_state()\n            return [dropped_waveform]\n\n        # Add channels dimension\n        if len(clean_waveform.shape) == 2:\n            dropped_waveform = dropped_waveform.unsqueeze(1)\n\n        # Pick a frequency to drop\n        drop_range = self.drop_freq_high - self.drop_freq_low\n        drop_frequency = torch.rand(1) * drop_range + self.drop_freq_low\n\n        # Compute and apply filter\n        notch_kernel = notch_filter(drop_frequency).to(clean_waveform.device)\n        padding = (len(notch_kernel) \/\/ 2, len(notch_kernel) \/\/ 2)\n        dropped_waveform = convolve1d(dropped_waveform, notch_kernel, padding)\n","AFTER":"        dropped_waveform = clean_waveform.clone()\n\n        # Don't drop (return early) 1-`drop_prob` portion of the batches\n        if torch.rand(1) > self.drop_prob:\n            self.rng_state = torch.random.get_rng_state()\n            return [dropped_waveform]\n\n        # Add channels dimension\n        if len(clean_waveform.shape) == 2:\n            dropped_waveform = dropped_waveform.unsqueeze(1)\n\n        # Pick number of frequencies to drop\n        drop_count = torch.randint(\n            low=self.drop_count_low,\n            high=self.drop_count_high + 1,\n            size=(1,),\n        )\n\n        # Pick a frequency to drop\n        drop_range = self.drop_freq_high - self.drop_freq_low\n        drop_frequency = torch.rand(drop_count)*drop_range + self.drop_freq_low\n\n        # Filter parameters\n        filter_length = 101\n        pad = filter_length \/\/ 2\n\n        # Start with delta function\n        drop_filter = torch.zeros(1, 1, filter_length)\n        drop_filter[0, 0, pad] = 1\n\n        # Subtract each frequency\n        for frequency in drop_frequency:\n            notch_kernel = notch_filter(\n                frequency, filter_length, self.drop_width,\n            ).to(clean_waveform.device)\n            drop_filter = convolve1d(drop_filter, notch_kernel, pad)\n\n        # Apply filter\n        dropped_waveform = convolve1d(dropped_waveform, drop_filter, pad)\n"}