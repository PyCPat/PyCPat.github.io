{"BEFORE":"        pos_heads = pos_exmpls[:, 0:1]\n        pos_relations = pos_exmpls[:, 1:2]\n        pos_tails = pos_exmpls[:, 2:3]\n\n        neg_heads = neg_exmpls[:, 0:1]\n        neg_relations = neg_exmpls[:, 1:2]\n        neg_tails = neg_exmpls[:, 2:3]\n\n        pos_h_embs = self.entities_embeddings(pos_heads)\n        pos_r_embs = self.relation_embeddings(pos_relations).view(-1, self.embedding_dim)\n        pos_t_embs = self.entities_embeddings(pos_tails)\n\n        neg_h_embs = self.entities_embeddings(neg_heads)\n        neg_r_embs = self.relation_embeddings(neg_relations).view(-1, self.embedding_dim)\n        neg_t_embs = self.entities_embeddings(neg_tails)\n\n        # L-P normalization of the vectors\n        pos_h_embs = torch.nn.functional.normalize(pos_h_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n        pos_t_embs = torch.nn.functional.normalize(pos_t_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n        neg_h_embs = torch.nn.functional.normalize(neg_h_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n        neg_t_embs = torch.nn.functional.normalize(neg_t_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n","AFTER":"        norms = torch.norm(self.entities_embeddings.weight, p=self.l_p_norm, dim=1).data\n        self.entities_embeddings.weight.data = self.entities_embeddings.weight.data.div(\n            norms.view(self.num_entities, 1).expand_as(self.entities_embeddings.weight))\n\n        pos_heads = pos_exmpls[:, 0:1]\n        pos_relations = pos_exmpls[:, 1:2]\n        pos_tails = pos_exmpls[:, 2:3]\n\n        neg_heads = neg_exmpls[:, 0:1]\n        neg_relations = neg_exmpls[:, 1:2]\n        neg_tails = neg_exmpls[:, 2:3]\n\n        pos_h_embs = self.entities_embeddings(pos_heads).view(-1, self.embedding_dim)\n        pos_r_embs = self.relation_embeddings(pos_relations).view(-1, self.embedding_dim)\n\n        pos_t_embs = self.entities_embeddings(pos_tails).view(-1, self.embedding_dim)\n\n        neg_h_embs = self.entities_embeddings(neg_heads).view(-1, self.embedding_dim)\n        neg_r_embs = self.relation_embeddings(neg_relations).view(-1, self.embedding_dim)\n        neg_t_embs = self.entities_embeddings(neg_tails).view(-1, self.embedding_dim)\n\n        # L-P normalization of the vectors\n        # pos_h_embs = torch.nn.functional.normalize(pos_h_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n        # pos_t_embs = torch.nn.functional.normalize(pos_t_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n        # neg_h_embs = torch.nn.functional.normalize(neg_h_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n        # neg_t_embs = torch.nn.functional.normalize(neg_t_embs, p=self.l_p_norm, dim=1).view(-1, self.embedding_dim)\n\n        pos_scores = self.compute_score(h_embs=pos_h_embs, r_embs=pos_r_embs, t_embs=pos_t_embs)\n        neg_scores = self.compute_score(h_embs=neg_h_embs, r_embs=neg_r_embs, t_embs=neg_t_embs)\n\n        print('Pos exmpls: ', (pos_exmpls))\n        print('Neg exmpls: ', (neg_exmpls))\n"}