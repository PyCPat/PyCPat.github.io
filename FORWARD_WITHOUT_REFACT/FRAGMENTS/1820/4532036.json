{"BEFORE":"        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1)\n\n        self.conv2 = nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1)\n        self.bn2 = nn.BatchNorm2d(64)\n        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)\n        self.bn3 = nn.BatchNorm2d(128)\n        self.conv4 = nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1)\n        self.bn4 = nn.BatchNorm2d(128)\n        self.conv5 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)\n        self.bn5 = nn.BatchNorm2d(256)\n        self.conv6 = nn.Conv2d(256, 256, kernel_size=3, stride=2, padding=1)\n        self.bn6 = nn.BatchNorm2d(256)\n        self.conv7 = nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1)\n        self.bn7 = nn.BatchNorm2d(512)\n        self.conv8 = nn.Conv2d(512, 512, kernel_size=3, stride=2, padding=1)\n        self.bn8 = nn.BatchNorm2d(512)\n\n        # Replaced original paper FC layers with FCN\n        self.conv9 = nn.Conv2d(512, 1, kernel_size=1, stride=1, padding=1)\n","AFTER":"        self.features = nn.Sequential(\n            nn.Conv2d(3, 64, kernel_size=3, padding=1),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(64, 64, kernel_size=3, stride=2, padding=1),\n            nn.BatchNorm2d(64),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(64, 128, kernel_size=3, padding=1),\n            nn.BatchNorm2d(128),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(128, 128, kernel_size=3, stride=2, padding=1),\n            nn.BatchNorm2d(128),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(128, 256, kernel_size=3, padding=1),\n            nn.BatchNorm2d(256),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(256, 256, kernel_size=3, stride=2, padding=1),\n            nn.BatchNorm2d(256),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(256, 512, kernel_size=3, padding=1),\n            nn.BatchNorm2d(512),\n            nn.LeakyReLU(0.2),\n\n            nn.Conv2d(512, 512, kernel_size=3, stride=2, padding=1),\n            nn.BatchNorm2d(512),\n            nn.LeakyReLU(0.2)\n        )\n\n        self.avgpool = nn.AdaptiveAvgPool2d(1)\n        \n        self.classifier = nn.Sequential(\n            nn.Linear(512, 1024),\n            nn.LeakyReLU(0.2),\n            nn.Linear(1024, 1)\n        )\n"}