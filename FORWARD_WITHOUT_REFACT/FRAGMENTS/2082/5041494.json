{"BEFORE":"        assert split in [\"linear\", \"early\", \"middle\"]\n\n        super(SplitResNet50, self).__init__()\n        # We have to change the last FC layer to output num_class scores\n        model = torchvision.models.resnet50(pretrained=True)\n\n        # Split the AlexeNet into two parts: Conv + FC\n        self.models = []  # [ConvBlocks, FC]\n\n        model.fc = nn.Linear(2048, num_class)\n        layer_list = list(model.children())\n\n        # Split point\n        spl_pnt = {\n            \"early\": 4,\n            \"middle\": 6,\n            \"linear\": 8\n        }\n        self.split = split\n        # Variables for compression module\n        if split == \"early\":\n            spatial = 1\n            input_channel = 64\n            out_channel = input_channel \/\/ (compress_ratio \/\/ 4)\n        elif split == \"middle\":\n            spatial = 1\n            input_channel = 512\n            out_channel = input_channel \/\/ (compress_ratio \/\/ 4)\n        elif split == \"linear\":\n","AFTER":"    def __init__(self, num_class=10, learning_rate=1e-4, split=\"linear\", compress_ratio=64, bc_ratio=64):\n        '''\n        * split: The split point\n        * compress_ratio: Total compression ratio\n        '''\n        split = split.lower()\n        assert compress_ratio >= 4\n        assert (compress_ratio % 4) == 0\n        assert split in [\"linear\", \"early\", \"middle\", \"middle-2\"]\n\n        super(SplitResNet50, self).__init__()\n        # We have to change the last FC layer to output num_class scores\n        model = torchvision.models.resnet50(pretrained=True)\n\n        # Split the AlexeNet into two parts: Conv + FC\n        self.models = []  # [ConvBlocks, FC]\n\n        model.fc = nn.Linear(2048, num_class)\n        layer_list = list(model.children())\n\n        # Split point\n        spl_pnt = {\n            \"early\": 4,\n            \"middle\": 6,\n            \"middle-2\": 7,\n            \"linear\": 8\n        }\n        self.split = split\n        # Variables for compression module\n        if split == \"early\":\n            spatial = 1\n            input_channel = 64\n            out_channel = input_channel \/\/ (compress_ratio \/\/ 4)\n        elif split == \"middle\":\n            spatial = 1\n            input_channel = 512\n            out_channel = input_channel \/\/ (compress_ratio \/\/ 4)\n        elif split == \"middle-2\":\n            spatial = 1\n            input_channel = 1024\n            out_channel = input_channel \/\/ (compress_ratio \/\/ 4)\n        elif split == \"linear\":\n            # No spatial compression\n            spatial = 0\n            input_channel = 2048\n            out_channel = input_channel \/\/ (compress_ratio)\n\n        # Convblocks\n        self.models.append(\n            nn.Sequential(\n                *layer_list[:spl_pnt[split]]\n            )\n        )\n        # FC\n        self.models.append(\n            nn.Sequential(\n                *layer_list[spl_pnt[split]:9],\n                nn.Flatten(start_dim=1),\n                layer_list[9],\n            )\n        )\n\n        # Compression module\n        self.models.append(compression_module(\n            input_channel=input_channel, hidden_channel=out_channel, spatial=spatial))\n\n        # Two optimizers for each half\n        self.optimizers = [torch.optim.Adam(\n            model.parameters(), lr=learning_rate) for model in self.models]\n        # Encryption and Compression Module\n        self.ecc = ECC(bc_ratio)\n"}