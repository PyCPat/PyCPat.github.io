{"BEFORE":"        global_ball_loss = self.ball_loss_criterion(pred_ball_position_global, target_ball_position)\n        local_ball_loss = self.ball_loss_criterion(pred_ball_position_local, target_ball_position)\n        event_loss = self.event_loss_criterion(pred_events, target_events)\n        seg_loss = self.seg_loss_criterion(pred_seg, target_seg)\n        total_loss = 0.\n        for subloss_idx, subloss in enumerate([global_ball_loss, local_ball_loss, event_loss, seg_loss]):\n            total_loss += subloss \/ (self.vars[subloss_idx] ** 2) + torch.log(self.vars[subloss_idx])\n\n        return pred_ball_position_global, pred_ball_position_local, pred_events, pred_seg, total_loss, self.vars.data.tolist()\n","AFTER":"        global_ball_loss = self.ball_loss_criterion(pred_ball_position_global, target_ball_position)\n        local_ball_loss = self.ball_loss_criterion(pred_ball_position_local, target_ball_position)\n        event_loss = self.event_loss_criterion(pred_events, target_events)\n        seg_loss = self.seg_loss_criterion(pred_seg, target_seg)\n\n        total_loss = global_ball_loss \/ (self.vars[0] ** 2) + torch.log(self.vars[0])\n        total_loss += local_ball_loss \/ (self.vars[1] ** 2) + torch.log(self.vars[1])\n        total_loss += event_loss \/ (self.vars[2] ** 2) + torch.log(self.vars[2])\n        total_loss += seg_loss \/ (self.vars[3] ** 2) + torch.log(self.vars[3])\n\n        return pred_ball_position_global, pred_ball_position_local, pred_events, pred_seg, total_loss, self.vars\n"}