{"BEFORE":"        y, ts = [], 0  # outputs\n        for m in self.model:\n            if m.f != -1:  # if not from previous layer\n                x = y[m.f] if isinstance(m.f, int) else [x if j == -1 else y[j] for j in m.f]  # from earlier layers\n\n            if profile:\n                import thop\n                o = thop.profile(m, inputs=(x,), verbose=False)[0] \/ 1E9 * 2  # FLOPS\n                t = torch_utils.time_synchronized()\n                for _ in range(10):\n                    _ = m(x)\n                dt = torch_utils.time_synchronized() - t\n                ts += dt\n                print('%10.1f%10.0f%10.1fms %-40s' % (o, m.np, dt * 100, m.type))\n\n            x = m(x)  # run\n            y.append(x if m.i in self.save else None)  # save output\n\n        if profile:\n            print(ts * 100)\n","AFTER":"        y, dt = [], []  # outputs\n        for m in self.model:\n            if m.f != -1:  # if not from previous layer\n                x = y[m.f] if isinstance(m.f, int) else [x if j == -1 else y[j] for j in m.f]  # from earlier layers\n\n            if profile:\n                import thop\n                o = thop.profile(m, inputs=(x,), verbose=False)[0] \/ 1E9 * 2  # FLOPS\n                t = torch_utils.time_synchronized()\n                for _ in range(10):\n                    _ = m(x)\n                dt.append((torch_utils.time_synchronized() - t) * 100)\n                print('%10.1f%10.0f%10.1fms %-40s' % (o, m.np, dt[-1], m.type))\n\n            x = m(x)  # run\n            y.append(x if m.i in self.save else None)  # save output\n\n        if profile:\n            print('%.1fms total' % sum(dt))\n"}