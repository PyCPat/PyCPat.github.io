{"BEFORE":"        if self._add_self_loop:\n            graph = graph.add_self_loop()\n            if edge_weight is not None:\n                size = (graph.num_nodes(),) + edge_weight.size()[1:]\n                self_loop = edge_weight.new_ones(size)\n                edge_weight = torch.cat([edge_weight, self_loop])\n        else:\n            graph = graph.local_var()\n\n        edge_weight = dgl_normalize(graph, self._norm, edge_weight)\n\n        if self.weight is not None:\n            feat = feat @ self.weight\n\n        # ========= weighted dimension-wise Median aggregation ===\n        N, D = feat.size()\n        row, col, e_id = graph.edges(order='srcdst', form='all')\n        edge_index = torch.stack([row, col], dim=0)\n\n        if self._norm != 'none':\n            # if edge_weight is all 1 and it is not necessary\n            # to sort again\n            edge_weight = edge_weight[e_id]\n\n        median_idx = dimmedian_idx(feat, edge_index, edge_weight, N)\n","AFTER":"        if self._cached and self._cached_edges is not None:\n            row, col, edge_weight = self._cached_edges\n        else:\n            if self._add_self_loop:\n                graph = graph.add_self_loop()\n                if edge_weight is not None:\n                    size = (graph.num_nodes(),) + edge_weight.size()[1:]\n                    self_loop = edge_weight.new_ones(size)\n                    edge_weight = torch.cat([edge_weight, self_loop])\n            else:\n                graph = graph.local_var()\n\n            edge_weight = dgl_normalize(graph, self._norm, edge_weight)\n\n            row, col, e_id = graph.edges(order='srcdst', form='all')\n            edge_weight = edge_weight[e_id]\n\n            # cache edges\n            if self._cached:\n                self._cached_edges = row, col, edge_weight\n\n        if self.weight is not None:\n            feat = feat @ self.weight\n\n        # ========= weighted dimension-wise Median aggregation ===\n        N, D = feat.size()\n        median_idx = dimmedian_idx(feat, row, col, edge_weight, N)\n"}