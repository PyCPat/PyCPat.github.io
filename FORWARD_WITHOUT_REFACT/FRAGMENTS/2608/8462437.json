{"BEFORE":"        A = extract_edge_with_id_edge(g_homo)\n        for i in range(self.num_layers):\n            if i == 0:\n                H, W = self.layers[i](A)\n            else:\n                H, W = self.layers[i](A, H)\n            H = self.normalization(H)\n            #Ws.append(W)\n        h = g_homo.ndata['h'].to('cpu')\n        for i in range(self.num_channels):\n            edge_index, edge_weight = H[i][0], H[i][1]\n            new_g = dgl.graph((edge_index[0], edge_index[1]), idtype=th.int32)\n            if i == 0:\n                X_ = self.gcn(new_g, h, edge_weight=edge_weight)\n                X_ = F.relu(X_)\n            else:\n                edge_index, edge_weight = H[i][0], H[i][1]\n                X_ = th.cat((X_, F.relu(self.gcn(new_g, h, edge_weight=edge_weight))),\n                               dim=1)\n        X_ = self.linear1(X_)\n        X_ = F.relu(X_)\n        y = self.linear2(X_)\n        return y\n","AFTER":"        with g_homo.local_scope():\n            #Ws = []\n            # * =============== Extract edges in original graph ================\n            A = extract_edge_with_id_edge(g_homo)\n            # * =============== Get new graph structure ================\n            for i in range(self.num_layers):\n                if i == 0:\n                    H, W = self.layers[i](A)\n                else:\n                    H, W = self.layers[i](A, H)\n                H = self.normalization(H)\n                #Ws.append(W)\n            # * =============== GCN Encoder ================\n            h = g_homo.ndata['h']\n            for i in range(self.num_channels):\n                edge_index, edge_weight = H[i][0], H[i][1]\n                new_g = dgl.graph((edge_index[0], edge_index[1]), idtype=th.int32)\n                if i == 0:\n                    X_ = self.gcn(new_g, h, edge_weight=edge_weight)\n                    X_ = F.relu(X_)\n                else:\n                    X_ = th.cat((X_, F.relu(self.gcn(new_g, h, edge_weight=edge_weight))),\n                                   dim=1)\n            # x = self.gcn(g_homo.to('cpu'), h)\n            X_ = self.linear1(X_)\n            X_ = F.relu(X_)\n            y = self.linear2(X_)\n            return y\n\n\nclass GTLayer(nn.Module):\n"}