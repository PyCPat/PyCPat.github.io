{"BEFORE":"    def forward(self, x, target=None):\n        losses = dict()\n        if target is None:\n            return losses\n        x = self.conv(x)\n        x = self.avg_pool(x).squeeze(-1).squeeze(-1).squeeze(-1)\n        x = self.dropout(x)\n        x = self.fc(x)\n\n        if target.shape == torch.Size([]):\n            target = target.unsqueeze(0)\n\n        losses['loss_aux'] = self.loss_weight * self.loss_cls(x, target)\n        return losses\n","AFTER":"    def forward(self, x: Tensor) -> Tensor:\n        \"\"\"Auxiliary head forward function.\"\"\"\n        x = self.conv(x)\n        x = self.avg_pool(x).squeeze(-1).squeeze(-1).squeeze(-1)\n        x = self.dropout(x)\n        x = self.fc(x)\n\n        return x\n"}