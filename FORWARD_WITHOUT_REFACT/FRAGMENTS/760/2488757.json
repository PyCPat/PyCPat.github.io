{"BEFORE":"    def forward(self, graph, nodes, nodes_output):\n        \"\"\"\n        :param graph:\n        :param nodes:\n        :param nodes_output:\n        :return:\n        \"\"\"\n        nums_nodes, id = graph.batch_num_nodes(), 0\n        items_embedding = self.item_embedding(torch.tensor([i for i in range(self.items_total)]).to(nodes.device))\n        batch_embedding = []\n        for num_nodes in nums_nodes:\n            output_node_features = nodes_output[id:id + num_nodes, :]\n            output_nodes = nodes[id: id + num_nodes]\n            beta = torch.zeros(self.items_total, 1).to(nodes.device)\n            beta[output_nodes] = 1\n            embed = (1 - beta * self.alpha) * items_embedding.clone()\n            embed[output_nodes, :] = embed[output_nodes, :] + self.alpha[output_nodes] * output_node_features\n            batch_embedding.append(embed)\n            id += num_nodes\n        batch_embedding = torch.stack(batch_embedding)\n        return batch_embedding\n","AFTER":"        alpha = torch.sigmoid(self.alpha)\n        embed = (1 - alpha) * items_embedding.clone() + alpha * nodes_output\n        return embed\n"}