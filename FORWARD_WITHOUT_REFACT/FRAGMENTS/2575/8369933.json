{"BEFORE":"        input = input.contiguous()\n        target = target.contiguous()\n\n        # logits_flat: (batch * max_len, dim)\n        input = input.view(-1, input.shape[-1])\n        # target_flat: (batch * max_len, dim)\n        target_flat = target.view(-1, target.shape[-1])\n        # losses_flat: (batch * max_len, dim)\n        losses_flat = functional.mse_loss(\n            input, target_flat, size_average=False, reduce=False)\n        # losses: (batch, max_len, dim)\n        losses = losses_flat.view(*target.size())\n\n        # mask: (batch, max_len, 1)\n        mask = sequence_mask(\n            sequence_length=length, max_len=target.size(1)).unsqueeze(2)\n        losses = losses * mask.float()\n        loss = losses.sum() \/ (length.float().sum() * float(target.shape[2]))\n","AFTER":"        mask = sequence_mask(\n            sequence_length=length, max_len=target.size(1)).unsqueeze(2).float()\n        mask = mask.expand_as(input)\n        loss = functional.mse_loss(\n            input * mask, target * mask, reduction=\"sum\")\n        loss = loss \/ mask.sum()\n"}