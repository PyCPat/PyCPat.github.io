{"BEFORE":"        _, N, _ = tar_candidate.size()\n\n        # stack the target candidates to the end of input feature\n        feat_in_repeat = torch.cat([feat_in.repeat(1, N, 1), tar_candidate.float()], dim=2)\n        # print(\"feat_in_repeat size: \", feat_in_repeat.size())\n\n        # compute probability for each candidate\n        tar_candit_prob = F.softmax(self.prob_mlp(feat_in_repeat).squeeze(-1), dim=-1)  # [batch_size, self.N_tar, 1]\n","AFTER":"        feat_in_repeat = torch.cat([feat_in.repeat(1, self.N, 1), tar_candidate.float()], dim=2)\n        # print(\"feat_in_repeat size: \", feat_in_repeat.size())\n\n        # compute probability for each candidate\n        tar_candit_prob = F.softmax(self.prob_mlp(feat_in_repeat), dim=1).squeeze(-1)  # [batch_size, self.N_tar, 1]\n"}