{"BEFORE":"        x = self.encoding(x).permute(0, 2, 1).contiguous()\n        x = self.conv1(x)\n        x = self.activation1(x)\n        x = self.pool1(x)\n        x = self.dropout1(x)\n        x = x.view(-1, self.conv1.out_channels)\n","AFTER":"        x = self.encoding(x).permute(0, 2, 1).contiguous()\n        max_pool_layer = []\n        for i in range(self.n_conv_layers):\n            x_conv = getattr(self, f'conv{i+1}')(x)\n            x_conv = self.activation1(x_conv)\n            x_conv = self.pool1(x_conv)\n            max_pool_layer.append(x_conv)\n        # Concatenate max_pooling output of different convolutions\n        x = torch.cat(max_pool_layer, dim=1)\n        x = x.view(-1, x.shape[1])\n"}