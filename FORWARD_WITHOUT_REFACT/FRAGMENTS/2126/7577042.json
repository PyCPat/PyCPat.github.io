{"BEFORE":"        seq = self.embedding(seq_idx)\n        pack = pack_padded_sequence(seq, seq_len, batch_first=True)\n        h0 = torch.zeros(self.num_layers, seq.shape[0], self.hidden_size)\n        if self.c is True:\n            c0 = torch.zeros(self.num_layers, seq.shape[0], self.hidden_size)\n","AFTER":"    def forward(self, seq_idx, seq_len, device=torch.device('cpu')):\n        \"\"\"\n\n        Parameters\n        ----------\n        seq_idx:Tensor\n            a list of indices\n        seq_len:Tensor\n            length\n        device:torch.device\n            device\n\n        Returns\n        --------\n        sequence\n            a PackedSequence object\n        \"\"\"\n        seq = self.embedding(seq_idx)\n        pack = pack_padded_sequence(seq, seq_len.cpu(), batch_first=True, enforce_sorted=False).to(device)\n        h0 = torch.zeros(self.num_layers, seq.shape[0], self.hidden_size).to(device)\n        if self.c is True:\n            c0 = torch.zeros(self.num_layers, seq.shape[0], self.hidden_size).to(device)\n"}