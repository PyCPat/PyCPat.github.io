{"BEFORE":"        batch_entities = torch.tensor(torch.unique(batch_entities.cpu()), device=self.device)\n        batch_relations = torch.tensor(torch.unique(torch.cat([pos_rels.view(-1), neg_rels.view(-1)]).cpu()),\n                                       device=self.device)\n","AFTER":"        pos_rels = batch_positives[:, 1:2]\n        pos_tails = batch_positives[:, 2:3]\n\n        neg_heads = batch_negatives[:, 0:1]\n        neg_rels = batch_negatives[:, 1:2]\n        neg_tails = batch_negatives[:, 2:3]\n\n        # Shape: (batch_size, 1, embedding_dimension)\n        pos_head_embs = self.entity_embeddings(pos_heads)\n        # Reshape relation embeddings to the same shape of the projected entities\n        pos_rel_embs = self.relation_embeddings(pos_rels).view(-1, self.embedding_dim)\n        pos_tail_embs = self.entity_embeddings(pos_tails)\n        pos_normal_embs = self.normal_vector_embeddings(pos_rels)\n\n        neg_head_embs = self.entity_embeddings(neg_heads)\n        # Reshape relation embeddings to the same shape of the projected entities\n        neg_rel_embs = self.relation_embeddings(neg_rels).view(-1, self.embedding_dim)\n        neg_tail_embs = self.entity_embeddings(neg_tails)\n        neg_normal_embs = self.normal_vector_embeddings(neg_rels)\n\n        projected_heads_pos = self.project_to_hyperplane(entity_embs=pos_head_embs, normal_vec_embs=pos_normal_embs)\n        projected_tails_pos = self.project_to_hyperplane(entity_embs=pos_tail_embs, normal_vec_embs=pos_normal_embs)\n\n        projected_heads_neg = self.project_to_hyperplane(entity_embs=neg_head_embs, normal_vec_embs=neg_normal_embs)\n        projected_tails_neg = self.project_to_hyperplane(entity_embs=neg_tail_embs, normal_vec_embs=neg_normal_embs)\n\n        pos_scores = self._compute_scores(h_embs=projected_heads_pos, r_embs=pos_rel_embs, t_embs=projected_tails_pos)\n        neg_scores = self._compute_scores(h_embs=projected_heads_neg, r_embs=neg_rel_embs, t_embs=projected_tails_neg)\n\n        batch_entities = torch.cat([pos_heads.view(-1), pos_tails.view(-1), neg_heads.view(-1), neg_tails.view(-1)])\n        batch_entities = torch.unique(batch_entities.cpu())\n        batch_relations = torch.unique(torch.cat([pos_rels.view(-1), neg_rels.view(-1)]).cpu())\n\n        if self.use_cuda:\n            batch_entities = torch.unique(batch_entities.cpu()).cuda()\n            batch_relations = torch.unique(torch.cat([pos_rels.view(-1), neg_rels.view(-1)]).cpu()).cuda()\n\n\n        loss = self.compute_loss(pos_scores=pos_scores, neg_scores=neg_scores, batch_entities=batch_entities,\n"}