{"BEFORE":"        h = g.in_degrees().view(-1, 1).float()\n        for conv in self.layers:\n            h = conv(g, h)\n        g.ndata['h'] = h\n        hg = dgl.mean_nodes(g, 'h')\n        return self.classify(hg)\n","AFTER":"    def forward(self, g, vars = None):\n        # For undirected graphs, in_degree is the same as\n        # out_degree.\n\n        if vars is None:\n            vars = self.vars\n\n        idx = 0 \n        idx_gcn = 0\n\n        h = g.in_degrees().view(-1, 1).float()\n        \n        for name, param in self.config:\n            if name is 'GraphConv':\n                w, b = vars[idx], vars[idx + 1]\n                conv = self.graph_conv[idx_gcn]\n                h = conv(g, h, w, b)\n                g.ndata['h'] = h\n\n                idx += 2 \n                idx_gcn += 1\n                \n                if idx_gcn == len(self.graph_conv):\n                    hg = dgl.mean_nodes(g, 'h')\n                            \n            if name is 'linear':\n                w, b = vars[idx], vars[idx + 1]\n                h = F.linear(h, w, b)\n                idx += 2\n\n        \n        return h\n"}