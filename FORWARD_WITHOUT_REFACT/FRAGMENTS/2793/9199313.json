{"BEFORE":"    def forward(self, preds: Tensor, targets: Tensor) -> Tensor:\n        # preds in shape [B, C, H, W] and targets in shape [B, C, H, W]\n        if preds.shape[2:] != targets.shape[2:]:\n            preds = F.interpolate(preds, size=targets.shape[2:], mode='bilinear', align_corners=False)\n\n        tp = torch.sum(targets*preds, dim=(2, 3))\n        fn = torch.sum(targets*(1-preds), dim=(2, 3))\n        fp = torch.sum((1-targets)*preds, dim=(2, 3))\n\n        dice_score = (tp + 1e-6) \/ (tp + self.delta * fn + (1 - self.delta) * fp + 1e-6)\n        dice_score = torch.sum(1-dice_score, dim=-1)\n\n        # adjust loss to account for number of classes\n        dice_score = dice_score \/ targets.shape[1]\n        return dice_score.mean()\n","AFTER":"    def forward(self, preds, targets: Tensor) -> Tensor:\n        if isinstance(preds, list):\n            return sum([w * self._forward(pred, targets) for (pred, w) in zip(preds, self.aux_weights)])\n        return self._forward(preds, targets)\n"}