{"BEFORE":"    def __init__(self, image_size: int = 28, channels: int = 1, hidden_channels: int = 1200):\n        \"\"\"\n        Args:\n            image_size (int): The size of the image. (Default: 28).\n            channels (int): The channels of the image. (Default: 1).\n            hidden_channels (int): The number of channels in the hidden layer of the generator. (Default: 1200)\n        \"\"\"\n        super(Generator, self).__init__()\n        self.image_size = image_size\n        self.channels = channels\n\n        self.main = nn.Sequential(\n            nn.Linear(100, hidden_channels),\n            nn.ReLU(inplace=True),\n\n            nn.Linear(hidden_channels, hidden_channels),\n            nn.ReLU(inplace=True),\n\n            nn.Linear(hidden_channels, channels * image_size * image_size),\n            nn.Tanh()\n        )\n","AFTER":"        self.main = nn.Sequential(\n            nn.Linear(100, 128),\n            nn.LeakyReLU(0.2, True),\n\n            nn.Linear(128, 256),\n            nn.BatchNorm1d(256),\n            nn.LeakyReLU(0.2, True),\n\n            nn.Linear(256, 512),\n            nn.BatchNorm1d(512),\n            nn.LeakyReLU(0.2, True),\n\n            nn.Linear(512, 1024),\n            nn.BatchNorm1d(1024),\n            nn.LeakyReLU(0.2, True),\n\n            nn.Linear(1024, channels * image_size * image_size),\n            nn.Tanh()\n        )\n"}