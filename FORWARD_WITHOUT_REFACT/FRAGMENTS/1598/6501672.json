{"BEFORE":"                reg_loss_total.append(torch.tensor(0.))\n                continue\n            # ---------------------------------------- class_loss\n            iou, matched = box_iou(anchors, boxes_ori).max(dim=1)  # 每个anchors只能对应一个boxes\n            positive_idxs = (iou >= 0.5)  # 正标签\n            # 既不是负样本，也不是正样本 -> -1\n            labels = torch.full_like(classification, -1, device=device)\n            labels[positive_idxs, labels_ori[matched][positive_idxs]] = 1  # 正样本\n            labels[iou < 0.4] = 0  # 负样本\n            class_loss_total.append(weighted_binary_focal_loss(\n                classification, labels, self.alpha, self.gamma, reduction='sum') \/\n                                    torch.nonzero(positive_idxs).shape[0])\n            # ---------------------------------------- reg_loss\n            boxes = boxes_ori[matched][positive_idxs]\n            anchors = anchors[positive_idxs]\n            reg_true = encode_boxes(boxes, anchors)\n","AFTER":"        reg_loss_total = []\n        device = anchors.device\n\n        for i, target in enumerate(targets):  # 遍历每一张图片\n            labels_ori, boxes_ori = target['labels'], target['boxes']\n            classification, regression = classifications[i], regressions[i]\n            if labels_ori.shape[0] == 0:  # 空标签图片\n                labels = torch.zeros_like(classification, device=device)\n                class_loss_total.append(weighted_binary_focal_loss(\n                    classification, labels, self.alpha, self.gamma, reduction='sum'))\n                reg_loss_total.append(torch.tensor(0.).to(device))\n                continue\n            # ---------------------------------------- class_loss\n            iou, matched = box_iou(anchors, boxes_ori).max(dim=1)  # 每个anchors只能对应一个boxes\n            positive_idxs = (iou >= 0.5)  # 正标签\n            # 既不是负样本，也不是正样本 -> -1\n            labels = torch.full_like(classification, -1, device=device)\n            labels[positive_idxs, labels_ori[matched][positive_idxs]] = 1  # 正样本\n            labels[iou < 0.4] = 0  # 负样本\n            class_loss_total.append(weighted_binary_focal_loss(\n                classification, labels, self.alpha, self.gamma, reduction='sum') \/\n                                    max(torch.nonzero(positive_idxs).shape[0], 1))\n            # ---------------------------------------- reg_loss\n            boxes = boxes_ori[matched][positive_idxs]\n            if boxes.shape[0] == 0:\n                reg_loss_total.append(torch.tensor(0.).to(device))\n                continue\n            anchors_pos = anchors[positive_idxs]\n            reg_true = encode_boxes(boxes, anchors_pos)\n"}