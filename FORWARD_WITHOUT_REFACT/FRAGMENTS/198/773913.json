{"BEFORE":"        self.frozen_stages = frozen_stages\n        self.with_cp = with_cp\n\n        assert isinstance(normalize, dict) and 'type' in normalize\n        assert normalize['type'] in ['BN', 'GN']\n        if normalize['type'] == 'GN':\n            assert 'num_groups' in normalize\n        else:\n            assert (set(['type', 'bn_eval', 'bn_frozen'])\n                    == set(normalize))\n        if normalize['type'] == 'BN':\n            self.bn_eval = normalize['bn_eval']\n            self.bn_frozen = normalize['bn_frozen']\n        self.normalize = normalize\n\n        self.block, stage_blocks = self.arch_settings[depth]\n        self.stage_blocks = stage_blocks[:num_stages]\n        self.inplanes = 64\n\n        self.conv1 = nn.Conv2d(\n            3, 64, kernel_size=7, stride=2, padding=3, bias=False)\n        stem_norm = build_norm_layer(normalize, 64)\n        self.stem_norm_name = 'gn1' if normalize['type'] == 'GN' else 'bn1'\n        self.add_module(self.stem_norm_name, stem_norm)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n","AFTER":"        self.is_frozen = [i <= frozen_stages for i in range(num_stages + 1)]\n        assert (isinstance(normalize, dict) and 'eval' in normalize\n                and 'frozen' in normalize)\n        self.norm_eval = normalize.pop('eval')\n        self.normalize = normalize\n        self.block, stage_blocks = self.arch_settings[depth]\n        self.stage_blocks = stage_blocks[:num_stages]\n        self.inplanes = 64\n\n        self._make_stem_layer()\n"}