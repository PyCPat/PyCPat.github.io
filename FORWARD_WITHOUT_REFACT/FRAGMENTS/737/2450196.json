{"BEFORE":"        self.conv1d_up2_s2_2 = nn.Sequential(\n            nn.Conv1d(\n                in_channels=hidden_units[1], out_channels=hidden_units[1],\n                kernel_size=3, padding=1, stride=1,\n            ),\n            nn.BatchNorm1d(hidden_units[1]),\n            nn.LeakyReLU(),\n\n            nn.Conv1d(\n                in_channels=hidden_units[1], out_channels=hidden_units[1],\n                kernel_size=3, padding=1, stride=1,\n            ),\n            nn.BatchNorm1d(hidden_units[1]),\n            nn.LeakyReLU(),\n\n            nn.Conv1d(\n                in_channels=hidden_units[1], out_channels=hidden_units[2],\n                kernel_size=3, padding=1, stride=2,\n            ),\n            nn.BatchNorm1d(hidden_units[2]),\n            nn.LeakyReLU(),\n        )  # (bs, 2048, 90)\n\n        self.shortcut_2 = nn.Sequential(\n            nn.Conv1d(\n                in_channels=hidden_units[1], out_channels=hidden_units[2],\n                kernel_size=3, stride=2, padding=1,\n            ),\n            nn.LeakyReLU(),\n        )\n        # stage 4\n        self.conv1d_s2 = nn.Sequential(\n            nn.Conv1d(\n                in_channels=hidden_units[2], out_channels=hidden_units[2],\n                kernel_size=3, padding=1, stride=1,\n            ),\n            nn.BatchNorm1d(hidden_units[2]),\n            nn.LeakyReLU(),\n","AFTER":"        self.conv1d_up2_s2_2 = nn.Sequential(\n            # nn.Conv1d(\n            #     in_channels=hidden_units[1], out_channels=hidden_units[1],\n            #     kernel_size=3, padding=1, stride=1,\n            # ),\n            # nn.BatchNorm1d(hidden_units[1]),\n            # nn.LeakyReLU(),\n\n            # nn.Conv1d(\n            #     in_channels=hidden_units[1], out_channels=hidden_units[1],\n            #     kernel_size=3, padding=1, stride=1,\n            # ),\n            # nn.BatchNorm1d(hidden_units[1]),\n            # nn.LeakyReLU(),\n\n            nn.Conv1d(\n                in_channels=hidden_units[1], out_channels=hidden_units[2],\n                kernel_size=3, padding=1, stride=2,\n            ),\n            nn.BatchNorm1d(hidden_units[2]),\n            nn.LeakyReLU(),\n        )  # (bs, 2048, 90)\n"}