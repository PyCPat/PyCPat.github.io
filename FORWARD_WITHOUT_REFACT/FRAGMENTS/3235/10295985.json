{"BEFORE":"    def forward(self, x, adj, dropout=0.0):\n        r\"\"\"\n\n        Parameters\n        ----------\n        x : torch.Tensor\n            Tensor of input features.\n        adj : torch.SparseTensor\n            Sparse tensor of adjacency matrix.\n        dropout : float, optional\n            Rate of dropout. Default: ``0.0``.\n\n        Returns\n        -------\n        x : torch.Tensor\n            Output of model (logits without activation).\n\n        \"\"\"\n\n        if self.layer_norm:\n            x = self.layer_norm1(x)\n        x = self.linear1(x)\n        x = self.activation(x)\n        x = F.dropout(x, dropout)\n        if self.layer_norm:\n            x = self.layer_norm2(x)\n        x = self.linear2(x)\n        x = F.dropout(x, dropout)\n        for i in range(self.k):\n            if self.edge_drop != 0:\n                adj = self.dropout(adj, dropout_prob=self.edge_drop)\n            x = (1 - self.alpha) * torch.spmm(adj, x) + self.alpha * x\n","AFTER":"        for layer in self.layers:\n            if isinstance(layer, nn.LayerNorm):\n                x = layer(x)\n            else:\n                x = layer(x)\n                x = self.activation(x)\n                if self.dropout is not None:\n                    x = self.dropout(x)\n        for i in range(self.k):\n            if self.edge_dropout is not None and self.training:\n                adj = self.edge_dropout(adj)\n            x = (1 - self.alpha) * torch.spmm(adj, x) + self.alpha * x\n"}