{"BEFORE":"    def forward(self, teacher, student, normalize=False):\n        \"\"\"\n        Forward function\n\n        :param teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param student (torch.FloatTensor): Prediction made by the student model\n        :param normalize (bool): True if inputs need to be normalized\n        \"\"\"\n\n        with torch.no_grad():\n            t = teacher.unsqueeze(0) - teacher.unsqueeze(1)\n            if normalize:\n                t = F.normalize(t, p=2, dim=2)\n            t = torch.bmm(t, t.transpose(1, 2)).view(-1)\n\n        s = student.unsqueeze(0) - student.unsqueeze(1)\n        if normalize:\n            s = F.normalize(s, p=2, dim=2)\n        s = torch.bmm(s, s.transpose(1, 2)).view(-1)\n","AFTER":"            t = pairwaise_distance(teacher)\n            t_mean = t[t > 0].mean()\n            t = t \/ (t_mean + 1e-7)\n\n        s = pairwaise_distance(student)\n        s_mean = s[s > 0].mean()\n        s = s \/ (s_mean + 1e-7)\n"}