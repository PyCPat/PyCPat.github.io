{"BEFORE":"    def forward(self, A, X, target_x, target):\n        A = A.unsqueeze(0).permute(0, 3, 1, 2)\n        Ws = []\n        for i in range(self.num_layers):\n            if i == 0:\n                H, W = self.layers[i](A)\n            else:\n                H = self.normalization(H)\n                H, W = self.layers[i](A, H)\n            Ws.append(W)\n\n        # H,W1 = self.layer1(A)\n        # H = self.normalization(H)\n        # H,W2 = self.layer2(A, H)\n        # H = self.normalization(H)\n        # H,W3 = self.layer3(A, H)\n        for i in range(self.num_channels):\n            if i == 0:\n                X_ = F.relu(self.gcn_conv(X, H[i]))\n            else:\n                X_tmp = F.relu(self.gcn_conv(X, H[i]))\n                X_ = th.cat((X_, X_tmp), dim=1)\n        X_ = self.linear1(X_)\n        X_ = F.relu(X_)\n        y = self.linear2(X_[target_x])\n        loss = self.loss(y, target)\n        return loss, y, Ws\n","AFTER":"    def forward(self, g_homo):\n        with g_homo.local_scope():\n            ctx = g_homo.device\n            A = extract_mtx_with_id_edge(g_homo)\n            X = g_homo.ndata['h']\n            A = A.unsqueeze(0)\n            Ws = []\n            for i in range(self.num_layers):\n                if i == 0:\n                    H, W = self.layers[i](A)\n                else:\n                    H = self.normalization(H)\n                    H, W = self.layers[i](A, H)\n                Ws.append(W)\n\n            # H,W1 = self.layer1(A)\n            # H = self.normalization(H)\n            # H,W2 = self.layer2(A, H)\n            # H = self.normalization(H)\n            # H,W3 = self.layer3(A, H)\n            for i in range(self.num_channels):\n                if i == 0:\n                    X_ = F.relu(self.gcn_conv(X, H[i]))\n                else:\n                    X_tmp = F.relu(self.gcn_conv(X, H[i]))\n                    X_ = th.cat((X_, X_tmp), dim=1)\n            #GCN\n\n            X_ = self.linear1(X_)\n            X_ = F.relu(X_)\n            y = self.linear2(X_)\n        return y\n"}