{"BEFORE":"        heatmaps3D = self.reproLayer(heatmaps_padded, center3D,centerHM,\n                    cameraMatrices, intrinsicMatrices, distortionCoefficients)\n        if (self.training):\n            heatmaps3D = self.drop_joint(heatmaps3D)\n\n        heatmap_final = self.v2vNet((heatmaps3D\/255.))\n","AFTER":"        heatmap_final = self.softplus(heatmap_final)\n\n        #TODO: Make this work for different batch sizes\"!!\n        norm = torch.sum(heatmap_final, dim = [2,3,4])\n        x = torch.mul(heatmap_final, self.xx)\n        x = torch.sum(x, dim = [2,3,4])\/norm\n        y = torch.mul(heatmap_final, self.yy)\n        y = torch.sum(y, dim = [2,3,4])\/norm\n        z = torch.mul(heatmap_final, self.zz)\n        z = torch.sum(z, dim = [2,3,4])\/norm\n        points3D = torch.stack([x,y,z], dim = 2)\n        confidences = torch.clamp(torch.max(heatmap_final.view(\n                    *heatmap_final.shape[:2], -1), dim = 2)[0], max = 255.)\/255.\n        points3D = (points3D.transpose(0,1)*self.grid_spacing*2 - self.grid_size\n                    \/ 2. + center3D).transpose(0,1)\n        heatmap_final = self.softplus(heatmap_final)\n\n        return heatmap_final, heatmaps_padded, points3D, confidences\n"}