{"BEFORE":"            x = self.conv(x) # (B, C, N)\n        B, C, N = x.shape\n        x = torch.transpose(x, 1, 2) # (B, N, C)\n\n        if self.lstm is not None:\n            x, _ = self.lstm(x)\n            x = self.dropout(F.relu(x)) # (B, N, H*2)\n\n        if self.conv is not None and self.lstm_cnn:\n            x = torch.transpose(x, 1, 2) # (B, H*2, N)\n            x = self.conv(x) # (B, C, N)\n            x = torch.transpose(x, 1, 2) # (B, N, C)\n\n        return x # (B, N, n_out)\n","AFTER":"        if self.conv is None and self.lstm is None:\n            x = torch.transpose(x, 1, 2) # (B, N, C)\n            return x, x, x\n\n        if self.conv is not None and not self.lstm_cnn:\n            x = self.conv(x) # (B, C, N)\n        # B, C, N = x.shape\n        x = torch.transpose(x, 1, 2) # (B, N, C)\n\n        if self.lstm is not None:\n            x, _ = self.lstm(x)\n            x = self.dropout(F.relu(x)) # (B, N, H*2)\n\n        if self.conv is not None and self.lstm_cnn:\n            x = torch.transpose(x, 1, 2) # (B, H*2, N)\n            x = self.conv(x) # (B, C, N)\n            x = torch.transpose(x, 1, 2) # (B, N, C)\n\n        assert(x.shape[-1] % 3 == 0)\n        x_l = x[:, :, 0::3]\n        x_r = x[:, :, 1::3]\n        x_r = x_r[:, :, torch.arange(x_r.shape[-1]-1, -1, -1)] # reverse the last axis\n        x_u = x[:, :, 2::3]\n        return x_l, x_r, x_u # (B, N, n_out\/\/3) * 3\n"}