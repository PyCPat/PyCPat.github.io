{"BEFORE":"    def forward(self, codes: torch.ByteTensor, shape: torch.IntTensor) -> torch.Tensor:\n        h, w = shape[0], shape[1]\n        return ((self._decoder(self._quantizer(codes)))[..., :h, :w].tanh() + 1) \/ 2\n","AFTER":"        smallQ = self._reverses[-1](self._quantizers[-1](codes[-1]))\n        for i in range(self._levels - 1, -1, -1):\n            q = self._scatters[i](self._quantizers[i](codes[i]))\n            smallQ = self._reverses[i](q + smallQ)\n        return self._decoder(smallQ).tanh()\n"}