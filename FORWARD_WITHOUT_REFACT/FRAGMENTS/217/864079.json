{"BEFORE":"    def __init__(self, in_channels, growth_rate, kernel_size, depth=None, norm=True, nonlinear='relu', eps=EPS):\n        super().__init__()\n\n        if type(growth_rate) is int:\n            assert depth is not None, \"Specify `depth`\"\n            growth_rate = [\n                growth_rate for _ in range(depth)\n            ]\n        elif type(growth_rate) is list:\n            if depth is not None:\n                assert depth == len(growth_rate), \"`depth` is different from `len(growth_rate)`\"\n            depth = len(growth_rate)\n        else:\n            raise ValueError(\"Not support growth_rate={}\".format(growth_rate))\n        \n        self.growth_rate = growth_rate\n        self.depth = depth\n\n        net = []\n        num_features = []\n\n        for idx in range(self.depth):\n            if idx == 0:\n                num_features.append(in_channels)\n            else:\n                num_features.append(growth_rate[idx-1])\n            net.append(MultiDilatedConvBlock(num_features, growth_rate[idx], kernel_size=kernel_size, norm=norm, nonlinear=nonlinear, eps=eps))\n        self.net = nn.Sequential(*net)\n\n        self.out_channels = sum(growth_rate)\n        self.eps = eps\n","AFTER":"            growth_rate = [growth_rate] * depth\n        elif type(growth_rate) is list:\n            if depth is not None:\n                assert depth == len(growth_rate), \"`depth` is different from `len(growth_rate)`\"\n            depth = len(growth_rate)\n        else:\n            raise ValueError(\"Not support growth_rate={}\".format(growth_rate))\n        \n        self.growth_rate = growth_rate\n        self.depth = depth\n\n        net = []\n        _in_channels = in_channels\n\n        for idx in range(depth):\n            _out_channels = sum(growth_rate[idx:])\n            dilation = 2**idx\n            conv_block = ConvBlock2d(_in_channels, _out_channels, kernel_size=kernel_size, stride=1, dilation=dilation, eps=eps)\n            net.append(conv_block)\n            _in_channels = growth_rate[idx]\n\n        self.net = nn.ModuleList(net)\n"}