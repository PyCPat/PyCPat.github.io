{"BEFORE":"        layer_outputs = []\n        output = []\n\n        for i, (mdef, module) in enumerate(zip(self.module_defs, self.module_list)):\n            mtype = mdef['type']\n            if mtype in ['convolutional', 'upsample', 'maxpool']:\n                x = module(x)\n            elif mtype == 'route':\n                layer_i = [int(x) for x in mdef['layers'].split(',')]\n                if len(layer_i) == 1:\n                    x = layer_outputs[layer_i[0]]\n                else:\n                    try:\n                        x = torch.cat([layer_outputs[i] for i in layer_i], 1)\n                    except:  # apply stride 2 for darknet reorg layer\n                        layer_outputs[layer_i[1]] = F.interpolate(layer_outputs[layer_i[1]], scale_factor=[0.5, 0.5])\n                        x = torch.cat([layer_outputs[i] for i in layer_i], 1)\n                    # print(''), [print(layer_outputs[i].shape) for i in layer_i], print(x.shape)\n            elif mtype == 'shortcut':\n                layer_i = int(mdef['from'])\n                x = layer_outputs[-1] + layer_outputs[layer_i]\n","AFTER":"        layer_outputs = []\n        output = []\n\n        for i, (mdef, module) in enumerate(zip(self.module_defs, self.module_list)):\n            mtype = mdef['type']\n            if mtype in ['convolutional', 'upsample', 'maxpool']:\n                x = module(x)\n            elif mtype == 'route':\n                layer_i = [int(x) for x in mdef['layers'].split(',')]\n                if len(layer_i) == 1:\n                    x = layer_outputs[layer_i[0]]\n                else:\n                    try:\n                        x = torch.cat([layer_outputs[i] for i in layer_i], 1)\n                    except:  # apply stride 2 for darknet reorg layer\n                        layer_outputs[layer_i[1]] = F.interpolate(layer_outputs[layer_i[1]], scale_factor=[0.5, 0.5])\n                        x = torch.cat([layer_outputs[i] for i in layer_i], 1)\n                    # print(''), [print(layer_outputs[i].shape) for i in layer_i], print(x.shape)\n            elif mtype == 'shortcut':\n                x += layer_outputs[int(mdef['from'])]\n"}