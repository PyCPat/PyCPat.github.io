{"BEFORE":"                 with_ibn=False,\n                 reduce_dim=256,\n                 stripe=6,\n                 stage_with_gcb_str='0,1,2,3'):\n        super(PCB, self).__init__()\n        stage_with_gcb = [False, False, False, False]\n        if gcb and stage_with_gcb_str:\n            stage_with_gcb_list = map(int, stage_with_gcb_str.split(','))\n            for n in stage_with_gcb_list:\n                stage_with_gcb[n] = True\n        if num_layers in [50, 101, '101_32x8d']:\n            if num_layers == 50:\n                resnet_fn = resnet50\n            elif num_layers == 101:\n                resnet_fn = resnet101\n            elif num_layers == '101_32x8d':\n                resnet_fn = resnext101_32x8d\n            self.resnet = resnet_fn(pretrained=True,\n                                    gcb=gcb,\n                                    with_ibn=with_ibn,\n                                    stage_with_gcb=stage_with_gcb)\n\n        self.gap = nn.AdaptiveAvgPool2d(1)\n","AFTER":"                 use_non_local=False):\n\n        super(PCB, self).__init__()\n        kwargs = {\n            'use_non_local': use_non_local\n        }\n        self.resnet = model_zoo[num_layers](\n            pretrained=True, last_stride=last_stride,\n            **kwargs\n        )\n"}