{"BEFORE":"        mask = np.ones((hh, ww), np.float32)\n        st_h = np.random.randint(d)\n        st_w = np.random.randint(d)\n        if self.use_h:\n            for i in range(hh \/\/ d):\n                s = d * i + st_h\n                t = min(s + self.l, hh)\n                mask[s:t, :] *= 0\n        if self.use_w:\n            for i in range(ww \/\/ d):\n                s = d * i + st_w\n                t = min(s + self.l, ww)\n                mask[:, s:t] *= 0\n\n        r = np.random.randint(self.rotate)\n        mask = Image.fromarray(np.uint8(mask))\n        mask = mask.rotate(r)\n        mask = np.asarray(mask)\n        mask = mask[(hh - h) \/\/ 2:(hh - h) \/\/ 2 + h,\n                    (ww - w) \/\/ 2:(ww - w) \/\/ 2 + w]\n\n        mask = torch.from_numpy(mask).to(x.dtype).cuda()\n        if self.mode == 1:\n            mask = 1 - mask\n        mask = mask.expand_as(x)\n        if self.offset:\n            offset = torch.from_numpy(2 * (np.random.rand(h, w) - 0.5)).to(\n                x.dtype).cuda()\n","AFTER":"        mask = torch.ones((hh, ww), dtype=torch.uint8, device=x.device)\n        st_h = np.random.randint(d)\n        st_w = np.random.randint(d)\n        if self.use_h:\n            for i in range(hh \/\/ d):\n                s = d * i + st_h\n                t = min(s + self.l, hh)\n                mask[s:t, :] *= 0\n        if self.use_w:\n            for i in range(ww \/\/ d):\n                s = d * i + st_w\n                t = min(s + self.l, ww)\n                mask[:, s:t] *= 0\n\n        r = np.random.randint(self.rotate)\n        mask = rotate(mask.unsqueeze(0), r)[0]\n        mask = mask[(hh - h) \/\/ 2:(hh - h) \/\/ 2 + h,\n                    (ww - w) \/\/ 2:(ww - w) \/\/ 2 + w]\n        mask = mask.to(x.dtype)\n        if self.mode == 1:\n            mask = 1 - mask\n        mask = mask.expand_as(x)\n        if self.offset:\n            offset = (2 * torch.rand(\n                (h, w), device=x.device) - 0.5).to(x.dtype)\n"}