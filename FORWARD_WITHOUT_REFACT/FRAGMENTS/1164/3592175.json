{"BEFORE":"        from_up = self.act(self.norm0(self.up_conv(from_up)))\n        if self.concat:\n            if 'res' in self.mode:\n                x1 = torch.cat((from_up, from_down, mask), 1)\n            else:\n                x1 = torch.cat((from_up, from_down), 1)\n        else:\n            if from_down is not None:\n                x1 = from_up + from_down\n            else:\n                x1 = from_up\n        \n        x1 = self.act(self.norm1(self.conv1(x1)))\n        if 'res' in self.mode:\n            x1 = x1 + from_up\n        for idx, conv in enumerate(self.conv2):\n            x2 = conv(x1)\n","AFTER":"            x1 = torch.cat((from_up, from_down), 1)\n        else:\n            if from_down is not None:\n                x1 = from_up + from_down\n            else:\n                x1 = from_up\n        x1 = self.act(self.norm1(self.conv1(x1)))\n\n        # residual structure\n        _,C,H,W = x1.shape\n        for idx, convs in enumerate(zip(self.conv2, self.conv3)):\n            mask = convs[0](torch.cat([x1[:,:C\/\/2], mask], dim=1))\n            x2_actv = x1[:,C\/\/2:] * mask\n            x2 = convs[1](x1[:,C\/\/2:] + x2_actv)\n"}