{"BEFORE":"        inter = inter.view(N, self.classes, -1).sum(2)\n\n        # Denominator\n        union = inputs + target_oneHot - (inputs * target_oneHot)\n        # Sum over all pixels N x C x H x W => N x C\n        union = union.view(N, self.classes, -1).sum(2)\n\n        loss = inter \/ union\n\n        ## Return average loss over classes and batch\n        # return 1 - loss.mean()\n        return -(loss.mean() - 1.)\n","AFTER":"        C = inputs.size()[1]\n\n        # predicted probabilities for each pixel along channel\n        inputs = F.softmax(inputs, dim=1)\n\n        # Numerator Product\n        inter = inputs * target_oneHot\n        # Sum over all pixels N x C x H x W => N x C\n        inter = inter.view(N, C, -1).sum(2)\n\n        # Denominator\n        union = inputs + target_oneHot - (inputs * target_oneHot)\n        # Sum over all pixels N x C x H x W => N x C\n        union = union.view(N, C, -1).sum(2)\n\n        loss = inter \/ union\n\n        ## Return average loss over classes and batch\n        return -(loss[:, -self.classes].mean() - 1.)\n"}