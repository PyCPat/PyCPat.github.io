{"BEFORE":"    def __init__(self, focus=True, version='L', with_C3TR=False):\n        super(YOLOv5, self).__init__()\n        self.version = version\n        self.with_focus = focus\n        self.with_c3tr = with_C3TR\n        gains = {'s': {'gd': 0.33, 'gw': 0.5},\n                 'm': {'gd': 0.67, 'gw': 0.75},\n                 'l': {'gd': 1, 'gw': 1},\n                 'x': {'gd': 1.33, 'gw': 1.25}}\n        self.gd = gains[self.version.lower()]['gd']  # depth gain\n        self.gw = gains[self.version.lower()]['gw']  # width gain\n\n        self.channels_out = {\n            'stage1': 64,\n            'stage2_1': 128,\n            'stage2_2': 128,\n            'stage3_1': 256,\n            'stage3_2': 256,\n            'stage4_1': 512,\n            'stage4_2': 512,\n            'stage5': 1024,\n            'spp': 1024,\n            'csp1': 1024,\n            'conv1': 512\n        }\n        self.re_channels_out()\n\n        if self.with_focus:\n            self.stage1 = Focus(3, self.channels_out['stage1'])\n        else:\n            self.stage1 = Conv(3, self.channels_out['stage1'], 3, 2)\n\n        # for latest yolov5, you can change BottleneckCSP to C3\n        self.stage2_1 = Conv(self.channels_out['stage1'], self.channels_out['stage2_1'], k=3, s=2)\n        self.stage2_2 = C3(self.channels_out['stage2_1'], self.channels_out['stage2_2'], self.get_depth(3))\n        self.stage3_1 = Conv(self.channels_out['stage2_2'], self.channels_out['stage3_1'], 3, 2)\n        self.stage3_2 = C3(self.channels_out['stage3_1'], self.channels_out['stage3_2'], self.get_depth(9))\n        self.stage4_1 = Conv(self.channels_out['stage3_2'], self.channels_out['stage4_1'], 3, 2)\n        self.stage4_2 = C3(self.channels_out['stage4_1'], self.channels_out['stage4_2'], self.get_depth(9))\n        self.stage5 = Conv(self.channels_out['stage4_2'], self.channels_out['stage5'], 3, 2)\n        self.spp = SPP(self.channels_out['stage5'], self.channels_out['spp'], [5, 9, 13])\n        if self.with_c3tr:\n            self.c3tr = C3TR(self.channels_out['spp'], self.channels_out['csp1'], self.get_depth(3), False)\n        else:\n            self.csp1 = C3(self.channels_out['spp'], self.channels_out['csp1'], self.get_depth(3), False)\n        self.conv1 = Conv(self.channels_out['csp1'], self.channels_out['conv1'], 1, 1)\n        self.out_shape = {'C3_size': self.channels_out['stage3_2'],\n                          'C4_size': self.channels_out['stage4_2'],\n                          'C5_size': self.channels_out['conv1']}\n        print(\"backbone output channel: C3 {}, C4 {}, C5 {}\".format(self.channels_out['stage3_2'],\n                                                                    self.channels_out['stage4_2'],\n                                                                    self.channels_out['conv1']))\n","AFTER":"                'n': {'gd': 0.33, 'gw': 0.25},\n                's': {'gd': 0.33, 'gw': 0.5},\n                'm': {'gd': 0.67, 'gw': 0.75},\n                'l': {'gd': 1, 'gw': 1},\n                'x': {'gd': 1.33, 'gw': 1.25}}\n\n        self.gd = gains[self.version.lower()]['gd']  # depth gain\n        self.gw = gains[self.version.lower()]['gw']  # width gain\n\n        self.channels_out = [64, 128, 128, 256, 256, 512, 512, 1024, 1024, 1024]\n\n        self.re_channels_out()\n\n        self.C1 = Conv(3, self.channels_out[0], 6, 2, 2)\n\n        self.C2  = Conv(self.channels_out[0], self.channels_out[1], k=3, s=2)\n        self.conv1 = C3(self.channels_out[1], self.channels_out[2], self.get_depth(3))\n\n        self.C3 = Conv(self.channels_out[2], self.channels_out[3], 3, 2)\n        self.conv2 = C3(self.channels_out[3], self.channels_out[4], self.get_depth(6))\n\n        self.C4 = Conv(self.channels_out[4], self.channels_out[5], 3, 2)\n        self.conv3 = C3(self.channels_out[5], self.channels_out[6], self.get_depth(9))\n\n        self.C5 = Conv(self.channels_out[6], self.channels_out[7], 3, 2)\n\n        if self.with_c3tr:\n            self.conv4 = C3TR(self.channels_out[7], self.channels_out[8], self.get_depth(3))\n        else:\n            self.conv4 = C3(self.channels_out[7], self.channels_out[8], self.get_depth(3))\n\n        self.sppf = SPPF(self.channels_out[8], self.channels_out[9], 5)\n        \n        self.out_shape = {'C3_size': self.channels_out[3],\n                          'C4_size': self.channels_out[5],\n                          'C5_size': self.channels_out[9]}\n\n        print(\"backbone output channel: C3 {}, C4 {}, C5(SPPF) {}\".format(self.channels_out[3],\n                                                                    self.channels_out[5],\n                                                                    self.channels_out[9]))\n"}