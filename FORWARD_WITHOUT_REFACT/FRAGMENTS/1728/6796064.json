{"BEFORE":"    def forward(self, inputs):\n        conv1 = self.conv1(inputs)\n        out = self.basic_block(conv1)\n        out = self.conv2(out)\n        out = self.upsample(out + conv1)\n        out = self.conv3(out)\n        out = self.conv4(out)\n","AFTER":"    def forward(self, input: Tensor) -> Tensor:\n        out1 = self.conv1(input)\n        out = self.residual_residual_dense_blocks(out1)\n        out2 = self.conv2(out)\n        out = torch.add(out1, out2)\n        for _ in range(self.upsample_block_num):\n            F.leaky_relu(input=self.upsampling(F.interpolate(out, scale_factor=2, mode=\"nearest\")),\n                         negative_slope=0.2, inplace=True)\n        out = self.conv3(out)\n"}