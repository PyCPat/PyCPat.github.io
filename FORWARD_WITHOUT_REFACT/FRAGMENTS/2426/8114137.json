{"BEFORE":"                init_state_list = init_state_h_box\n            else:\n                init_state_h_list = torch.split(init_state_h_box, self.num_rnn_layers, dim=0)\n                init_state_c_list = torch.split(init_state_c_box, self.num_rnn_layers, dim=0)\n                init_state_list = [(init_state_h_list[i], init_state_c_list[i]) for i in range(self.num_rnn_layers)]\n        else:\n            init_state_list = [None] * self.num_rnn_layers\n        final_chunk_state_list = []\n        for rnn, init_state in zip(self.rnns, init_state_list):\n            x, final_state = rnn(x, x_lens, init_state)\n            final_chunk_state_list.append(final_state)\n\n        if self.use_gru:\n            return x, final_chunk_state_list, init_state_c_box\n","AFTER":"                init_state_h_list = torch.split(init_state_h_box, 1, dim=0)\n                init_state_list = init_state_h_list\n            else:\n                init_state_h_list = torch.split(init_state_h_box, 1, dim=0)\n                init_state_c_list = torch.split(init_state_c_box, 1, dim=0)\n                init_state_list = [(init_state_h_list[i], init_state_c_list[i]) for i in range(self.num_rnn_layers)]\n        else:\n            init_state_list = [None] * self.num_rnn_layers\n        final_chunk_state_list = []\n        for rnn, init_state in zip(self.rnns, init_state_list):\n            x, final_state = rnn(x, x_lens, init_state)\n            final_chunk_state_list.append(final_state)\n\n        if self.use_gru:\n            final_chunk_state_h_box = torch.concat(final_chunk_state_list, dim=0)\n            final_chunk_state_c_box = init_state_c_box\n"}