{"BEFORE":"        self.task_num = len(task_name)\n        self.device = device\n        self.forward_task = None\n        \n        self.expansion = 4 if resnet_network.feature_dim == 2048 else 1\n        ch = np.array([64, 128, 256, 512]) * self.expansion\n        self.shared_conv = nn.Sequential(resnet_network.conv1, resnet_network.bn1, \n                                         resnet_network.relu, resnet_network.maxpool)\n        self.shared_layer, self.encoder_att, self.encoder_block_att = nn.ModuleDict({}), nn.ModuleDict({}), nn.ModuleList([])\n        for i in range(4):\n            self.shared_layer[str(i)] = nn.ModuleList([eval('resnet_network.layer'+str(i+1)+'[:-1]'), \n                                                       eval('resnet_network.layer'+str(i+1)+'[-1]')])\n            \n            if i == 0:\n                self.encoder_att[str(i)] = nn.ModuleList([self._att_layer(ch[0], \n                                                                          ch[0]\/\/self.expansion,\n                                                                          ch[0]).to(self.device)]*self.task_num)\n            else:\n                self.encoder_att[str(i)] = nn.ModuleList([self._att_layer(2*ch[i], \n                                                                            ch[i]\/\/self.expansion, \n                                                                            ch[i]).to(self.device)]*self.task_num)\n","AFTER":"        self.task_num = len(task_name)\n        self.device = device\n        self.forward_task = None\n        \n        self.expansion = 4 if resnet_network.feature_dim == 2048 else 1\n        ch = np.array([64, 128, 256, 512]) * self.expansion\n        self.shared_conv = nn.Sequential(resnet_network.conv1, resnet_network.bn1, \n                                         resnet_network.relu, resnet_network.maxpool)\n        self.shared_layer, self.encoder_att, self.encoder_block_att = nn.ModuleDict({}), nn.ModuleDict({}), nn.ModuleList([])\n        for i in range(4):\n            self.shared_layer[str(i)] = nn.ModuleList([eval('resnet_network.layer'+str(i+1)+'[:-1]'), \n                                                       eval('resnet_network.layer'+str(i+1)+'[-1]')])\n            \n            if i == 0:\n                self.encoder_att[str(i)] = nn.ModuleList([self._att_layer(ch[0], \n                                                                          ch[0]\/\/self.expansion,\n                                                                          ch[0]).to(self.device) for _ in range(self.task_num)])\n            else:\n                self.encoder_att[str(i)] = nn.ModuleList([self._att_layer(2*ch[i], \n                                                                            ch[i]\/\/self.expansion, \n                                                                            ch[i]).to(self.device) for _ in range(self.task_num)])\n"}