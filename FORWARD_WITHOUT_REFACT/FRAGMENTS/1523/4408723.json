{"BEFORE":"        grouped_points = index_points(points, idx)  # [B, npoint, k, d]\n        if self.use_xyz:\n            grouped_points = torch.cat([grouped_points, grouped_xyz],dim=-1)  # [B, npoint, k, d+3]\n        if self.normalize is not None:\n            if self.normalize ==\"center\":\n                std, mean = torch.std_mean(grouped_points, dim=2, keepdim=True)\n            if self.normalize ==\"anchor\":\n                mean = torch.cat([new_points, new_xyz],dim=-1) if self.use_xyz else new_points\n                mean = mean.unsqueeze(dim=-2)  # [B, npoint, 1, d+3]\n                std = torch.std(grouped_points-mean)\n","AFTER":"        grouped_points = index_points(points, idx)  # [B, npoint, k, d]\n        if self.use_xyz:\n            grouped_points = torch.cat([grouped_points, grouped_xyz],dim=-1)  # [B, npoint, k, d+3]\n        if self.normalize is not None:\n            if self.normalize ==\"center\":\n                mean = torch.mean(grouped_points, dim=2, keepdim=True)\n            if self.normalize ==\"anchor\":\n                mean = torch.cat([new_points, new_xyz],dim=-1) if self.use_xyz else new_points\n                mean = mean.unsqueeze(dim=-2)  # [B, npoint, 1, d+3]\t\n            std = torch.std((grouped_points-mean).reshape(B,-1),dim=-1,keepdim=True).unsqueeze(dim=-1).unsqueeze(dim=-1)\n"}