{"BEFORE":"    def forward(self, g, h, e):\n\n        # input embedding\n        h = self.embedding_h(h)\n        h = self.in_feat_dropout(h)\n        e = self.embedding_e(e)\n\n        # Second Transformer\n        for conv in self.layers:\n            h, e = conv(g, h, e)\n        g.ndata['h'] = h\n\n        if self.readout == \"sum\":\n            hg = dgl.sum_nodes(g, 'h')\n        elif self.readout == \"max\":\n            hg = dgl.max_nodes(g, 'h')\n        elif self.readout == \"mean\":\n            hg = dgl.mean_nodes(g, 'h')\n        else:\n            hg = dgl.mean_nodes(g, 'h')  # default readout is mean nodes\n\n        sig = nn.Sigmoid()\n\n        return sig(self.MLP_layer(hg))\n","AFTER":"        self.gnn(g)\n\n        readouts_to_cat = [dgl.readout_nodes(g, 'f', op=aggr) for aggr in self.readout_aggregators]\n        readout = torch.cat(readouts_to_cat, dim=-1)\n        return self.output(readout)\n"}