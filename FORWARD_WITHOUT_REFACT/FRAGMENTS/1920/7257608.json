{"BEFORE":"            for h in range(xl + 1, xr + 1):\n                print(h)\n                if h == grid_r:\n                    new_data[:, :, h] = data_r\n                else:\n                    new_data[:, :, h] = ((h - grid_l) * data_r \/ (grid_r - grid_l)) + (\n                                (grid_r - h) * data_l \/ (grid_r - grid_l))\n            xl = xr\n            grid_l = grid_r\n            data_l = data_r\n        new_data[:, :, 0] = new_data[:, :, 1]\n        try:\n            for h in range(xr + 1, len(x_index)):\n                new_data[:, :, h] = new_data[:, :, xr]\n        except:\n            print('h', h)\n            print('xr', xr)\n\n        yl = 0\n        grid1_l = y_index[0]\n        data1_l = new_data[:, 0, :]\n        for num in range(1, len(y_index)):\n            grid1_r = y_index[num]\n            yr = torch.ceil(grid1_r) - 1\n            yr = yr.int()\n            data1_r = new_data[:, num, :]\n            for h in range(yl + 1, yr + 1):\n                if h == grid1_r:\n                    new_data_final[:, h, :] = data1_r\n                else:\n                    new_data_final[:, h, :] = ((h - grid1_l) * data1_r \/ (grid1_r - grid1_l)) + (\n                                (grid1_r - h) * data1_l \/ (grid1_r - grid1_l))\n            yl = yr\n            grid1_l = grid1_r\n            data1_l = data1_r\n        new_data_final[:, 0, :] = new_data_final[:, 1, :]\n        try:\n            for h in range(yr + 1, len(y_index)):\n                new_data_final[:, h, :] = new_data_final[:, yr, :]\n        except:\n            print('h', h)\n            print('yr', yr)\n        preds = torch.unsqueeze(new_data_final, dim=1)\n\n        pred = np.squeeze(preds).cpu().data.numpy()\n        multi_fuse = 255 * pred\n","AFTER":"        preds = torch.unsqueeze(new_data_final, dim=1)\n        print(preds.min())\n        return preds\n"}