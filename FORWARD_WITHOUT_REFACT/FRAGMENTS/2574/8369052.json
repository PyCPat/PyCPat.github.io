{"BEFORE":"        n_dims = input.dim()\n        dims = list(range(n_dims))\n\n        input_permuted = input.permute(1, 0, *dims[2:])\n\n        left, right = self.left, self.right\n\n        input_left, input_right = input_permuted[left], input_permuted[right]\n        loss = - F.cosine_similarity(input_left, input_right, dim=0, eps=self.eps)\n\n        dims = tuple(range(1, n_dims-1))\n        loss = loss.sum(dim=dims) \/ self.n_combinations\n","AFTER":"        input_permuted = input.permute(1, 0, 2, 3).contiguous()\n\n        left, right = self.left, self.right\n\n        input_left, input_right = torch.abs(input_permuted[left]), torch.abs(input_permuted[right])\n        loss = - F.cosine_similarity(input_left, input_right, dim=2, eps=self.eps)\n\n        loss = loss.permute(1, 0, 2).contiguous() \/ self.n_combinations\n        loss = loss.sum(dim=2)\n        loss = loss.mean(dim=1)\n"}