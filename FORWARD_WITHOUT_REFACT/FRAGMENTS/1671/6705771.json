{"BEFORE":"        s0 = self.preprocess0(s0)\n        s1 = self.preprocess1(s1)\n        states = [s0, s1]\n        offset = 0\n\n        for i in range(self.n_nodes):\n            # handle the un-consistent dimension\n            tmp_list = []\n            for j, h in enumerate(states):\n                tmp_list += [self._ops[offset+j](h, weight1[offset+j], weight2[offset+j])]\n            s = sum(consistent_dim(tmp_list))######################################## !!!\n            #s = sum(self._ops[offset+j](h, weight1[offset+j], weight2[offset+j]) for j, h in enumerate(states))\n            offset += len(states)        \n            states.append(s)\n","AFTER":"        input0 = self.preprocess0(input0)\n        input1 = self.preprocess1(input1)\n        inputs = [input0, input1]\n        i_w = 0\n        for node in range(self.n_nodes):\n            outputs = []\n            for i, input_i in enumerate(inputs):\n                i_w += i\n                outputs.append(self._ops[i_w](input_i, w1[i_w], w2[i_w]))\n            inputs.append(sum(consistent_dim(outputs)))\n"}