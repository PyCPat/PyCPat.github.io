{"BEFORE":"        if not exists(self.rel_pos) or not self.cache_rel_pos:\n            positions = [torch.arange(d, device = device) for d in dimensions]\n            grid = torch.stack(torch.meshgrid(*positions, indexing = 'ij'))\n            grid = rearrange(grid, 'c ... -> (...) c')\n            rel_pos = rearrange(grid, 'i c -> i 1 c') - rearrange(grid, 'j c -> 1 j c')\n\n            if self.log_dist:\n                rel_pos = torch.sign(rel_pos) * torch.log(rel_pos.abs() + 1)\n\n            self.register_buffer('rel_pos', rel_pos, persistent = False)\n\n        rel_pos = self.rel_pos.float()\n\n        for layer in self.net:\n            rel_pos = layer(rel_pos)\n\n        return rearrange(rel_pos, 'i j h -> h i j')\n","AFTER":"        shape = torch.tensor(dimensions, device = device)\n        rel_pos_shape = 2 * shape - 1\n\n        # calculate strides\n\n        strides = torch.flip(rel_pos_shape, (0,)).cumprod(dim = -1)\n        strides = torch.flip(F.pad(strides, (1, -1), value = 1), (0,))\n\n        # get all positions and calculate all the relative distances\n\n        positions = [torch.arange(d, device = device) for d in dimensions]\n        grid = torch.stack(torch.meshgrid(*positions, indexing = 'ij'), dim = -1)\n        grid = rearrange(grid, '... c -> (...) c')\n        rel_dist = rearrange(grid, 'i c -> i 1 c') - rearrange(grid, 'j c -> 1 j c')\n\n        # get all relative positions across all dimensions\n\n        rel_positions = [torch.arange(-d + 1, d, device = device) for d in dimensions]\n        rel_pos_grid = torch.stack(torch.meshgrid(*rel_positions, indexing = 'ij'), dim = -1)\n        rel_pos_grid = rearrange(rel_pos_grid, '... c -> (...) c')\n\n        # mlp input\n\n        bias = rel_pos_grid.float()\n\n        for layer in self.net:\n            bias = layer(bias)\n\n        # convert relative distances to indices of the bias\n\n        rel_dist += (shape - 1)  # make sure all positive\n        rel_dist *= strides\n        rel_dist_indices = rel_dist.sum(dim = -1)\n\n        # now select the bias for each unique relative position combination\n\n        bias = bias[rel_dist_indices]\n        return rearrange(bias, 'i j h -> h i j')\n"}