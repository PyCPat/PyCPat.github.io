{"BEFORE":"    def forward(self, x, action, with_variance=False):\n        mu, logstd = self.compute_stats(x, action)\n        dist = Normal(mu, logstd.exp())\n        pred = dist.rsample()\n        # residual prediction\n        next_x = x + pred[:, :-1]\n        next_reward = pred[:, -1].view(-1, 1)\n        if with_variance:\n            return next_x, next_reward, dist.variance.sum(dim=1, keepdims=True)\n        return next_x, next_reward\n","AFTER":"        self, x: torch.Tensor, action: torch.Tensor\n    ) -> Tuple[torch.Tensor, torch.Tensor]:\n        return self.predict_with_variance(x, action)[:2]\n"}