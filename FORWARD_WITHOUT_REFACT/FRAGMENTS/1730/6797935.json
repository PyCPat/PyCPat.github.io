{"BEFORE":"        labels = input[bool_mask]\n\n        # get generator output and get mpp loss\n        logits = self.transformer(masked_input, **kwargs)\n\n        mpp_loss = F.cross_entropy(\n            logits.transpose(1, 2),\n            labels,\n        )\n","AFTER":"        img = input.clone().detach()\n\n        # reshape raw image to patches\n        p = self.patch_size\n        input = rearrange(input, 'b c (h p1) (w p2) -> b (h w) (p1 p2 c)', p1 = p, p2 = p)\n\n        mask = get_mask_subset_with_prob(input, self.mask_prob)\n\n        # mask input with mask patches with probability of `replace_prob` (keep patches the same with probability 1 - replace_prob)\n        masked_input = input.clone().detach()\n\n         # if random token probability > 0 for mpp\n        if self.random_patch_prob > 0:\n            random_patch_sampling_prob = self.random_patch_prob \/ (1 - self.replace_prob)\n            random_patch_prob = prob_mask_like(input, random_patch_sampling_prob)\n            bool_random_patch_prob = mask * random_patch_prob == True\n            random_patches = torch.randint(0, input.shape[1], (input.shape[0], input.shape[1]), device=input.device)\n            randomized_input = masked_input[torch.arange(masked_input.shape[0]).unsqueeze(-1), random_patches]\n            masked_input[bool_random_patch_prob] = randomized_input[bool_random_patch_prob]\n\n        # [mask] input\n        replace_prob = prob_mask_like(input, self.replace_prob)\n        bool_mask_replace = (mask * replace_prob) == True\n        masked_input[bool_mask_replace] = self.mask_token\n\n        # get labels for input patches that were masked\n        bool_mask = mask == True\n        labels = input[bool_mask]\n\n        # get generator output and get mpp loss\n        cls_logits = self.transformer(masked_input, mpp=True, **kwargs)\n        logits = cls_logits[:,1:,:]\n\n        mpp_loss = self.loss(logits, img, mask)\n"}