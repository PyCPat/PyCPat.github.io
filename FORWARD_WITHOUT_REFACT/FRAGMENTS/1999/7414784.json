{"BEFORE":"        if self.context > 1:\n            z = [x]\n            for d in range(1, self.context \/\/ 2 + 1):\n                z_u = torch.zeros_like(x)\n                z_u[:, d:, :] = x[:, :-d, :] # i-d\n                z.append(z_u)\n                z_d = torch.zeros_like(x)\n                z_d[:, :-d, :] = x[:, d:, :] # i+d\n                z.append(z_d)\n            x = torch.cat(z, dim=2) # (B, N, C*width)\n\n        x = x.view(B*N, -1) # (B*N, C*width)\n","AFTER":"    def forward(self, x, x_base=None):\n        B, N, C = x.shape\n\n        x = self.contextize(x, self.context) # (B, N, C*context)\n        if self.mix_base > 0 and x_base is not None:\n            x_base = self.contextize(x_base, self.mix_base) # (B, N, 4*mix_base)\n            x = torch.cat((x_base, x), dim=2)\n\n        x = x.view(B*N, -1) # (B*N, C*width)\n"}