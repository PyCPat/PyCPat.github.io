{"BEFORE":"        input_tensors: Sequence[torch.Tensor],\n        msa_mask: torch.Tensor,\n        pair_mask: torch.Tensor,\n        chunk_size: Optional[int] = None,\n        use_lma: bool = False,\n        _mask_trans: bool = True,\n        _attn_chunk_size: Optional[int] = None,\n        _offload_inference: bool = False,\n    ) -> Tuple[torch.Tensor, torch.Tensor]:  \n        if(_attn_chunk_size is None):\n            _attn_chunk_size = chunk_size\n\n        m, z = input_tensors\n        inplace_safe = not (self.training or torch.is_grad_enabled())\n","AFTER":"        m: Optional[torch.Tensor],\n        z: Optional[torch.Tensor],\n        msa_mask: torch.Tensor,\n        pair_mask: torch.Tensor,\n        chunk_size: Optional[int] = None,\n        use_lma: bool = False,\n        inplace_safe: bool = False,\n        _mask_trans: bool = True,\n        _attn_chunk_size: Optional[int] = None,\n        _offload_inference: bool = False,\n        _offloadable_inputs: Optional[Sequence[torch.Tensor]] = None,\n    ) -> Tuple[torch.Tensor, torch.Tensor]:  \n        if(_attn_chunk_size is None):\n            _attn_chunk_size = chunk_size\n       \n        if(_offload_inference and inplace_safe):\n            input_tensors = _offloadable_inputs\n            del _offloadable_inputs\n        else:\n            input_tensors = [m, z]\n\n        m, z = input_tensors\n\n        m = add(m, \n            self.msa_dropout_layer(\n                self.msa_att_row(\n                    m.clone() if torch.is_grad_enabled() else m, \n                    z=z.clone() if torch.is_grad_enabled() else z, \n                    mask=msa_mask, \n                    chunk_size=_attn_chunk_size,\n                    use_lma=use_lma,\n                    use_memory_efficient_kernel=not use_lma,\n                    _checkpoint_chunks=\n                        self.ckpt if torch.is_grad_enabled() else False,\n                )\n            ),\n            inplace=inplace_safe,\n        )\n\n        if(not inplace_safe):\n            input_tensors = [m, z]\n\n        del m, z\n"}