{"BEFORE":"        for i, (xRaw, k) in enumerate(zip(latents, self._k)):\n            n, c, h, w = xRaw.shape\n            # [k, 1, c]\n            codebook = getattr(self, \"codebook\")[:, None, :]\n            # [n, c, h, w] -> [h, w, n, c]\n            encoderIn = xRaw.permute(2, 3, 0, 1)\n            # encoderIn = xRaw.permute(2, 3, 0, 1)\n            # [h, w, n, c] -> [h*w, n, c]\n            encoderIn = self._position(encoderIn).reshape(-1, n, c)\n            # [h*w, n, c]\n            x = self._encoder(codebook, encoderIn)\n            # [h*w, n, k]\n            logit = self._select(x)\n            sample = F.gumbel_softmax(logit, temp, True)\n            # [k, 1, c]\n            codewords = self._codebookEncoder(codebook)\n            # [h*w, n, c]\n            quantized = sample @ codewords[:, 0, ...]\n            # [h*w, n, c]\n            posistedQuantized = self._position(quantized.reshape(h, w, n, c)).reshape(-1, n, c)\n            # [k, 1, c]\n            decodedCodes = self._codebookDecoder(codebook)\n            # [n, c, h, w]\n            deTransformed = self._decoder(decodedCodes, posistedQuantized).reshape(h, w, n, c).permute(2, 3, 0, 1)\n\n            # [n, c, h, w]\n            quantizeds.append(deTransformed)\n            codes.append(sample.argmax(-1).permute(1, 0).reshape(n, h, w))\n            logits.append(logit.permute(1, 0, 2).reshape(n, h, w, k))\n","AFTER":"        for xRaw in latents:\n            n, c, h, w = xRaw.shape\n            # [1, k, c]\n            codebook = getattr(self, \"codebook\")[None, ...]\n            # [n, c, h, w] -> [n, h, w, c]\n            encoderIn = xRaw.permute(0, 2, 3, 1)\n            # [n, h, w, c] -> [n, h*w, c]\n            encoderIn = self._position(encoderIn).reshape(n, -1, c)\n            # [1, k, c]\n            codebookQ = self._codebookQuery(codebook)\n            # [n, h*w, c]\n            x = self._encoder(encoderIn, codebookQ)\n            # [n, h*w, k]\n            logit = self._select(x)\n            sample = F.gumbel_softmax(logit, temp, True)\n            # [1, k, c]\n            codewords = self._codebookEncoder(codebook)\n            # [n, h*w, c]\n            quantized = sample @ codewords[0, ...]\n            # [n, h*w, c]\n            posistedQuantized = self._position(quantized.reshape(n, h, w, c)).reshape(n, -1, c)\n            # [1, k, c]\n            decodedCodes = self._codebookDecoder(codebook)\n            # [n, c, h, w]\n            deTransformed = self._decoder(posistedQuantized, decodedCodes).reshape(n, h, w, c).permute(0, 3, 1, 2)\n\n            # [n, c, h, w]\n            quantizeds.append(deTransformed)\n            codes.append(sample.argmax(-1).reshape(n, h, w))\n            logits.append(logit.reshape(n, h, w, -1))\n"}