{"BEFORE":"        for layer in self.layers[:(self.n_layers - 1)]:\n\n            x = F.leaky_relu(layer(x), negative_slope=self.neg_slope)        \n        logits = F.softmax(self.layers[-1](x), dim=1)\n\n        if not self.return_activation:\n            return logits\n        if self.return_activation:\n            return logits\n\n\nclass FID_lstm_Classifier(nn.Module):\n","AFTER":"        x = F.relu(self.dense(x))\n\n        if self.neg_slope is not None and not 0:\n            for layer in self.layers[:-1]:\n                x = F.leaky_relu(layer(x), negative_slope=self.neg_slope)\n\n        else:\n            for layer in self.layers[:-1]:\n                x = F.relu(layer(x))\n\n        logits = F.softmax(self.layers[-1](x), dim=1)\n        return logits, 0\n"}