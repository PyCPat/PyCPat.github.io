{"BEFORE":"        qk = batched_index_select(qk, indices)\n        v = batched_index_select(v, indices)\n\n        qk, v = map(lambda x: x.reshape(b, h, num_clusters, wsz, d), (qk, v))\n\n        q = qk\n        k = F.normalize(qk, 2, dim=-1)\n\n        dots = torch.einsum('bhnid,bhnjd->bhnij', q, k) * (d ** -0.5)\n        dots = dots + self.rel_pos(q)\n\n        mask_value = max_neg_value(dots)\n\n        if self.causal:\n            mask = torch.ones(wsz, wsz, device=device).byte().triu_(1).bool()\n            dots.masked_fill_(mask, mask_value)\n            del mask\n\n        mask = torch.eye(wsz, device=dots.device).bool()\n        dots.masked_fill_(mask, TOKEN_SELF_ATTN_VALUE)\n        del mask\n\n        dots = F.softmax(dots, dim=-1)\n","AFTER":"        qk = batched_index_select(qk, indices)\n        v = batched_index_select(v, indices)\n\n        qk, v = map(lambda x: x.reshape(b, h, num_clusters, wsz, d), (qk, v))\n\n        q = qk\n        k = F.normalize(qk, 2, dim=-1).type(qk.dtype)\n\n        dots = torch.einsum('bhnid,bhnjd->bhnij', q, k) * (d ** -0.5)\n        dots = dots + self.rel_pos(q)\n\n        mask_value = max_neg_value(dots)\n\n        if self.causal:\n            mask = torch.ones(wsz, wsz, device=device).byte().triu_(1).bool()\n            dots.masked_fill_(mask, mask_value)\n            del mask\n\n        mask = torch.eye(wsz, device=dots.device).bool()\n        dots.masked_fill_(mask, TOKEN_SELF_ATTN_VALUE)\n        del mask\n\n        dots = dots.softmax(dim=-1)\n"}