{"BEFORE":"            dropout_kwargs = {\"p\": 0.5, \"inplace\": True}\n        if network_kwargs is None:\n            network_kwargs = {\"res\": False}\n\n        self.conv = conv\n        self.conv_kwargs = conv_kwargs\n        self.norm = norm\n        self.norm_kwargs = norm_kwargs\n        self.act = act\n        self.act_kwargs = act_kwargs\n        self.dropout = dropout\n        self.dropout_kwargs = dropout_kwargs\n        self.network_kwargs = network_kwargs\n        self.residual = self.network_kwargs[\"res\"]\n\n        self.conv0 = conv(input_channels, output_channels, **conv_kwargs)\n        self.conv1 = conv(output_channels, output_channels, **conv_kwargs)\n        self.conv2 = conv(output_channels, output_channels, **conv_kwargs)\n\n        self.in_0 = (\n            norm(output_channels, **norm_kwargs) if norm is not None else nn.Identity()\n        )\n        self.in_1 = (\n            norm(output_channels, **norm_kwargs) if norm is not None else nn.Identity()\n        )\n","AFTER":"            dropout_kwargs = {\"p\": 0.5, \"inplace\": False}\n        if network_kwargs is None:\n            network_kwargs = {\"res\": False}\n\n        self.conv = conv\n        self.conv_kwargs = conv_kwargs\n        self.norm = norm\n        self.norm_kwargs = norm_kwargs\n        self.act = act\n        self.act_kwargs = act_kwargs\n        self.dropout = dropout\n        self.dropout_kwargs = dropout_kwargs\n        self.network_kwargs = network_kwargs\n        self.residual = self.network_kwargs[\"res\"]\n\n        self.conv0 = conv(input_channels, output_channels, **conv_kwargs)\n        self.conv1 = conv(output_channels, output_channels, **conv_kwargs)\n        self.conv2 = conv(output_channels, output_channels, **conv_kwargs)\n\n        self.in_0 = norm(output_channels, **norm_kwargs)\n        self.in_1 = norm(output_channels, **norm_kwargs)\n"}