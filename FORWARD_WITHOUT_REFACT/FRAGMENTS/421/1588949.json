{"BEFORE":"        x = self.embedding(z)\n\n        edge_index, edge_weight = self.distance(pos, batch)\n        edge_attr = self.distance_expansion(edge_weight)\n\n        if self.neighbor_embedding:\n            x = self.neighbor_embedding(z, x, edge_index, edge_weight, edge_attr)\n\n        for attn in self.attention_layers:\n            x = x + attn(x, edge_index, edge_weight, edge_attr)\n","AFTER":"        x = self.embedding(z)\n\n        edge_index, edge_weight, edge_vec = self.distance(pos, batch)\n        edge_attr = self.distance_expansion(edge_weight)\n        mask = edge_index[0] != edge_index[1]\n        edge_vec[mask] = edge_vec[mask] \/ edge_vec[mask].norm(dim=1).unsqueeze(1)\n\n        if self.neighbor_embedding:\n            x = self.neighbor_embedding(z, x, edge_index, edge_weight, edge_attr)\n\n        vec = torch.zeros(x.size(0), 3, x.size(1), device=x.device)\n\n        for attn in self.attention_layers:\n            dx, dvec = attn(x, vec, edge_index, edge_weight, edge_attr, edge_vec)\n            x = x + dx\n            vec = vec + dvec\n"}