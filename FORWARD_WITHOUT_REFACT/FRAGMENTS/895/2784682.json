{"BEFORE":"        stage1_img = torch.cat([stage1_img_top, stage1_img_bot],2) \n","AFTER":"        x1ltop = self.shallow_feat1(x1ltop_img)\n        x1rtop = self.shallow_feat1(x1rtop_img)\n        x1lbot = self.shallow_feat1(x1lbot_img)\n        x1rbot = self.shallow_feat1(x1rbot_img)\n        \n        ## Process features of all 4 patches with Encoder of Stage 1\n        feat1_ltop = self.stage1_encoder(x1ltop)\n        feat1_rtop = self.stage1_encoder(x1rtop)\n        feat1_lbot = self.stage1_encoder(x1lbot)\n        feat1_rbot = self.stage1_encoder(x1rbot)\n        \n        ## Concat deep features\n        feat1_top = [torch.cat((k,v), 3) for k,v in zip(feat1_ltop,feat1_rtop)]\n        feat1_bot = [torch.cat((k,v), 3) for k,v in zip(feat1_lbot,feat1_rbot)]\n        \n        ## Pass features through Decoder of Stage 1\n        res1_top = self.stage1_decoder(feat1_top)\n        res1_bot = self.stage1_decoder(feat1_bot)\n\n        ## Apply Supervised Attention Module (SAM)\n        x2top_samfeats, stage1_img_top = self.sam12(res1_top[0], x2top_img)\n        x2bot_samfeats, stage1_img_bot = self.sam12(res1_bot[0], x2bot_img)\n\n        ## Output image at Stage 1\n        # stage1_img = torch.cat([stage1_img_top, stage1_img_bot],2) \n\n        del stage1_img_top, stage1_img_bot, feat1_ltop, feat1_rtop, feat1_lbot, feat1_rbot, x1ltop, x1rtop, x1lbot, x1rbot\n        torch.cuda.empty_cache()\n        ##-------------------------------------------\n        ##-------------- Stage 2---------------------\n        ##-------------------------------------------\n        ## Compute Shallow Features\n        x2top  = self.shallow_feat2(x2top_img)\n        x2bot  = self.shallow_feat2(x2bot_img)\n\n        ## Concatenate SAM features of Stage 1 with shallow features of Stage 2\n        x2top_cat = self.concat12(torch.cat([x2top, x2top_samfeats], 1))\n        x2bot_cat = self.concat12(torch.cat([x2bot, x2bot_samfeats], 1))\n\n        ## Process features of both patches with Encoder of Stage 2\n        feat2_top = self.stage2_encoder(x2top_cat, feat1_top, res1_top)\n        feat2_bot = self.stage2_encoder(x2bot_cat, feat1_bot, res1_bot)\n\n        ## Concat deep features\n        feat2 = [torch.cat((k,v), 2) for k,v in zip(feat2_top,feat2_bot)]\n\n        ## Pass features through Decoder of Stage 2\n        res2 = self.stage2_decoder(feat2)\n\n        ## Apply SAM\n        x3_samfeats, stage2_img = self.sam23(res2[0], x3_img)\n\n        del stage2_img, x2top, x2bot, x2top_cat, x2bot_cat, feat2_top, feat2_bot\n        torch.cuda.empty_cache()\n"}