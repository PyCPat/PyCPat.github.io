{"BEFORE":"        _, _, tH, tW = target_size\n\n        if inference:\n            B = x.data.size(0)\n            C = x.data.size(1)\n            H = x.data.size(2)\n            W = x.data.size(3)\n\n            return x.view(B, C, H, 1, W, 1).expand(B, C, H, tH \/\/ H, W, tW \/\/ W).contiguous().view(B, C, tH, tW)\n        else:\n            return F.interpolate(x, size=(tH, tW), mode='nearest')\n\n\nclass Conv_Bn_Activation(nn.Module):\n","AFTER":"        if inference:\n\n            #B = x.data.size(0)\n            #C = x.data.size(1)\n            #H = x.data.size(2)\n            #W = x.data.size(3)\n\n            return x.view(x.size(0), x.size(1), x.size(2), 1, x.size(3), 1).\\\n                    expand(x.size(0), x.size(1), x.size(2), target_size[2] \/\/ x.size(2), x.size(3), target_size[3] \/\/ x.size(3)).\\\n                    contiguous().view(x.size(0), x.size(1), target_size[2], target_size[3])\n        else:\n            return F.interpolate(x, size=(target_size[2], target_size[3]), mode='nearest')\n\n\nclass Conv_Bn_Activation(nn.Module):\n"}