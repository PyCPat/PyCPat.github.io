{"BEFORE":"        z = z.permute(0, 2, 3, 1).contiguous()\n        z_flattened = z.view(-1, self.codebook_dim)\n        # distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z\n\n        d = torch.sum(z_flattened.pow(2), dim=1, keepdim=True) + \\\n            torch.sum(self.embed.pow(2), dim=1) - 2 * \\\n            torch.einsum('bd,dn->bn', z_flattened, self.embed.permute(1,0)) # 'n d -> d n'\n\n        encoding_indices = torch.argmin(d, dim=1)\n        z_q = self.embedding(encoding_indices).view(z.shape)\n        encodings = F.one_hot(encoding_indices, self.num_tokens).type(z.dtype)\n        avg_probs = torch.mean(encodings, dim=0)\n        perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))\n        \n\n        # Use EMA to update the embedding vectors\n        if self.training:\n            #EMA cluster size\n            new_cluster_size = torch.sum(encodings, 0)\n            self.cluster_size.data.mul_(self.decay).add_(new_cluster_size, alpha=1 - self.decay)\n            \n            # Laplace smoothing of the cluster size\n            cluster_size_sum = torch.sum(self.cluster_size.data)\n            self.cluster_size.data.add_(self.eps).div_(cluster_size_sum + self.num_tokens * self.eps)\n\n            #EMA embedding weight\n            new_ema_w = torch.matmul(encodings.t(), z_flattened)\n            self.embed_avg.data.mul_(self.decay).add_(new_ema_w, alpha=1 - self.decay)   \n\n            #normalize embedding weight EMA and update current embedding weight\n            self.embed.data.copy_(self.embed_avg \/ self.cluster_size.unsqueeze(1))\n        \n        # compute loss for embedding\n        loss = self.beta * F.mse_loss(z_q.detach(), z)\n","AFTER":"        z = z.permute(0, 2, 3, 1).contiguous()\n        z_flattened = z.reshape(-1, self.codebook_dim)\n        d = (\n            z_flattened.pow(2).sum(1, keepdim=True)\n            - 2 * z_flattened @ self.embedding.weight\n            + self.embedding.weight.pow(2).sum(0, keepdim=True)\n        )\n        _, encoding_indices = (-d).max(1)\n        encodings = F.one_hot(encoding_indices, self.num_tokens).type(z_flattened.dtype)\n        encoding_indices = encoding_indices.view(*z.shape[:-1])\n        z_q = self.embedding(encoding_indices)\n        avg_probs = torch.mean(encodings, dim=0)\n        perplexity = torch.exp(-torch.sum(avg_probs * torch.log(avg_probs + 1e-10)))\n\n        if self.training:\n            encodings_sum = encodings.sum(0)\n            embed_sum = z_flattened.transpose(0, 1) @ encodings\n\n            self.embedding.cluster_size.data.mul_(self.decay).add_(\n                encodings_sum, alpha=1 - self.decay\n            )\n            self.embedding.embed_avg.data.mul_(self.decay).add_(embed_sum, alpha=1 - self.decay)\n            n = self.embedding.cluster_size.sum()\n            cluster_size = (\n                (self.embedding.cluster_size + self.eps) \/ (n + self.num_tokens * self.eps) * n\n            )\n            embed_normalized = self.embedding.embed_avg \/ cluster_size.unsqueeze(0)\n            self.embedding.weight.data.copy_(embed_normalized)\n\n        loss = self.beta * (z_q.detach() - z).pow(2).mean()\n"}