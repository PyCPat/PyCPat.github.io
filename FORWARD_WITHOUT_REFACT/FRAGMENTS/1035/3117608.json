{"BEFORE":"        x_std = self.aff_std(x)\n        \n        x = -self.aff_x(x) \/ (1e-8 + 0.1 * x_std)\n        x = x.mean(1, keepdim=True)\n        x = F.softmax(x, 2)\n\n        for _ in range(self.num_iter):\n            m = self.aff_m(mask)  # [BxCxPxHxW]\n            mask = (m * x).sum(2)\n\n        # xvals: [BxCxHxW]\n        return mask\n","AFTER":"        distance = self.aff_abs(x)\n        std = self.aff_std(x)\n\n        # distance.size() = torch.Size([1, 3, 48, 256, 383])\n        # std.size() = torch.Size([1, 3, 1, 256, 383])\n\n        # print(distance.size())\n        # print(std.size())\n        \n        aff = -distance \/ (self.sigma * std + self.eps)\n        aff = torch.mean(aff, dim=1, keepdim=True)\n        aff = torch.softmax(aff, dim=2)\n\n        # aff.size() = torch.Size([1, 1, 48, 256, 383])\n        # mask.size() = torch.Size([1, K, 256, 383])\n\n        # print(aff.size())\n        # print(mask.size())\n\n        for _ in range(self.num_iter):\n            # m.size() = torch.Size([1, K, 48, 256, 383])\n            m = self.aff_ide(m)\n            m = (aff * m).sum(dim=2)\n        \n        return m\n"}