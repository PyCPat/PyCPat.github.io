{"BEFORE":"        outputs = []\n        for i, structure_model in enumerate(self.models[:use_n_models]):\n            # with torch.cuda.stream(self.cuda_streams[i]):\n            outputs.append(structure_model(x))\n\n        if dump_distograms_path:\n            dump_distograms_path = Path(dump_distograms_path)\n            for i, output in enumerate(outputs):\n                pt, pp, pd, po = output  # pylint: disable=unused-variable\n                distogram_distribution = pd.cpu().detach().numpy()\n                distogram = distogram_distribution_to_distogram(distogram_distribution)\n                plot_distogram(\n                    distogram, dump_distograms_path \/ f\"dist_model_{i:02}.jpg\"\n                )\n\n        averaged_outputs = [\n            torch.stack(model_output).mean(axis=0) for model_output in zip(*outputs)\n        ]\n        return averaged_outputs\n","AFTER":"        outputs = []\n        for i, structure_model in enumerate(self.models[:use_n_models]):\n            outputs.append(structure_model(x))\n\n        if dump_distograms_path:\n            dump_distograms_path = Path(dump_distograms_path)\n            for i, output in enumerate(outputs):\n                distogram_distribution = output['dist'].cpu().detach().numpy()\n                distogram = distogram_distribution_to_distogram(distogram_distribution)\n                plot_distogram(\n                    distogram, dump_distograms_path \/ f\"dist_model_{i:02}.jpg\"\n                )\n\n        return average_dict(outputs)\n"}