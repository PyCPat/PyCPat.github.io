{"BEFORE":"            raise RuntimeError(\"{} accept 3D tensor as input\".format(\n                self.__name__))\n\n        mean = torch.mean(x, (1, 2), keepdim=True)\n        var = torch.mean((x-mean)**2, (1, 2), keepdim=True)\n        # N x C x L\n        if self.elementwise_affine:\n            x = self.weight*(x-mean)\/torch.sqrt(var+self.eps)+self.bias\n        else:\n            x = (x-mean)\/torch.sqrt(var+self.eps)\n        return x\n","AFTER":"            mean = torch.mean(x, (1, 2, 3), keepdim=True)\n            var = torch.mean((x-mean)**2, (1, 2, 3), keepdim=True)\n            if self.elementwise_affine:\n                x = self.weight*(x-mean)\/torch.sqrt(var+self.eps)+self.bias\n            else:\n                x = (x-mean)\/torch.sqrt(var+self.eps)\n        if x.dim() == 3:\n            mean = torch.mean(x, (1, 2), keepdim=True)\n            var = torch.mean((x-mean)**2, (1, 2), keepdim=True)\n            if self.elementwise_affine:\n                x = self.weight*(x-mean)\/torch.sqrt(var+self.eps)+self.bias\n            else:\n                x = (x-mean)\/torch.sqrt(var+self.eps)\n        return x\n"}