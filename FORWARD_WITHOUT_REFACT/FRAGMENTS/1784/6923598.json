{"BEFORE":"        loss = 0\n        return_dict = {}\n\n        # STFT Loss\n        if self.use_stft_loss:\n            stft_loss_mg, stft_loss_sc = self.stft_loss(y_hat.squeeze(1), y.squeeze(1))\n            return_dict['G_stft_loss_mg'] = stft_loss_mg\n            return_dict['G_stft_loss_sc'] = stft_loss_sc\n            loss += self.stft_loss_weight * (stft_loss_mg + stft_loss_sc)\n\n        # subband STFT Loss\n        if self.use_subband_stft_loss:\n            subband_stft_loss_mg, subband_stft_loss_sc = self.subband_stft_loss(y_hat_sub, y_sub)\n            return_dict['G_subband_stft_loss_mg'] = subband_stft_loss_mg\n            return_dict['G_subband_stft_loss_sc'] = subband_stft_loss_sc\n            loss += self.subband_stft_loss_weight * (subband_stft_loss_mg + subband_stft_loss_sc)\n\n        # Fake Losses\n        if self.use_mse_gan_loss and scores_fake is not None:\n            mse_fake_loss = 0\n            if isinstance(scores_fake, list):\n                for score_fake in scores_fake:\n                    fake_loss = self.mse_loss(score_fake)\n                    mse_fake_loss += fake_loss\n            else:\n                fake_loss = self.mse_loss(scores_fake)\n                mse_fake_loss = fake_loss\n            return_dict['G_mse_fake_loss'] = mse_fake_loss\n            loss += self.mse_gan_loss_weight * mse_fake_loss\n\n        if self.use_hinge_gan_loss and not scores_fake is not None:\n            hinge_fake_loss = 0\n            if isinstance(scores_fake, list):\n                for score_fake in scores_fake:\n                    fake_loss = self.hinge_loss(score_fake)\n                    hinge_fake_loss += fake_loss\n            else:\n                fake_loss = self.hinge_loss(scores_fake)\n                hinge_fake_loss = fake_loss\n            return_dict['G_hinge_fake_loss'] = hinge_fake_loss\n            loss += self.hinge_gan_loss_weight * hinge_fake_loss\n\n        # Feature Matching Loss\n        if self.use_feat_match_loss and not feats_fake:\n            feat_match_loss = self.feat_match_loss(feats_fake, feats_real)\n            return_dict['G_feat_match_loss'] = feat_match_loss\n            loss += self.feat_match_loss_weight * feat_match_loss\n        return_dict['G_loss'] = loss\n","AFTER":"        gen_loss = 0\n        adv_loss = 0\n        return_dict = {}\n\n        # STFT Loss\n        if self.use_stft_loss:\n            stft_loss_mg, stft_loss_sc = self.stft_loss(y_hat.squeeze(1), y.squeeze(1))\n            return_dict['G_stft_loss_mg'] = stft_loss_mg\n            return_dict['G_stft_loss_sc'] = stft_loss_sc\n            gen_loss += self.stft_loss_weight * (stft_loss_mg + stft_loss_sc)\n\n        # subband STFT Loss\n        if self.use_subband_stft_loss:\n            subband_stft_loss_mg, subband_stft_loss_sc = self.subband_stft_loss(y_hat_sub, y_sub)\n            return_dict['G_subband_stft_loss_mg'] = subband_stft_loss_mg\n            return_dict['G_subband_stft_loss_sc'] = subband_stft_loss_sc\n            gen_loss += self.subband_stft_loss_weight * (subband_stft_loss_mg + subband_stft_loss_sc)\n\n        # multiscale MSE adversarial loss\n        if self.use_mse_gan_loss and scores_fake is not None:\n            mse_fake_loss = _apply_G_adv_loss(scores_fake, self.mse_loss)\n            return_dict['G_mse_fake_loss'] = mse_fake_loss\n            adv_loss += self.mse_gan_loss_weight * mse_fake_loss\n\n        # multiscale Hinge adversarial loss\n        if self.use_hinge_gan_loss and not scores_fake is not None:\n            hinge_fake_loss = _apply_G_adv_loss(scores_fake, self.hinge_loss)\n            return_dict['G_hinge_fake_loss'] = hinge_fake_loss\n            adv_loss += self.hinge_gan_loss_weight * hinge_fake_loss\n\n        # Feature Matching Loss\n        if self.use_feat_match_loss and not feats_fake:\n            feat_match_loss = self.feat_match_loss(feats_fake, feats_real)\n            return_dict['G_feat_match_loss'] = feat_match_loss\n            adv_loss += self.feat_match_loss_weight * feat_match_loss\n        return_dict['G_loss'] = gen_loss + adv_loss\n        return_dict['G_gen_loss'] = gen_loss\n        return_dict['G_adv_loss'] = adv_loss\n"}