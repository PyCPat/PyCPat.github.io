{"BEFORE":"        gap_logit = self.global_avg_pool_fc(gap.view(x.size(0), -1))\n        gap_weight = self.global_avg_pool_fc.linear.weight.data.clone()\n        gap = x * gap_weight.unsqueeze(2).unsqueeze(3)\n\n        gmp = self.global_max_pool(x)\n        gmp_logit = self.global_max_pool_fc(gmp.view(x.size(0), -1))\n        gmp_weight = self.global_max_pool_fc.linear.weight.data.clone()\n        gmp = x * gmp_weight.unsqueeze(2).unsqueeze(3)\n\n        cam_logit = torch.cat([gap, gmp], dim=1)\n        x = self.conv(cam_logit)\n        return x, cam_logit\n","AFTER":"        gap_logit = self.avgpool_fc(gap.flatten(1))\n        gap_weight = self.avgpool_fc.weight.clone()\n        gap = x * gap_weight[:, :, None, None]\n\n        gmp = self.maxpool(x)\n        gmp_logit = self.maxpool_fc(gmp.flatten(1))\n        gmp_weight = self.maxpool_fc.weight.detach().clone()\n        gmp = x * gmp_weight[:, :, None, None]\n\n        cam_logit = torch.cat([gap_logit, gmp_logit], dim=1)\n        x = torch.cat([gap, gmp], dim=1)\n        x = self.conv(x)\n        x = self.act(x)\n\n        heatmap = torch.sum(x, dim=1, keepdim=True)\n\n        return x, cam_logit, heatmap\n"}