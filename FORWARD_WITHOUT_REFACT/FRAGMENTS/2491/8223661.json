{"BEFORE":"        N = x.size(0)\n        m = x.size(-1)\n        diag_part = torch.diagonal(x, dim1=2, dim2=3)\n        max_diag_part = torch.max(diag_part, 2)[0].unsqueeze(-1)\n        max_of_rows = torch.max(x, 3)[0]\n        max_of_cols = torch.max(x, 2)[0]\n        max_all = torch.max(torch.max(x, 2)[0], 2)[0].unsqueeze(-1)\n\n        op1 = diag_part\n        op2 = max_diag_part.expand_as(op1)\n        op3 = max_of_rows\n        op4 = max_of_cols\n        op5 = max_all.expand_as(op1)\n\n        return torch.stack([op1, op2, op3, op4, op5]).permute(1, 0, 2, 3).reshape(N, -1, m)\n","AFTER":"        b, n, _, in_features = x.size()\n        basis = 5\n        diag_part = torch.diagonal(x, dim1=1, dim2=2).permute(0,2,1)\n        max_diag_part = torch.max(diag_part, 1)[0].unsqueeze(1)\n        max_of_rows = torch.max(x, 2)[0]\n        max_of_cols = torch.max(x, 1)[0]\n        max_all = torch.max(torch.max(x, 1)[0], 1)[0].unsqueeze(1)\n\n        op1 = diag_part\n        op2 = max_diag_part.expand_as(op1)\n        op3 = max_of_rows\n        op4 = max_of_cols\n        op5 = max_all.expand_as(op1)\n\n        output = torch.stack([op1, op2, op3, op4, op5], dim=2)\n        assert output.size() == (b, n, basis, in_features), output.size()\n        return output.view(b, n, basis*in_features)\n"}