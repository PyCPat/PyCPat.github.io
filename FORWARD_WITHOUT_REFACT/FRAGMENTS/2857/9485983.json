{"BEFORE":"        args = list(args)\n\n        x = args[0]\n        b, _, t, _, device = *x.shape, x.device\n\n        input_mask = kwargs.get('input_mask')\n\n        if input_mask is None:\n            input_mask = torch.full_like(x, True, device=device, dtype=torch.bool)\n\n        for ind, x in enumerate(args):\n            x, padding = pad_to_multiple(x, self.pad_multiple, dim=self.pad_dim)\n            args[ind] = x\n\n        if padding != 0:\n            new_mask = F.pad(input_mask, (0, padding), value=False)\n            kwargs.update(input_mask=new_mask)\n\n        out = self.net(*args, **kwargs)\n","AFTER":"        q, args = args[0], list(args)\n        b, h, t, _, device = *q.shape, q.device\n\n        input_mask = kwargs.get('input_mask')\n\n        if input_mask is None:\n            input_mask = torch.full((b, t), True, device=device, dtype=torch.bool)\n\n        args = map(lambda t: pad_to_multiple(t, self.pad_multiple, dim=-2), args)\n        new_mask = pad_to_multiple(input_mask, self.pad_multiple, dim=-1, value=False)\n        kwargs.update(input_mask=new_mask)\n"}