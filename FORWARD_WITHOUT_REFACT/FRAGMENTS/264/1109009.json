{"BEFORE":"    def __init__(self, in_channels, middle_channels, out_channels, stride=1, dim = 2):\n        super().__init__()\n        self.in_channels  =in_channels\n        self.middle_channels  =middle_channels\n        self.out_channels  =out_channels\n        self.dim = dim\n\n        if self.dim ==2:\n            make_conv = ConvNormActive2D\n        elif dim ==3:\n            make_conv = ConvNormActive3D\n        else:\n            raise ValueError('dim should be 2 or 3')\n\n        # 构建projection\n        if self.out_channels != self.in_channels: # 输入输出channel不一样，则添加projection改变输入通道,用于不同stage的过渡处\n            self.projection = make_conv(in_channels=self.in_channels,out_channels=self.out_channels)\n        else:\n            self.projection = None\n\n        self.conv1 = make_conv(self.in_channels, self.middle_channels)\n        self.conv2 = make_conv(self.middle_channels, self.middle_channels)\n        self.conv3 = make_conv(self.middle_channels, self.out_channels)\n","AFTER":"    def __init__(self, type, in_channels, middle_channels, out_channels, norm='bn', active='relu', gn_c=8, dim=2):\n        super().__init__()\n        self.type = type\n        self.in_channels = in_channels\n        self.middle_channels = middle_channels\n        self.out_channels = out_channels\n        self.dim = dim\n\n        \"\"\"\n        If the input\/output channels are different, \n        add projection to alter the input channel for transitions at different stages\n        \"\"\"\n        if self.out_channels != self.in_channels:\n            self.projection = MakeConv(in_channels=self.in_channels, out_channels=self.out_channels, kernel_size=1, dim=dim,padding=0)\n        else:\n            self.projection = nn.Identity()\n\n\n        # build list\n        if self.type == '33':\n            self.conv_list = nn.ModuleList([])\n            self.conv_list.append(ConvNormActive(in_channels, out_channels, kernel_size=3, norm=norm, active=active, gn_c = gn_c, dim = dim))\n            self.conv_list.append(ConvNormActive(out_channels, out_channels, kernel_size=3, norm=norm, active='None', gn_c = gn_c, dim = dim))\n        elif self.type == '131':\n            self.conv_list = nn.ModuleList([])\n            self.conv_list.append(ConvNormActive(in_channels, middle_channels, kernel_size=1, norm=norm, active=active, gn_c = gn_c, dim = dim, padding=0))\n            self.conv_list.append(ConvNormActive(middle_channels, middle_channels, kernel_size=3, norm=norm, active=active, gn_c = gn_c, dim = dim))\n            self.conv_list.append(ConvNormActive(middle_channels, out_channels, kernel_size=1, norm=norm, active='None', gn_c = gn_c, dim = dim, padding=0))\n        else:\n            raise ValueError('type of ResBlock must be 131 or 33,'+type+' is not acceptable')\n\n        # out activation\n        self.activation = MakeActive(active)\n"}