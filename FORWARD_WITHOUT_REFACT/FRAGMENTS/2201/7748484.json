{"BEFORE":"        remainder = x.shape[-1] % self.pool_size\n        if remainder > 0:\n            x = F.pad(x, (0, remainder), value = 0)\n\n        attn_logits = einsum('b d n, d e -> b e n', x, self.to_attn_logits)\n        x = self.pool_fn(x)\n        attn = self.pool_fn(attn_logits).softmax(dim = -1)\n","AFTER":"        b, _, n = x.shape\n        remainder = n % self.pool_size\n        needs_padding = remainder > 0\n\n        if needs_padding:\n            x = F.pad(x, (0, remainder), value = 0)\n            mask = torch.zeros((b, 1, n), dtype = torch.bool, device = x.device)\n            mask = F.pad(mask, (0, remainder), value = True)\n\n        attn_logits = einsum('b d n, d e -> b e n', x, self.to_attn_logits)\n        x = self.pool_fn(x)\n        logits = self.pool_fn(attn_logits)\n\n        if needs_padding:\n            mask_value = -torch.finfo(logits.dtype).max\n            logits = logits.masked_fill(self.pool_fn(mask), mask_value)\n\n        attn = logits.softmax(dim = -1)\n"}