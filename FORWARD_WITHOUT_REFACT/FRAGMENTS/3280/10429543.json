{"BEFORE":"    def forward(self, dag_inputs, n_samples):\n        \"\"\"runs input through DAG of processors\n\n        Args:\n            dag_inputs (dict): ex. {'INPUT_KEY':Tensor}\n\n        Returns:\n            dict: Final output of processor\n        \"\"\"\n        outputs = dag_inputs\n\n        for node in self.dag:\n            processor, connections = node\n            # fixed params are not in 0~1 and do not need to be scaled\n            scaled = [k for k in connections if connections[k] in self.fixed_param_names]\n            inputs = {key: outputs[connections[key]] for key in connections}\n            # list of fixed parameters that\n            if n_samples and isinstance(processor, Gen):\n                inputs.update({'n_samples': n_samples})\n            # Run processor.\n            signal = processor.process(scaled_params=scaled, **inputs)\n\n            # Add the outputs of processor for use in subsequent processors\n            outputs[processor.name] = signal # audio\/control signal output\n\n        #Use the output of final processor as signal\n        output_name = self.dag[-1][0].name\n","AFTER":"    def forward(self, dag_inputs: Dict[str, torch.Tensor], n_samples: int):\n        \"\"\"runs input through DAG of processors\n\n        Args:\n            dag_inputs (dict): ex. {'INPUT_KEY':Tensor}\n\n        Returns:\n            dict: Final output of processor\n        \"\"\"\n        outputs = dag_inputs\n        for processor, connections in zip(self.processors, self.connections):\n            # fixed params are not in 0~1 and do not need to be scaled\n            scaled: List[str] = []\n            for k in connections:\n                if connections[k] in self.conditioned_params:\n                    scaled.append(k)\n            inputs = {key: outputs[connections[key]] for key in connections}\n\n            signal = processor.process(inputs, n_samples, scaled_params=scaled)\n\n            # Add the outputs of processor for use in subsequent processors\n            outputs[processor.name] = signal # audio\/control signal output\n\n        #Use the output of final processor as signal\n        output_name = self.processors[-1].name\n"}