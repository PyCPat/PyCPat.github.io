{"BEFORE":"            q = self.in_proj_q(query)\n            if key is None:\n                assert value is None\n                # this will allow us to concat it with previous value and get\n                # just get the previous value\n                k = v = q.new(0)\n            else:\n                k, v = self.in_proj_kv(key)\n        else:\n            q = self.in_proj_q(query)\n            k = self.in_proj_k(key)\n            v = self.in_proj_v(value)\n        q *= self.scaling\n\n        if saved_state is not None:\n            if 'prev_key' in saved_state:\n                k = torch.cat((saved_state['prev_key'], k), dim=0)\n            if 'prev_value' in saved_state:\n                v = torch.cat((saved_state['prev_value'], v), dim=0)\n","AFTER":"                k = v = None\n            else:\n                k, v = self.in_proj_kv(key)\n        else:\n            q = self.in_proj_q(query)\n            k = self.in_proj_k(key)\n            v = self.in_proj_v(value)\n        q *= self.scaling\n\n        if saved_state is not None:\n\n            if 'prev_key' in saved_state:\n                if static_kv:\n                    k = saved_state['prev_key']\n                else:\n                    k = torch.cat((saved_state['prev_key'], k), dim=0)\n            if 'prev_value' in saved_state:\n                if static_kv:\n                    v = saved_state['prev_value']\n                else:\n                    v = torch.cat((saved_state['prev_value'], v), dim=0)\n            saved_state['prev_key'] = k\n"}