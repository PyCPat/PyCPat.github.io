{"BEFORE":"        x = self.conv2d(input)\n\n        skips = []\n        skips.append(x)\n\n        for idx in range(self.num_stacks):\n            x = self.encoder[idx](x)\n            skips.append(x)\n\n        for idx in range(self.num_stacks - 1):\n            skip_idx = self.num_stacks - idx - 1\n            skip = skips[skip_idx]\n            x = self.decoder[idx](x, skip=skip)\n\n        output = self.bottleneck_conv2d(x)\n","AFTER":"        Kh, Kw = self.kernel_size\n        Ph, Pw = Kh - 1, Kw - 1\n        padding_top = Ph \/\/ 2\n        padding_bottom = Ph - padding_top\n        padding_left = Pw \/\/ 2\n        padding_right = Pw - padding_left\n\n        input = F.pad(input, (padding_left, padding_right, padding_top, padding_bottom))\n\n        x = self.conv2d(input)\n        x, skip = self.encoder(x)\n        x = self.bottleneck_conv2d(x)\n        x = self.decoder(x, skip[::-1])\n\n        if self.pointwise_conv2d:\n            output = self.pointwise_conv2d(x)\n        else:\n            output = x\n        \n        return output\n"}