{"BEFORE":"        feat_spec = self.cplx_comp(spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2))\n        # e0, e1, e2, e3, emb, c0, lsnr = self.enc(feat_erb, feat_spec)\n        # m = self.erb_dec(emb, e3, e2, e1, e0)\n        m, emb, _ = self.erb_stage(feat_erb)\n        lsnr, _ = self.lsnr_net(emb)\n        emb = emb.permute(0, 2, 3, 1).flatten(2)\n        spec = self.mask(spec, m, atten_lim)\n        feat_spec = self.cplx_comp(spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2))\n        if self.run_df:\n            df_coefs, df_alpha = self.df_dec(feat_spec, emb)\n            spec = self.df_op(spec, df_coefs, df_alpha)\n        else:\n            df_alpha = torch.zeros(spec.shape[0], spec.shape[2], 1, device=spec.device)\n","AFTER":"        df_alpha = None\n        if self.run_df:\n            # df_coefs, df_alpha = self.df_dec(feat_spec, emb)\n            # spec = self.df_op(spec, df_coefs, df_alpha)\n            # ic(df_coefs.shape, spec.shape)\n            df_coefs, _, _ = self.df_stage(feat_spec)\n            df_coefs = df_coefs.unflatten(1, (self.df_order, 2)).permute(0, 3, 1, 4, 2)\n"}