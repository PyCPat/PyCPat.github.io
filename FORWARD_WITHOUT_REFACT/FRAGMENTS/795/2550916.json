{"BEFORE":"        V = self.v(feats) # N x V, unsorted\n        Q = self.q(feats).view(feats.shape[0], -1)\n        for i in range(c.shape[1]):\n            _, indices = torch.sort(c[:, i], 0, True)         \n            feats = torch.index_select(feats, 0, indices) # N x K, sorted\n            q_max = self.q(feats[0].view(1, -1)) # 1 x 1 x Q\n            temp = torch.mm(Q, q_max.view(-1, 1)) \/ torch.sqrt(torch.tensor(Q.shape[1], dtype=torch.float32, device=device))\n            if i == 0:\n                A = F.softmax(temp, 0) # N x 1\n                B = torch.sum(torch.mul(A, V), 0).view(1, -1) # 1 x V\n            else:\n                temp = F.softmax(temp, 0) # N x 1\n                A = torch.cat((A, temp), 1) # N x C\n                B = torch.cat((B, torch.sum(torch.mul(temp, V), 0).view(1, -1)), 0) # C x V -> 1 x C x V\n        B = B.view(1, B.shape[0], B.shape[1]) # 1 x C x V\n","AFTER":"        V = self.v(feats) # N x V, unsorted\n        Q = self.q(feats).view(feats.shape[0], -1) # N x Q, unsorted\n        \n        # handle multiple classes without for loop\n        _, m_indices = torch.sort(c, 0, descending=True) # sort class scores along the instance dimension, m_indices in shape N x C\n        m_feats = torch.index_select(feats, dim=0, index=m_indices[0, :]) # select critical instances, m_feats in shape C x K \n        q_max = self.q(m_feats) # compute queries of critical instances, q_max in shape C x Q\n        A = torch.mm(Q, q_max.transpose(0, 1)) # compute inner product of Q to each entry of q_max, A in shape N x C, each column contains unnormalized attention scores\n        A = F.softmax( A \/ torch.sqrt(torch.tensor(Q.shape[1], dtype=torch.float32, device=device)), 0) # normalize attention scores, A in shape N x C, \n        B = torch.mm(A.transpose(0, 1), V) # compute bag representation, B in shape C x V\n"}