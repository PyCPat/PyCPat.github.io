{"BEFORE":"        self, x: Tensor, h_prev: Optional[Tensor] = None, h: Optional[Tensor] = None\n    ) -> Tuple[Tensor, Tensor, Tensor]:\n        # input shape: [B, C, T, F]\n        if self.global_skip:\n            x = self.global_skip_conv(x)\n        x0 = self.conv_in(x)\n        x1 = self.down_block(x0)\n        if h_prev is not None:\n            assert self.conv_hprev_down is not None\n            h_prev = self.conv_hprev_down(h_prev)\n            x1 = x1 + h_prev\n        x_rnn, h = self.gru(x1, h)\n        x_rnn = x_rnn + x1\n        x1 = self.up_block(x_rnn)\n        x1 = x1 + x0\n        m = self.conv_out(x1, skip=x if self.global_skip else None)\n        return m, x_rnn, h\n","AFTER":"        intermediate = []\n        for enc_layer in self.enc:\n            x = enc_layer(x)\n            intermediate.append(x)\n        x_rnn, h = self.rnn(x, h)\n        for dec_layer, x_enc in zip(self.dec, reversed(intermediate)):\n            x = dec_layer(x + x_enc)\n        return x, x_rnn, h\n"}