{"BEFORE":"        spec = self.mask(spec, m, atten_lim)  # [B, 1, T, F, 2]\n        lsnr, _ = self.lsnr_net(x_rnn)\n        out_specs = [spec.squeeze(1).clone() for _ in range(len(self.refinement_stages) + 1)]\n        # re\/im into channel axis\n        spec_f = (\n            spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2).clone()\n        )  # [B, 2, T, F_df]\n        h_conv: Optional[Tensor] = None\n        for i, (stage, _) in enumerate(zip(self.refinement_stages, self.refinement_snr_max)):\n            refinement, h_conv, _ = stage(self.cplx_comp(spec_f), h_conv)\n            spec_f = spec_f + refinement\n            out_specs[i + 1][..., : self.df_bins, :] = spec_f.permute(0, 2, 3, 1)\n        spec[..., : self.df_bins, :] = spec_f.unsqueeze(-1).transpose(1, -1)\n        return spec, m, lsnr, out_specs\n","AFTER":"        spec_f = (\n            spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2).clone()\n        )  # [B, 2, T, F_df]\n        r, _, _ = self.refinement_stage(self.cplx_comp(spec_f))\n        spec_f = self.refinement_op(spec_f, r)\n        spec[..., : self.df_bins, :] = spec_f.unsqueeze(-1).transpose(1, -1)\n        return spec, m, lsnr, None\n"}