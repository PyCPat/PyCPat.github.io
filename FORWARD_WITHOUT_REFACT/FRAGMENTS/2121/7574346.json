{"BEFORE":"        b, h, t, d_h, d, heads, temperature, buckets, device = *q.shape, self.dim, self.heads, self.temperature, self.buckets, q.device\n\n        bsz = t \/\/ buckets\n        hh = h \/\/ 2\n\n        hh_slice = (slice(None), slice(hh, None))\n\n        q[hh_slice] = rotate_left(q[hh_slice], bsz-1, dim=2)\n        k[hh_slice] = rotate_left(k[hh_slice], bsz-1, dim=2)\n        v[hh_slice] = rotate_left(v[hh_slice], bsz-1, dim=2)\n\n        q = q.reshape(b * h, t, d_h)\n        k = k.reshape(b * h, t, d_h)\n        v = v.reshape(b * h, t, d_h)\n\n        bucket_fn = partial(bucket, buckets)\n        b_q, b_k, b_v = map(bucket_fn, (q, k, v))\n\n        # calculate R\n\n        R = self.sort_net(q, k)\n\n        # softmax and mask to prevent future buckets going to past\n\n        mask_value = max_neg_value(q)\n        mask = torch.zeros((b * h, buckets, buckets), device=device).bool()\n        i, j = torch.triu_indices(buckets, buckets)\n        mask[:, 0, :] = True\n        mask[:, i, j] = True\n        R.masked_fill_(mask, mask_value)\n        R = R.softmax(dim=-1)\n        R = R.tril(diagonal=-1) # extra insurance\n        del mask\n\n        R = R.type_as(q).to(q)\n\n        # only allow one bucket to be reordered to, needed for input masking to work\n        R = zero_all_but_top(R, dim=2, k=1)\n\n        # concat reordered buckets\n\n        b_k_r = reorder_buckets(b_k, R)\n        b_v_r = reorder_buckets(b_v, R)\n","AFTER":"        bh = b * h\n\n        bsz = t \/\/ buckets\n        hh = h \/\/ 2\n\n        hh_slice = (slice(None), slice(hh, None))\n\n        q[hh_slice] = rotate_left(q[hh_slice], bsz-1, dim=2)\n        k[hh_slice] = rotate_left(k[hh_slice], bsz-1, dim=2)\n        v[hh_slice] = rotate_left(v[hh_slice], bsz-1, dim=2)\n\n        merge_batch_head = lambda x: x.reshape(b * h, t, d_h)\n        q, k, v = map(merge_batch_head, (q, k, v))\n\n        # bucket qkv\n\n        bucket_fn = partial(bucket, buckets)\n        b_q, b_k, b_v = map(bucket_fn, (q, k, v))\n\n        # calculate R\n\n        R = self.sort_net(q, k)\n\n        # softmax and mask to prevent future buckets going to past\n\n        mask_value = max_neg_value(q)\n        mask = torch.zeros((b * h, buckets, buckets + 1), device=device).bool()\n        i, j = torch.triu_indices(buckets, buckets)\n        mask[:, i, j + 1] = True\n        R.masked_fill_(mask, mask_value)\n        R = R.softmax(dim=-1)\n        R = R.tril(diagonal=-1) # extra insurance\n        del mask\n\n        R = R.type_as(q).to(q)\n\n        # only allow one bucket to be reordered to, needed for input masking to work\n        R = zero_all_but_top(R, dim=2, k=1)\n\n        # add null key \/ value buckets at index 0\n        null_key_bucket = self.null_key[None, :, None, :, :].expand(b, -1, 1, bsz, -1).reshape(bh, 1, bsz, -1)\n        null_value_bucket = self.null_value[None, :, None, :, :].expand(b, -1, 1, bsz, -1).reshape(bh, 1, bsz, -1)\n\n        b_k_r = torch.cat((null_key_bucket, b_k), dim=1)\n        b_v_r = torch.cat((null_value_bucket, b_v), dim=1)\n\n        # reorder buckets to buckets of the past\n        b_k_r = reorder_buckets(b_k_r, R)\n        b_v_r = reorder_buckets(b_v_r, R)\n"}