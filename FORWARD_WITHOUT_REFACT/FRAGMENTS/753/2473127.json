{"BEFORE":"        if dev.simulate:\n            self.quantize = Quantize(num_bits=dev.DATA_BITS + output_shift if not wide else 1)\n            bits = dev.ACTIVATION_BITS if not wide else dev.FULL_ACC_BITS\n            self.clamp = Clamp(min_val=-(2**(bits-1)), max_val=2**(bits-1)-1)\n            if pooling == 'Avg':\n                self.quantize_pool = Round() if dev.round_avg else Floor()\n            else:  # Max, None\n                self.quantize_pool = Empty()\n        else:\n            self.quantize = Empty()\n            self.quantize_pool = Empty()\n            self.clamp = Clamp(min_val=-1., max_val=1.)  # Do not combine with ReLU\n\n        if pooling == 'Avg':\n            self.clamp_pool = self.clamp\n        else:  # Max, None\n            self.clamp_pool = Empty()\n\n        self.activate = get_activation(activation)\n","AFTER":"        assert not wide or activation is None\n\n        if pooling is not None:\n            if pool_stride is None:\n                pool_stride = pool_size\n\n            assert dev.device != 84 or pool_size & 1 == 0\n            assert pool_size <= 16 \\\n                and (dev.device != 84 or pool_size <= 4 or pooling == 'Max')\n\n            assert 0 < pool_stride <= 16 \\\n                and (dev.device != 84 or pool_stride <= 4 or pooling == 'Max')\n\n            assert stride == 1\n        else:\n            assert dev.device != 84 or stride == 3\n            assert dev.device == 84 or stride == 1\n\n        if pooling == 'Max':\n            self.pool = nn.MaxPool1d(kernel_size=pool_size, stride=pool_stride, padding=0)\n        elif pooling == 'Avg':\n            self.pool = nn.AvgPool1d(kernel_size=pool_size, stride=pool_stride, padding=0)\n        else:\n            self.pool = None\n\n        if kernel_size is not None:\n            assert dev.device != 84 or padding in [0, 3, 6]\n            assert dev.device == 84 or padding in [0, 1, 2]\n            assert dev.device != 84 or kernel_size == 9\n            assert dev.device == 84 or kernel_size in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n            self.conv1d = nn.Conv1d(in_channels, out_channels, kernel_size, stride=stride,\n                                    padding=padding, bias=bias)\n        else:\n            self.conv1d = None\n\n        self.quantize_pool, self.clamp_pool = quantize_clamp_pool(pooling)\n        self.quantize, self.clamp = quantize_clamp(wide, output_shift)\n"}