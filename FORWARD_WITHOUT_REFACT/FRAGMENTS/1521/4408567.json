{"BEFORE":"        x_vgg = self.vgg(x)\n        y_vgg = self.vgg(y)\n        # self.visualize([x0]+x_vgg, [y0]+y_vgg)\n        loss = 0\n        for i in range(3):\n            if self.is_ssim:\n                loss += pytorch_ssim.ssim(x_vgg[i], y_vgg[i].detach())\n            else:\n                if self.relative:\n                    loss += self.criterion(x_vgg[i],y_vgg[i].detach(),resize_to_match(mask,x_vgg[i]))\n                else:\n                    loss += self.criterion(resize_to_match(mask,x_vgg[i])*x_vgg[i],resize_to_match(mask,y_vgg[i])*y_vgg[i].detach())\n\n        return loss\n","AFTER":"        x_vgg = self.vgg(x)\n        y_vgg = self.vgg(y)\n        # self.visualize([x0]+x_vgg, [y0]+y_vgg)\n        loss = 0\n        style_loss = 0\n        for i in range(3):\n            # VGG Content Loss\n            if self.relative:\n                loss += self.criterion(x_vgg[i],y_vgg[i].detach(),resize_to_match(mask,x_vgg[i]))\n            else:\n                loss += self.criterion(resize_to_match(mask,x_vgg[i])*x_vgg[i],resize_to_match(mask,y_vgg[i])*y_vgg[i].detach()) # \n                # loss += self.criterion(x_vgg[i], y_vgg[i].detach())\n            # VGG Style Loss\n            if self.use_style:\n                x_gram = self.gram_matrix(x_vgg[i])\n                y_gram = self.gram_matrix(y_vgg[i].detach())\n                style_loss += F.l1_loss(x_gram, y_gram)\n\n        return {\"content\":loss, \"style\":style_loss}\n"}