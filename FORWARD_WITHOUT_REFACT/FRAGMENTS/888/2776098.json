{"BEFORE":"    def forward(self, s):\n        \"\"\"\n        Args:\n            [*, N_res, C_s] single representation\n        Returns:\n            [*, N_res] affine transformation object\n        \"\"\"\n        # [*, 6]\n        params = self.linear(s)\n\n        # [*, 3]\n        quats, trans = params[..., :3], params[..., 3:]\n\n        # [*]\n        # norm_denom = torch.sqrt(sum(torch.unbind(quats ** 2, dim=-1)) + 1)\n        norm_denom = torch.sqrt(torch.sum(quats ** 2, dim=-1) + 1)\n\n        # [*, 3]\n        ones = s.new_ones((1,) * len(quats.shape)).expand(\n            quats.shape[:-1] + (1,)\n        )\n\n        # [*, 4]\n        quats = torch.cat([ones, quats], dim=-1)\n        quats = quats \/ norm_denom[..., None]\n\n        # [*, 3, 3]\n        rots = quat_to_rot(quats)\n\n        return T(rots, trans)\n","AFTER":"    def forward(self, s: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Args:\n            [*, N_res, C_s] single representation\n        Returns:\n            [*, N_res, 6] update vector \n        \"\"\"\n        # [*, 6]\n        update = self.linear(s)\n\n        return update \n"}