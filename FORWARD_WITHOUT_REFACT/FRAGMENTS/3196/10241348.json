{"BEFORE":"    def forward(self, x, lens):\n        if self.use_mask:\n            lens = lens.to(dtype=torch.long)\n            max_len = x.size(2)\n            mask = torch.arange(max_len).to(lens.device).expand(\n                len(lens), max_len\n            ) >= lens.unsqueeze(1)\n            x = x.masked_fill(mask.unsqueeze(1).to(device=x.device), 0)\n            # del mask\n            lens = self.get_seq_len(lens)\n\n        sh = x.shape\n        if self.heads != -1:\n            x = x.view(-1, self.heads, sh[-1])\n\n        out = self.conv(x)\n\n        if self.heads != -1:\n            out = out.view(sh[0], self.real_out_channels, -1)\n\n        return out, lens\n","AFTER":"        self, x: torch.Tensor, lens: torch.Tensor\n    ) -> Tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"Forward method\n\n        Args:\n            x : Signal to be processed, of shape (batch, features, time)\n            lens : Lenghts of each element in the batch of x, with shape (batch)\n\n        Returns:\n            Both the signal processed by the convolution and the resulting lengths\n        \"\"\"\n        if self.use_mask:\n            x = self.mask_fill(x, lens)\n        out = self.conv(x)\n        return out, self.get_seq_len(lens)\n"}