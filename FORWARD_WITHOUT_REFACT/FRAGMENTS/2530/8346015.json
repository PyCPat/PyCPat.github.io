{"BEFORE":"        s = self.scale_factor\n\n        # pad input (left, right, top, bottom)\n        input = F.pad(input, (1, 2, 1, 2), mode='replicate')\n\n        # calculate output (height)\n        kernel_h = self.kernels.repeat(c, 1).view(-1, 1, s, 1)\n        output = F.conv2d(input, kernel_h, stride=1, padding=0, groups=c)\n        output = output.reshape(\n            n, c, s, -1, w + 3).permute(0, 1, 3, 2, 4).reshape(n, c, -1, w + 3)\n\n        # calculate output (width)\n        kernel_w = self.kernels.repeat(c, 1).view(-1, 1, 1, s)\n        output = F.conv2d(output, kernel_w, stride=1, padding=0, groups=c)\n        output = output.reshape(\n            n, c, s, h * s, -1).permute(0, 1, 3, 4, 2).reshape(n, c, h * s, -1)\n","AFTER":"        f = self.scale_factor\n\n        # merge n&c\n        input = input.view(n*c, 1, h, w)\n\n        # pad input (left, right, top, bottom)\n        input = F.pad(input, (1, 2, 1, 2), mode='replicate')\n\n        # calculate output (vertical expansion)\n        kernel_h = self.kernels.view(f, 1, 4, 1)\n        output = F.conv2d(input, kernel_h, stride=1, padding=0)\n        output = output.permute(0, 2, 1, 3).reshape(n*c, 1, f*h, w + 3)\n\n        # calculate output (horizontal expansion)\n        kernel_w = self.kernels.view(f, 1, 1, 4)\n        output = F.conv2d(output, kernel_w, stride=1, padding=0)\n        output = output.permute(0, 2, 3, 1).reshape(n*c, 1, f*h, f*w)\n\n        # split n&c\n        output = output.view(n, c, f*h, f*w)\n"}