{"BEFORE":"    def __init__(self,\n                 enc_dict = None,\n                 embedding_dim = None):\n        super(EmbeddingLayer, self).__init__()\n        self.enc_dict = enc_dict\n        self.embedding_dim = embedding_dim\n        self.embedding_layer = nn.ModuleDict()\n\n        self.emb_feature = []\n\n        for col in self.enc_dict.keys():\n            if 'vocab_size' in self.enc_dict[col].keys():\n                self.emb_feature.append(col)\n                self.embedding_layer.update({col : nn.Embedding(\n                    self.enc_dict[col]['vocab_size']+1,\n                    self.embedding_dim,\n","AFTER":"    def __init__(self,\n                 enc_dict: Dict[str, Dict[str, Union[int, str]]],\n                 embedding_dim: int) -> None:\n        \"\"\"\n        Initialize EmbeddingLayer instance.\n        Args:\n            enc_dict: Encoding dictionary containing vocabulary size for each categorical feature\n            embedding_dim: Number of dimensions in the embedding space\n        \"\"\"\n        super().__init__()\n"}