{"BEFORE":"        y = torch.zeros((B, N, N), dtype=torch.float32, device=x.device)\n        for k in range(1, N):\n            x_l = x[:, :-k, :] # (B, N-k, C)\n            x_r = x[:, k:, :] # (B, N-k, C)\n\n            # v1: closing pairs, v2: opening pairs\n            v1 = torch.cat((x_l, x_r), dim=2) # (B, N-k, C*2)\n            v2 = torch.cat((x_r, x_l), dim=2) # (B, N-k, C*2)\n            # concat\n            v = torch.cat((v1, v2), dim=0) # (B*2, N-k, C*2)\n            v = torch.reshape(v, (B*2*(N-k), C*2)) # (B*2*(N-k), C*2)\n            for fc in self.fc[:-1]:\n                v = F.relu(fc(v))\n                v = self.dropout(v)\n            v = self.fc[-1](v) # (B*2*(N-k), 1)\n            v = torch.reshape(v, (B*2, N-k)) # (B*2, N-k)\n            v1, v2 = torch.chunk(v, 2, dim=0) # (B, N-k) * 2\n            y += torch.diag_embed(v1, offset=k) # (B, N, N)\n            y += torch.diag_embed(v2, offset=-k) # (B, N, N)\n        return y\n","AFTER":"        x_l = x.view(B, N, 1, C).expand(B, N, N, C)\n        x_r = x.view(B, 1, N, C).expand(B, N, N, C)\n        v = torch.cat((x_l, x_r), dim=3) # (B, N, N, C*2)\n        v = v.view(B*N*N, C*2)\n        for fc in self.fc[:-1]:\n            v = F.relu(fc(v))\n            v = self.dropout(v)\n        y = self.fc[-1](v) # (B*N*N, 1)\n        y = y.view(B, N, N)\n"}