{"BEFORE":"    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 16 * 5 * 5)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n","AFTER":"    def forward(self, x, last=False, freeze=False):\n        if freeze:\n            with torch.no_grad():\n                x = self.pool(F.relu(self.conv1(x)))\n                x = self.pool(F.relu(self.conv2(x)))\n                x = x.view(-1, 16 * 5 * 5)\n                x = F.relu(self.fc1(x))\n                x = F.relu(self.fc2(x))\n        else:\n            x = self.pool(F.relu(self.conv1(x)))\n            x = self.pool(F.relu(self.conv2(x)))\n            x = x.view(-1, 16 * 5 * 5)\n            x = F.relu(self.fc1(x))\n            x = F.relu(self.fc2(x))\n        out = self.fc3(x)\n        if last:\n            return out, x\n        else:\n            return out\n"}