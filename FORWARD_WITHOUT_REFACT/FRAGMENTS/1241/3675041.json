{"BEFORE":"        intra = self.intra_mdl(intra)\n\n        # [BS, K, N]\n        if self.linear_layer_after_inter_intra:\n            intra = self.intra_linear(\n                intra.contiguous().view(B * S * K, -1)\n            ).view(B * S, K, -1)\n        # [B, S, K, N]\n        intra = intra.view(B, S, K, N)\n        # [B, N, K, S]\n        intra = intra.permute(0, 3, 2, 1).contiguous()\n        if self.norm is not None:\n            intra = self.intra_norm(intra)\n\n        # [B, N, K, S]\n        if self.skip_around_intra:\n            intra = intra + x\n\n        # inter RNN\n        # [BK, S, N]\n        inter = intra.permute(0, 2, 3, 1).contiguous().view(B * K, S, N)\n        # [BK, S, H]\n        inter = self.inter_mdl(inter)\n\n        # [BK, S, N]\n        if self.linear_layer_after_inter_intra:\n            inter = self.inter_linear(\n                inter.contiguous().view(B * S * K, -1)\n            ).view(B * K, S, -1)\n","AFTER":"        intra = self.intra_mdl(intra)\n\n        # [BS, K, N]\n        if self.linear_layer_after_inter_intra:\n            # intra = self.intra_linear(\n            #    intra.contiguous().view(B * S * K, -1)\n            # ).view(B * S, K, -1)\n            intra = self.intra_linear(intra)\n\n        # [B, S, K, N]\n        intra = intra.view(B, S, K, N)\n        # [B, N, K, S]\n        intra = intra.permute(0, 3, 2, 1).contiguous()\n        if self.norm is not None:\n            intra = self.intra_norm(intra)\n\n        # [B, N, K, S]\n        if self.skip_around_intra:\n            intra = intra + x\n\n        # inter RNN\n        # [BK, S, N]\n        inter = intra.permute(0, 2, 3, 1).contiguous().view(B * K, S, N)\n        # [BK, S, H]\n        inter = self.inter_mdl(inter)\n\n        # [BK, S, N]\n        if self.linear_layer_after_inter_intra:\n            # inter = self.inter_linear(\n            #    inter.contiguous().view(B * S * K, -1)\n            # ).view(B * K, S, -1)\n            inter = self.inter_linear(inter)\n"}