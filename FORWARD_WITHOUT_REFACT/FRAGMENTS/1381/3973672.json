{"BEFORE":"    def forward(self, pred, target):\n        log_prob = F.log_softmax(pred, dim=-1)\n        dist = torch.empty_like(pred).fill_(self.smoothing \/ (pred.size(-1) - 1))\n        dist.scatter_(dim=-1, index=target[..., None], value=(1 - self.smoothing))\n        loss = F.kl_div(log_prob, dist)\n        return loss\n","AFTER":"    def forward(self, pred: torch.Tensor, target: torch.Tensor, mask: torch.Tensor):\n        pred = pred.flatten(0, 1)\n        target = target.flatten(0, 1)\n        mask = mask.flatten(0, 1).float()\n        chunked_pred = torch.chunk(pred, chunks=self.chunk, dim=0)\n        chunked_target = torch.chunk(target, chunks=self.chunk, dim=0)\n        chunked_mask = torch.chunk(mask, chunks=self.chunk, dim=0)\n        log_prob = [F.log_softmax(p, dim=-1) for p in chunked_pred]\n        loss = [self.smoothed_loss(p, t, m)[None]\\\n            for p, t, m in zip(log_prob, chunked_target, chunked_mask)]\n        loss = torch.cat(loss, dim=0).sum()\n        return loss \/ mask.sum()\n"}