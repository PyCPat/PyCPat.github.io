{"BEFORE":"        if self.split_block == 1:\n            ret = self.blocks[0](X)\n            return ret\n\n        # split into multiple time segments, assumes in 2nd dim\n        segmented_x = [list(torch.split(x, x.shape[2] \/\/ self.split_block, dim=2)) for x in X]\n        for x in segmented_x:\n            if len(x) > self.split_block:\n                x[-2] = torch.cat(x[-2:], dim=2)\n\n        ret_segments = []\n        for i in range(self.split_block):\n            ret_segments.append(self.blocks[i]([x[i] for x in segmented_x]))\n\n        ret = [torch.cat([r[m] for r in ret_segments], dim=2) for m in range(self.num_modality)]\n","AFTER":"        segment_shapes = [[x.shape[2] \/\/ self.split_block] * self.split_block for x in X]\n        for x, seg_shape in zip(X, segment_shapes):\n            seg_shape[-1] += x.shape[2] % self.split_block\n        segmented_x = [torch.split(x, seg_shape, dim=2) for x, seg_shape in zip(X, segment_shapes)]\n\n        # apply MSAF\n        ret_segments = [self.blocks[i]([x[i] for x in segmented_x]) for i in range(self.split_block)]\n"}