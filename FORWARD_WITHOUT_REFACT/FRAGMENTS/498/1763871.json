{"BEFORE":"        hx, cx = hidden\n        gates = self.linear_ih(input) + self.linear_hh(hx)\n        ingate, forgetgate, cellgate, outgate = gates.chunk(4, 1)\n\n        ingate = torch.sigmoid(ingate)\n        forgetgate = torch.sigmoid(forgetgate)\n        cellgate = torch.tanh(cellgate)\n        outgate = torch.sigmoid(outgate)\n\n        cy = (forgetgate * cx) + (ingate * cellgate)\n        hy = outgate * torch.tanh(cy)\n\n        return hy, cy\n","AFTER":"        if hidden is None:\n            hidden = (torch.zeros(input.size(0), self.hidden_size, dtype=input.dtype, \n                                  device=input.device),\n                      torch.zeros(input.size(0), self.hidden_size, dtype=input.dtype, \n                                  device=input.device))\n        h, c = hidden\n        i = torch.sigmoid(self.linear_i_i(input) + self.linear_i_h(h))\n        f = torch.sigmoid(self.linear_f_i(input) + self.linear_f_h(h))\n        g = torch.tanh(self.linear_g_i(input) + self.linear_g_h(h))\n        o = torch.sigmoid(self.linear_o_i(input) + self.linear_o_h(h))\n        c_prime = (f * c) + (i * g)\n        h_prime = o * torch.tanh(c_prime)\n        return h_prime, c_prime\n"}