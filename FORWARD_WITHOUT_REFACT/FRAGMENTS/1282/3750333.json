{"BEFORE":"            rec_feature = self.refiner(fuse, training=training)\n            for i in range(input_num):\n                if self.has_padding:\n                    if i == 0:\n                        rec_features.append(rec_feature[:, :inputs[0][i].size(1)])\n                    else:\n                        rec_features.append(rec_feature[:, \\\n                            inputs[0][i-1].size(1):inputs[0][i-1].size(1)+inputs[i].size(1)])\n                else:\n                    if i == 0:\n                        rec_features.append(rec_feature[:, :inputs[i].size(1)])\n                    else:\n                        rec_features.append(rec_feature[:, \\\n                            inputs[i-1].size(1):inputs[i-1].size(1)+inputs[i].size(1)])\n","AFTER":"        sizes = [torch.flatten(ii,start_dim=1).size(1) for ii in inputs]\n        rec_features = []\n        if training:\n            rec_feature = self.refiner(fuse, training=training)\n            curr=0\n            for i in range(input_num):\n                if self.has_padding:\n                    if i == 0:\n                        rec_features.append(rec_feature[:, :inputs[0][i].size(1)])\n                    else:\n                        rec_features.append(rec_feature[:, \\\n                            inputs[0][i-1].size(1):inputs[0][i-1].size(1)+inputs[i].size(1)])\n                else:\n                    if i == 0:\n                        rec_features.append(rec_feature[:, :sizes[0]])\n                        curr = sizes[0]\n                    else:\n                        rec_features.append(rec_feature[:, \\\n                                curr:curr+sizes[i]])\n                        curr += sizes[i]\n"}