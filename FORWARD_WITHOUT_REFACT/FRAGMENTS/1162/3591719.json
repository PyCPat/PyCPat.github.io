{"BEFORE":"        logits = self.cls_head(hidden_states) # [batch_size, seq_length, num_labels]\n        # compute loss \n        mask = labels != 100\n        loss = None \n        if labels is not None:\n            loss_fn = nn.CrossEntropyLoss()\n            loss = loss_fn(logits.reshape(-1, logits.shape[-1]), labels.reshape(-1))\n            # CRF\n            # loss = -self.crf(emissions=logits, \n            #                 tags=labels,\n            #                 mask=mask,\n            #                 reduction = \"token_mean\")\n        else:\n            # preds = self.crf.decode(emissions=logits, mask=mask)\n            # logits = torch.LongTensor(preds)\n            pass \n\n        return dict(loss=loss, logits=logits)\n","AFTER":"        if labels is not None:\n            # loss_fn = nn.CrossEntropyLoss()\n            # loss = loss_fn(logits.reshape(-1, logits.shape[-1]), labels.reshape(-1))\n            # CRF\n            mask = labels != -100\n            labels = labels * mask.to(torch.long)\n            loss = -self.crf(emissions=logits, \n                            tags=labels,\n                            mask=mask,\n                            reduction = \"token_mean\")\n        else:\n            preds = self.crf.decode(emissions=logits, mask=mask)\n            logits = torch.LongTensor(preds)\n            # pass \n\n        return dict(loss=loss, logits=logits)\n"}