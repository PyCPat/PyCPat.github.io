{"BEFORE":"        obj_mask    = y_true[..., 4] == 1\n        n           = torch.sum(obj_mask)\n        if n != 0:\n            #---------------------------------------------------------------#\n            #   计算预测结果和真实结果的ciou\n            #----------------------------------------------------------------#\n            ciou        = self.box_ciou(pred_boxes, y_true[..., :4])\n            # loss_loc    = torch.mean((1 - ciou)[obj_mask] * box_loss_scale[obj_mask])\n            loss_loc    = torch.mean((1 - ciou)[obj_mask])\n            \n            loss_cls    = torch.mean(self.BCELoss(pred_cls[obj_mask], y_true[..., 5:][obj_mask]))\n            loss        += loss_loc * self.box_ratio + loss_cls * self.cls_ratio\n\n        if self.focal_loss:\n            ratio       = torch.where(obj_mask, torch.ones_like(conf) * self.alpha, torch.ones_like(conf) * (1 - self.alpha)) * torch.where(obj_mask, torch.ones_like(conf) - conf, conf) ** self.gamma\n            loss_conf   = torch.mean((self.BCELoss(conf, obj_mask.type_as(conf)) * ratio)[noobj_mask.bool() | obj_mask]) * self.focal_loss_ratio\n","AFTER":"        obj_mask    = y_true[..., 4] == 1\n        n           = torch.sum(obj_mask)\n        if n != 0:\n            #---------------------------------------------------------------#\n            #   计算预测结果和真实结果的差距\n            #   loss_loc ciou回归损失\n            #   loss_cls 分类损失\n            #---------------------------------------------------------------#\n            ciou        = self.box_ciou(pred_boxes, y_true[..., :4])\n            # loss_loc    = torch.mean((1 - ciou)[obj_mask] * box_loss_scale[obj_mask])\n            loss_loc    = torch.mean((1 - ciou)[obj_mask])\n            \n            loss_cls    = torch.mean(self.BCELoss(pred_cls[obj_mask], y_true[..., 5:][obj_mask]))\n            loss        += loss_loc * self.box_ratio + loss_cls * self.cls_ratio\n\n        #---------------------------------------------------------------#\n        #   计算是否包含物体的置信度损失\n        #---------------------------------------------------------------#\n        if self.focal_loss:\n            pos_neg_ratio   = torch.where(obj_mask, torch.ones_like(conf) * self.alpha, torch.ones_like(conf) * (1 - self.alpha)) \n            hard_easy_ratio = torch.where(obj_mask, torch.ones_like(conf) - conf, conf) ** self.gamma\n            loss_conf   = torch.mean((self.BCELoss(conf, obj_mask.type_as(conf)) * pos_neg_ratio * hard_easy_ratio)[noobj_mask.bool() | obj_mask]) * self.focal_loss_ratio\n"}