{"BEFORE":"            m = self.na * self.nx * self.ny\n            ngu = self.ng.repeat((1, m, 1))\n            grid_xy = self.grid_xy.repeat((1, self.na, 1, 1, 1)).view(1, m, 2)\n            anchor_wh = self.anchor_wh.repeat((1, 1, self.nx, self.ny, 1)).view(1, m, 2) \/ ngu\n\n            p = p.view(m, self.no)\n            xy = torch.sigmoid(p[:, 0:2]) + grid_xy[0]  # x, y\n            wh = torch.exp(p[:, 2:4]) * anchor_wh[0]  # width, height\n            p_cls = F.softmax(p[:, 5:self.no], 1) * torch.sigmoid(p[:, 4:5])  # SSD-like conf\n            return torch.cat((xy \/ ngu[0], wh, p_cls), 1).t()\n","AFTER":"            grid_xy = self.grid_xy.repeat((1, self.na, 1, 1, 1)).view(m, 2)\n            anchor_wh = self.anchor_wh.repeat((1, 1, self.nx, self.ny, 1)).view(m, 2) \/ self.ng\n\n            p = p.view(m, self.no)\n            xy = torch.sigmoid(p[:, 0:2]) + grid_xy  # x, y\n            wh = torch.exp(p[:, 2:4]) * anchor_wh  # width, height\n            p_cls = torch.sigmoid(p[:, 5:self.no]) * torch.sigmoid(p[:, 4:5])  # conf\n            return p_cls, xy \/ self.ng, wh\n"}