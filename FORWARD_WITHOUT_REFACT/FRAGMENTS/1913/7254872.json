{"BEFORE":"        print(x.shape)\n        print(x.dtype)\n        embed = self.embedding(x)  # [batch_size, seq_len, embeding]=[64, 32, 64]\n        out, _ = self.lstm(embed)\n        out = torch.cat((embed, out), 2)\n        out = F.relu(out)\n        out = out.permute(0, 2, 1)\n        out = self.maxpool(out).squeeze()\n        out = self.fc(out)\n","AFTER":"        out = torch.cat((embed, out), 2)\n        # print(out.shape) # [300,812]\n        fc_output = torch.tanh(self.fc(out))   # [batch_size, max_seq_len, hidden_size*2]\n\n        maxpool_input = fc_output.permute(0, 2, 1)  # [batch_size, hidden_size*2, max_seq_len]\n        maxpool_output = self.maxpool(maxpool_input).squeeze()   # [batch_size, hidden_size*2]\n\n        cls_input = self.dropout(maxpool_output)\n        out = self.classfier(cls_input)\n"}