{"BEFORE":"        self.num_dilations = len(dilations)\n\n        net = []\n        stacked_in_channels = []\n\n        for idx in range(self.num_dilations):\n            if len(stacked_in_channels) == 0:\n                stacked_in_channels.append(in_channels)\n                net.append(MultiDilatedConv2d(stacked_in_channels, num_features, kernel_size=kernel_size, dilations=dilations[:idx+1]))\n            else:\n                stacked_in_channels.append(num_features)\n                net.append(MultiDilatedConv2d(stacked_in_channels, num_features, kernel_size=kernel_size, dilations=dilations[:idx+1]))\n                num_features += num_features\n","AFTER":"        if type(out_channels) is int:\n            assert depth is not None, \"Specify `depth`\"\n            out_channels = [\n                out_channels for _ in range(depth)\n            ]\n        elif type(out_channels) is list:\n            depth = len(out_channels)\n        else:\n            raise ValueError(\"Not support out_channels={}\".format(out_channels))\n        self.depth = depth\n\n        net = []\n        num_features = []\n\n        for idx in range(self.depth):\n            if idx == 0:\n                num_features.append(in_channels)\n            else:\n                num_features.append(out_channels[idx-1])\n            net.append(MultiDilatedConv2d(num_features, out_channels[idx], kernel_size=kernel_size))\n"}