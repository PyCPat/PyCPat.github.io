{"BEFORE":"    def __init__(self, scale_factor, num_channels=1, d=56, s=12, m=4):\n        super(FSRCNN, self).__init__()\n        self.first_part = nn.Sequential(\n            nn.Conv2d(num_channels, d, kernel_size=5, padding=5 \/\/ 2),\n            nn.PReLU(d)\n        )\n        self.mid_part = [nn.Conv2d(d, s, kernel_size=1), nn.PReLU(s)]\n        for _ in range(m):\n            self.mid_part.extend(\n                [nn.Conv2d(s, s, kernel_size=3, padding=3 \/\/ 2), nn.PReLU(s)])\n        self.mid_part.extend([nn.Conv2d(s, d, kernel_size=1), nn.PReLU(d)])\n        self.mid_part = nn.Sequential(*self.mid_part)\n        self.last_part = nn.ConvTranspose2d(d, num_channels, kernel_size=9,\n                                            stride=scale_factor, padding=9 \/\/ 2,\n                                            output_padding=scale_factor - 1)\n\n        self._initialize_weights()\n","AFTER":"    def __init__(self, num_channels, scale_factor):\n        super(FSRCNN, self).__init__()\n\n        # Feature extraction\n        self.first_part = nn.Sequential(\n            nn.Conv2d(in_channels=num_channels, out_channels=64, kernel_size=5, stride=1, padding=2),\n            nn.PReLU())\n\n        self.mid_part = nn.Sequential(\n            nn.Conv2d(in_channels=64, out_channels=12, kernel_size=1, stride=1, padding=0),\n            nn.PReLU(),\n\n            nn.Conv2d(in_channels=12, out_channels=12, kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=12, out_channels=12, kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=12, out_channels=12, kernel_size=3, stride=1, padding=1),\n            nn.Conv2d(in_channels=12, out_channels=12, kernel_size=3, stride=1, padding=1),\n            nn.PReLU(),\n\n            nn.Conv2d(in_channels=12, out_channels=64, kernel_size=1, stride=1, padding=0),\n            nn.PReLU()\n        )\n"}