{"BEFORE":"        knots = theta[:, self.backcast_size:]\n\n        if self.interpolation_mode=='nearest':\n            knots = knots[:,None,:]\n            forecast = F.interpolate(knots, size=self.forecast_size, mode=self.interpolation_mode)\n            forecast = forecast[:,0,:]\n        elif self.interpolation_mode=='linear':\n            knots = knots[:,None,:]\n            forecast = F.interpolate(knots, size=self.forecast_size, mode=self.interpolation_mode)\n            forecast = forecast[:,0,:]\n        elif 'cubic' in self.interpolation_mode:\n            batch_size = len(backcast)\n            knots = knots[:,None,None,:]\n            forecast = torch.zeros((len(knots), self.forecast_size)).to(knots.device)\n            n_batches = int(np.ceil(len(knots)\/batch_size))\n            for i in range(n_batches):\n                forecast_i = F.interpolate(knots[i*batch_size:(i+1)*batch_size], size=self.forecast_size, mode='bicubic')\n                forecast[i*batch_size:(i+1)*batch_size] += forecast_i[:,0,0,:]\n\n        return backcast, forecast\n","AFTER":"        knots = theta[:, self.backcast_size:]\n\n        # Interpolation is performed on default dim=-1\n        knots = knots.reshape(len(knots), self.out_features, -1)\n        if self.interpolation_mode in ['nearest', 'linear']:\n            #knots = knots[:,None,:]\n            forecast = F.interpolate(knots, size=self.forecast_size, mode=self.interpolation_mode)\n            #forecast = forecast[:,0,:]\n        elif 'cubic' in self.interpolation_mode:\n            batch_size = len(backcast)\n            knots = knots[:,None,:,:]\n            forecast = torch.zeros((len(knots), self.forecast_size)).to(knots.device)\n            n_batches = int(np.ceil(len(knots)\/batch_size))\n            for i in range(n_batches):\n                forecast_i = F.interpolate(knots[i*batch_size:(i+1)*batch_size], \n                                           size=self.forecast_size, mode='bicubic')\n                forecast[i*batch_size:(i+1)*batch_size] += forecast_i[:,0,:,:]\n\n        # [B,Q,H] -> [B,H,Q]\n        forecast = forecast.permute(0, 2, 1)\n"}