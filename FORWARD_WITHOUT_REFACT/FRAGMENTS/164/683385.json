{"BEFORE":"        assert (depth - 2) % 9 == 0  # 164 or 1001\n        super(ResNet, self).__init__()\n        n = (depth - 2) \/ 9\n        nstages = [16, 64, 128, 256]\n        # one conv at the beginning (spatial size: 32x32)\n        self.conv1 = nn.Conv2d(3, nstages[0], kernel_size=3, stride=1,\n                               padding=1, bias=False)\n\n        # use `block` as unit to construct res-net\n        # Stage 0 (spatial size: 32x32)\n        self.layer1 = self._make_layer(block, nstages[0], nstages[1], n)\n        # Stage 1 (spatial size: 32x32)\n        self.layer2 = self._make_layer(block, nstages[1], nstages[2], n, stride=2)\n        # Stage 2 (spatial size: 16x16)\n        self.layer3 = self._make_layer(block, nstages[2], nstages[3], n, stride=2)\n        # Stage 3 (spatial size: 8x8)\n        self.bn = nn.BatchNorm2d(nstages[3])\n        self.relu = nn.ReLU(inplace=True)\n        # classifier\n        self.avgpool = nn.AvgPool2d(8)\n        self.fc = nn.Linear(nstages[3], output_classes)\n\n        # weight initialization\n        self._init_weights()\n","AFTER":"        super(ResNet_Cifar, self).__init__()\n        self.inplanes = 16\n        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False)\n        self.bn1 = nn.BatchNorm2d(16)\n        self.relu = nn.ReLU(inplace=True)\n        self.layer1 = self._make_layer(block, 16, layers[0])\n        self.layer2 = self._make_layer(block, 32, layers[1], stride=2)\n        self.layer3 = self._make_layer(block, 64, layers[2], stride=2)\n        self.avgpool = nn.AvgPool2d(8, stride=1)\n        self.fc = nn.Linear(64 * block.expansion, num_classes)\n\n        for m in self.modules():\n            if isinstance(m, nn.Conv2d):\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\n                m.weight.data.normal_(0, math.sqrt(2. \/ n))\n            elif isinstance(m, nn.BatchNorm2d):\n                m.weight.data.fill_(1)\n                m.bias.data.zero_()\n\n    def _make_layer(self, block, planes, blocks, stride=1):\n"}