{"BEFORE":"        n = [len(b) for b in bh]\n\n        bx_h = [b[h] for b, h in zip(boxes, bh)]\n        bx_o = [b[o] for b, o in zip(boxes, bo)]\n\n        bx_h_post, bx_o_post = self.box_pair_coder.decode(torch.cat(bx_h), torch.cat(bx_o), bbox_deltas)\n        bx_h_post = bx_h_post.split(n); bx_o_post = bx_o_post.split(n)\n\n        indices = self.matcher(bx_h_post, bx_o_post, objects, prior, logits, targets)\n\n        loss_dict = {\"focal_loss\": self.interaction_loss(n, indices, prior, logits, targets)}\n        loss_dict.update(self.regression_loss(\n            bx_h, bx_o, bx_h_post, bx_o_post, indices, targets, bbox_deltas.split(n)\n        ))\n","AFTER":"        bx_h = [b[h] for b, h in zip(boxes, bh)]\n        bx_o = [b[o] for b, o in zip(boxes, bo)]\n\n        # bx_h_post, bx_o_post = self.box_pair_coder.decode(torch.cat(bx_h), torch.cat(bx_o), bbox_deltas)\n        # bx_h_post = bx_h_post.split(n); bx_o_post = bx_o_post.split(n)\n\n        indices = self.matcher(bx_h, bx_o, objects, prior, logits, targets)\n\n        loss_dict = {\"focal_loss\": self.focal_loss(bx_h, bx_o, indices, prior, logits, targets)}\n"}