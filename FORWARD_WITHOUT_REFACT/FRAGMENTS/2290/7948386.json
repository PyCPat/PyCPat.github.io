{"BEFORE":"    def forward(self, x, arg_route = (True, True), **kwargs):\n        blocks = self.blocks\n\n        if self.training and self.layer_dropout > 0:\n            to_drop = torch.empty(len(self.blocks)).uniform_(0, 1) < self.layer_dropout\n            blocks = [block for block, drop in zip(self.blocks, to_drop) if not drop]\n            blocks = self.blocks[:1] if len(blocks) == 0 else blocks\n\n        f_args, g_args = map(lambda route: kwargs if route else {}, arg_route)\n        block_kwargs = {'f_args': f_args, 'g_args': g_args}        \n","AFTER":"        block_args = route_args(self.args_route, kwargs, len(self.blocks))\n\n        if self.training and self.layer_dropout > 0:\n            to_drop = torch.empty(len(self.blocks)).uniform_(0, 1) < self.layer_dropout\n            blocks = [block for block, drop in zip(self.blocks, to_drop) if not drop]\n            blocks = self.blocks[:1] if len(blocks) == 0 else blocks\n\n        block_args = list(map(lambda x: {'f_args': x[0], 'g_args': x[1]}, block_args))\n"}