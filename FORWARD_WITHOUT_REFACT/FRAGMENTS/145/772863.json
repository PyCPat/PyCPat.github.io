{"BEFORE":"        content_out = einsum('bhde,bhdn->bhen', context, content_q)\n        content_out = content_out.reshape(b, -1, x, y)\n        content_out = self.to_out(content_out)\n\n        # todo: compute relative position attentions and sum to content_out\n\n        if exists(self.rel_pos_length):\n            row_attn_map = einsum('bhdn,ld->bhnl', q, self.rel_rows)\n            column_attn_map = einsum('bhdn,ld->bhnl', q, self.rel_columns)\n\n        return content_out\n","AFTER":"        b, c, x, y, h, c_out, L, device = *img.shape, self.heads, self.dim_out, self.rel_pos_length, img.device\n\n        qkv = self.to_qkv(img).chunk(3, dim = 1)\n        q, k, v = map(lambda t: rearrange(t, 'b (h c) x y -> (b h) c x y', h = h), qkv)\n\n        k = k.softmax(dim = -1)\n        context = einsum('ndxy,nexy->nde', k, v)\n\n        content_q = q if not self.norm_queries else q.softmax(dim=-2)\n\n        content_out = einsum('nde,ndxy->nexy', context, content_q)\n\n        if exists(self.rel_pos_length):\n            Ix = calc_reindexing_tensor(x, L, device)\n            Px = einsum('xir,rd->xid', Ix, self.rel_rows)\n            Sx = einsum('ndxy,xid->nixy', q, Px)\n            Yh = einsum('nixy,neiy->nexy', Sx, v)\n            del Ix\n\n            Yh = self.norm(Yh)\n\n            Iy = calc_reindexing_tensor(y, L, device)\n            Py = einsum('xir,rd->xid', Iy, self.rel_columns)\n            Sy = einsum('ndxy,xid->nixy', q, Py)\n            rel_pos_out = einsum('nixy,neiy->nexy', Sy, Yh)\n            del Iy\n\n            content_out = content_out + rel_pos_out\n\n        content_out = rearrange(content_out, '(b h) c x y -> b (h c) x y', b = b, h = h)\n        return self.to_out(content_out)\n"}