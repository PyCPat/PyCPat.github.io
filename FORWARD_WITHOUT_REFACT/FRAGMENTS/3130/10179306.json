{"BEFORE":"        log_std = self.std_clamp(log_std)\n\n        return mean, log_std\n","AFTER":"    def forward(self, state, deterministic=True):\n        x = state\n        for operator in self.operators:\n            x = operator(x)\n\n        mean, log_std = torch.split(x, x.shape[1] \/\/ 2, dim=1)\n\n        if deterministic:\n            action = mean\n            std = torch.zeros_like(log_std)\n        else:\n            # todo: is clamp really necessary?\n            log_std = self.std_clamp(log_std)\n            std = log_std.exp()\n            m = MultivariateNormal(mean.reshape(-1), torch.diag(std.reshape(-1)))\n            action = m.sample()\n            action = action.reshape(mean.shape)\n\n        action = action.tanh()\n\n        return action, std\n"}