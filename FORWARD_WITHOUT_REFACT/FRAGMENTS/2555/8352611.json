{"BEFORE":"        batch, device = x.shape[0], x.device\n\n        # Sample amount of noise to add for each batch element\n        sigmas = self.sigma_distribution(num_samples=batch, device=device)\n        sigmas_padded = rearrange(sigmas, \"b -> b 1 1\")\n\n        # Add noise to input\n        noise = default(noise, lambda: torch.randn_like(x))\n        x_noisy = x + sigmas_padded * noise\n\n        # Compute denoised values\n        x_denoised = self.denoise_fn(x_noisy, sigmas=sigmas, **kwargs)\n\n        # Compute weighted loss\n        losses = F.mse_loss(x_denoised, x, reduction=\"none\")\n        losses = reduce(losses, \"b ... -> b\", \"mean\")\n        losses = losses * self.loss_weight(sigmas)\n        loss = losses.mean()\n\n        return loss\n","AFTER":"        raise NotImplementedError(\"Diffusion class missing forward function\")\n"}