{"BEFORE":"        batchsize = x.shape[0]\n\n        # Fourier transform in the space dimension\n        # Compute Fourier coeffcients up to factor of e^(- something constant)\n        # x_ft's final dimension represent complex coefficients\n        # The Fourier modes are sorted from lowest frequency to highest.\n        x_ft = torch.rfft(x, 1, normalized=True, onesided=True)\n        # x_ft.shape == [batch_size, n_features == 2, n_steps \/\/ 2 + 1, 2]\n\n        # Step 1: Zero out all modes less than top k\n        out_ft = torch.zeros(batchsize, self.in_channels,\n                             x.size(-1)\/\/2 + 1, 2, device=x.device)\n        # out_ft.shape == x_ft.shape\n\n        # Multiply relevant Fourier modes\n        # For the most important modes, we multiply them by\n        out_ft[:, :, :self.modes1] = compl_mul1d(\n            x_ft[:, :, :self.modes1], self.weights1)\n\n        # Return to physical space\n        x = torch.irfft(out_ft, 1, normalized=True,\n                        onesided=True, signal_sizes=(x.size(-1), ))\n","AFTER":"        B, I, N = x.shape\n\n        # Fourier transform in the space dimension\n        # Compute Fourier coeffcients up to factor of e^(- something constant)\n        # x_ft's final dimension represent complex coefficients\n        # The Fourier modes are sorted from lowest frequency to highest.\n        x_ft = torch.fft.rfft(x, n=N, dim=-1, norm='ortho')\n        # x_ft.shape == [batch_size, in_dim, n_steps \/\/ 2 + 1]\n\n        x_ft = torch.stack([x_ft.real, x_ft.imag], dim=3)\n        # x_ft.shape == [batch_size, in_dim, n_steps \/\/ 2 + 1, 2]\n\n        # Step 1: Zero out all modes less than top k\n        out_ft = torch.zeros(B, I, N \/\/ 2 + 1, 2, device=x.device)\n        # out_ft.shape == [batch_size, in_dim, n_steps \/\/ 2 + 1, 2]\n\n        # Multiply relevant Fourier modes\n        out_ft[:, :, :self.n_modes] = self.complex_matmul_1d(\n            x_ft[:, :, :self.n_modes], self.fourier_weight)\n\n        out_ft = torch.complex(out_ft[..., 0], out_ft[..., 1])\n\n        x = torch.fft.irfft(out_ft, n=N, dim=-1, norm='ortho')\n"}