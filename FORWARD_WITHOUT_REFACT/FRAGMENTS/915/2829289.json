{"BEFORE":"        target_ball_local = torch.zeros_like(pred_ball_global)\n        target_events = torch.zeros((batch_size, 2), device=self.device)\n        for idx in range(batch_size):\n            target_ball_global[idx] = create_target_ball(global_ball_pos_xy[idx], sigma=1., w=self.w, h=self.h, thresh_mask=0.01, device=self.device)\n            target_ball_local[idx] = create_target_ball(local_ball_pos_xy[idx], sigma=1., w=self.w, h=self.h, thresh_mask=0.01, device=self.device)\n            target_events[idx] = create_target_events(event_class[idx], device=self.device)\n\n        global_ball_loss = self.ball_loss_criterion(pred_ball_global, target_ball_global)\n        local_ball_loss = self.ball_loss_criterion(pred_ball_local, target_ball_local)\n        event_loss = self.event_loss_criterion(pred_events, target_events)\n        seg_loss = self.seg_loss_criterion(pred_seg, target_seg)\n\n        total_loss = global_ball_loss \/ (torch.exp(self.log_vars[0])) + self.log_vars[0]\n        total_loss += local_ball_loss \/ (torch.exp(self.log_vars[1])) + self.log_vars[1]\n        total_loss += event_loss \/ (torch.exp(self.log_vars[2])) + self.log_vars[2]\n        total_loss += seg_loss \/ (torch.exp(self.log_vars[3])) + self.log_vars[3]\n","AFTER":"        log_vars_idx = 0\n        pred_ball_global, pred_ball_local, pred_events, pred_seg, local_ball_pos_xy = self.model(original_batch_input,\n                                                                                                 resize_batch_input,\n                                                                                                 org_ball_pos_xy)\n        # Create target for events spotting and ball position (local and global)\n        batch_size = pred_ball_global.size(0)\n        target_ball_global = torch.zeros_like(pred_ball_global)\n        for sample_idx in range(batch_size):\n            target_ball_global[sample_idx] = create_target_ball(global_ball_pos_xy[sample_idx], sigma=1., w=self.w,\n                                                                h=self.h, thresh_mask=0.01, device=self.device)\n        global_ball_loss = self.ball_loss_criterion(pred_ball_global, target_ball_global)\n        total_loss = global_ball_loss \/ (torch.exp(self.log_vars[log_vars_idx])) + self.log_vars[log_vars_idx]\n\n        if pred_ball_local is not None:\n            log_vars_idx += 1\n            target_ball_local = torch.zeros_like(pred_ball_local)\n            for sample_idx in range(batch_size):\n                target_ball_local[sample_idx] = create_target_ball(local_ball_pos_xy[sample_idx], sigma=1., w=self.w,\n                                                                   h=self.h, thresh_mask=0.01, device=self.device)\n            local_ball_loss = self.ball_loss_criterion(pred_ball_local, target_ball_local)\n            total_loss += local_ball_loss \/ (torch.exp(self.log_vars[log_vars_idx])) + self.log_vars[log_vars_idx]\n\n        if pred_events is not None:\n            log_vars_idx += 1\n            target_events = torch.zeros((batch_size, 2), device=self.device)\n            for sample_idx in range(batch_size):\n                target_events[sample_idx] = create_target_events(event_class[sample_idx], device=self.device)\n            event_loss = self.event_loss_criterion(pred_events, target_events)\n            total_loss += event_loss \/ (torch.exp(self.log_vars[log_vars_idx])) + self.log_vars[log_vars_idx]\n\n        if pred_seg is not None:\n            log_vars_idx += 1\n            seg_loss = self.seg_loss_criterion(pred_seg, target_seg)\n            total_loss += seg_loss \/ (torch.exp(self.log_vars[log_vars_idx])) + self.log_vars[log_vars_idx]\n\n        # Final weights: [math.exp(log_var) ** 0.5 for log_var in log_vars]\n\n        return pred_ball_global, pred_ball_local, pred_events, pred_seg, local_ball_pos_xy, total_loss, self.log_vars.data.tolist()\n"}