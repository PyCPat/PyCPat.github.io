{"BEFORE":"        atten_lim: Optional[Tensor] = None,\n    ) -> Tuple[Tensor, Tensor, Tensor, Tensor]:\n        # feat_erb = torch.view_as_complex(spec).abs().matmul(self.erb_fb)\n        # ic(self.erb_comp.c, self.erb_comp.mn)\n        # ic(self.cplx_comp.c)\n        feat_erb = torch.view_as_complex(spec).abs().matmul(self.erb_fb)\n        feat_erb = self.erb_comp(feat_erb)\n        # feat_spec = self.cplx_comp(spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2))\n        # e0, e1, e2, e3, emb, c0, lsnr = self.enc(feat_erb, feat_spec)\n        # m = self.erb_dec(emb, e3, e2, e1, e0)\n        m, emb, _ = self.erb_stage(feat_erb)\n        lsnr, _ = self.lsnr_net(emb)\n        emb = emb.permute(0, 2, 3, 1).flatten(2)\n        spec = self.mask(spec, m, atten_lim)\n        feat_spec = self.cplx_comp(spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2))\n        df_alpha = None\n        if self.run_df:\n            # df_coefs, df_alpha = self.df_dec(feat_spec, emb)\n            # spec = self.df_op(spec, df_coefs, df_alpha)\n            # ic(df_coefs.shape, spec.shape)\n            df_coefs, _, _ = self.df_stage(feat_spec)\n            df_coefs = df_coefs.unflatten(1, (self.df_order, 2)).permute(0, 3, 1, 4, 2)\n            spec = self.df_op(spec, df_coefs, df_alpha)\n        return spec, m, lsnr, df_alpha\n","AFTER":"        feat_spec = feat_spec.squeeze(1).permute(0, 3, 1, 2)\n\n        # ic(self.erb_comp.c, self.erb_comp.mn)\n        # feat_erb = torch.view_as_complex(spec).abs().matmul(self.erb_fb)\n        # feat_erb = self.erb_comp(feat_erb)\n\n        feat_erb = self.pad(feat_erb)\n        feat_spec = self.pad(feat_spec)\n        e0, e1, e2, e3, emb, c0, lsnr = self.enc(feat_erb, feat_spec)\n        m = self.erb_dec(emb, e3, e2, e1, e0)\n\n        # m, emb, _ = self.erb_stage(feat_erb)\n        # emb = emb.permute(0, 2, 3, 1).flatten(2)\n        # lsnr = emb.mean(-1)\n        # lsnr, _ = self.lsnr_net(emb)\n\n        spec = self.mask(spec, m)\n        # feat_spec = self.cplx_comp(spec.squeeze(1)[:, :, : self.df_bins].permute(0, 3, 1, 2))\n        # ic(feat_spec.shape)\n        df_coefs, df_alpha = self.df_dec(feat_spec, emb)\n        spec = self.df_op(spec, df_coefs, df_alpha)\n        # ic(df_coefs.shape, spec.shape)\n\n        # df_coefs, _, _ = self.df_stage(feat_spec)\n        # df_coefs = df_coefs.unflatten(1, (self.df_order, 2)).permute(0, 3, 1, 4, 2)\n\n        spec = self.df_op(spec, df_coefs, df_alpha)\n"}