{"BEFORE":"        return x\n","AFTER":"    def forward(self, feats, coors):\n        b, n, _, v, c = *feats.shape, *coors.shape\n\n        assert c == 3 and v == self.dim_v, 'coordinates have wrong dimensions'\n        assert n == self.dim_n, 'scalar features have wrong dimensions'\n\n        Vh = einsum('b v c, v h -> b h c', coors, self.Wh)\n        Vu = einsum('b h c, h u -> b u c', Vh, self.Wu)\n\n        sh = torch.norm(Vh, p = 2, dim = -1)\n        vu = torch.norm(Vu, p = 2, dim = -1, keepdim = True)\n\n        s = torch.cat((feats, sh), dim = 1)\n        sm = einsum('b h, h m -> b m', s, self.Wm) + self.Bm\n\n        feats_out = self.σ(sm)\n        coors_out = self.σ_plus(vu) * Vu\n\n        return feats_out, coors_out\n"}