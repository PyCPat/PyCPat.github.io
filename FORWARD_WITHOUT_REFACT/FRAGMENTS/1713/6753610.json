{"BEFORE":"    def forward(self, x: Tensor, h: Optional[Tensor] = None) -> Tuple[Tensor, Tensor, Tensor]:\n        # input shape: [B, C, T, F]\n        intermediate = []\n        for enc_layer in self.enc:\n            x = enc_layer(x)\n            intermediate.append(x)\n        x_rnn, h = self.rnn(x, h)\n        for dec_layer, x_enc in zip(self.dec, reversed(intermediate)):\n            x = dec_layer(x + x_enc)\n        return x, x_rnn, h\n","AFTER":"    def forward(self, x: Tensor, h=None) -> Tuple[Tensor, Tensor, List[Tensor]]:\n        # input shape: [B, C, T, F]\n        # x_rnn, h = self.rnn(x, h)\n        x_inner, intermediate, h = self.encode(x, h)\n        x = self.decode(x_inner, intermediate)\n        return x, x_inner, h\n"}