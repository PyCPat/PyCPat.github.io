{"BEFORE":"        for m in self.modules():\n            if isinstance(m, nn.Conv3d):\n                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n            elif isinstance(m, nn.BatchNorm3d):\n                nn.init.constant_(m.weight, 1)\n                nn.init.constant_(m.bias, 0)\n\n    def _downsample_basic_block(self, x, planes, stride):\n","AFTER":"        init_weights=True,\n    ):\n        super().__init__()\n\n        block_inplanes = [int(x * widen_factor) for x in block_inplanes]\n\n        self.in_planes = block_inplanes[0]\n        self.no_max_pool = no_max_pool\n\n        self.conv1 = nn.Conv3d(\n            n_input_channels,\n            self.in_planes,\n            kernel_size=(conv1_t_size, 7, 7),\n            stride=(conv1_t_stride, 2, 2),\n            padding=(conv1_t_size \/\/ 2, 3, 3),\n            bias=False\n        )\n        self.bn1 = nn.BatchNorm3d(self.in_planes)\n        self.relu = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool3d(kernel_size=3, stride=2, padding=1)\n        self.layer1 = self._make_layer(block, block_inplanes[0], layers[0], shortcut_type)\n        self.layer2 = self._make_layer(block, block_inplanes[1], layers[1], shortcut_type, stride=2)\n        self.layer3 = self._make_layer(block, block_inplanes[2], layers[2], shortcut_type, stride=2)\n        self.layer4 = self._make_layer(block, block_inplanes[3], layers[3], shortcut_type, stride=2)\n\n        self.avgpool = nn.AdaptiveAvgPool3d((1, 1, 1))\n        self.fc = nn.Linear(block_inplanes[3] * block.expansion, n_classes)\n\n        if init_weights:\n            initialize_weights(self)\n        # for m in self.modules():\n        #     if isinstance(m, nn.Conv3d):\n        #         nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        #     elif isinstance(m, nn.BatchNorm3d):\n        #         nn.init.constant_(m.weight, 1)\n        #         nn.init.constant_(m.bias, 0)\n\n    def _downsample_basic_block(self, x, planes, stride):\n"}