{"BEFORE":"        out = (btrace(iAup@Bup) + btrace(iAdown@Bdown))\n\n        # multiply by det if necessary\n        if not return_local_energy:\n            pd = torch.det(Aup) * torch.det(Adown)\n            out *= pd\n\n        return -0.5*out.view(-1, self.nconfs)\n","AFTER":"        iAup = torch.inverse(Aup)\n        iAdown = torch.inverse(Adown)\n        print(iAup.shape)\n        print(Bup.shape)\n\n        # product\n        out = (btrace(iAup@Bup) + btrace(iAdown@Bdown))\n        print(out.shape)\n\n        # multiply by det if necessary\n        if not return_local_energy:\n            pd = torch.det(Aup) * torch.det(Adown)\n            out *= pd\n\n        return -0.5*out.transpose(0, 1)\n"}