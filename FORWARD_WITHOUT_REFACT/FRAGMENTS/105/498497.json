{"BEFORE":"    def forward(self, preds: Tensor, labels: Tensor) -> Tensor:\n        # preds in shape [B, C, H, W] and labels in shape [B, H, W]\n        if preds.shape[2:] != labels.shape[1:]:\n            preds = F.interpolate(preds, size=labels.shape[1:], mode='bilinear', align_corners=False)\n\n        n_min = labels[labels != self.ignore_label].numel() \/\/ 16\n        loss = self.criterion(preds, labels).view(-1)\n        loss_hard = loss[loss > self.thresh]\n\n        if loss_hard.numel() < n_min:\n            loss_hard, _ = loss.topk(n_min)\n\n        return torch.mean(loss_hard)\n","AFTER":"    def forward(self, preds, labels: Tensor) -> Tensor:\n        if isinstance(preds, list):\n            return sum([w * self._forward(pred, labels) for (pred, w) in zip(preds, self.aux_weights)])\n        return self._forward(preds, labels)\n"}