{"BEFORE":"        RBF = self.RBF(Filter)\r\n        RBFs = torch.split(RBF[:, :self.RBF_num * (3 * self.RBFs * 2), :, :], 3 * self.RBFs * 2, dim = 1)\r\n        RBF_bs = torch.split(RBF[:, self.RBF_num * (3 * self.RBFs * 2):, :, :], 3, dim = 1)\r\n\r\n        SB = S\r\n        for i in range(self.RBF_num):\r\n            RBF1, RBF2 = torch.split(RBFs[i], 3 * self.RBFs, dim = 1)\r\n            SB = SAC(feat_in=SB, kernel1=RBF1, kernel2=RBF2, ksize=self.RBFs) ## image\r\n            SB = SB + RBF_bs[i]\r\n            if i < (self.RBF_num - 1):\r\n                SB = Func.leaky_relu(SB, 0.1, inplace=True)\r\n        SB = SB + S\r\n","AFTER":"        SB = S\r\n\r\n        ## for reblurring\r\n        RBF = self.RBF(Filter)\r\n\r\n        SB = IAC(SB, RBF, self.RBF_num, 3, self.RBFs, is_act_last = False)\r\n"}