{"BEFORE":"        z = self.encoder(x)\n        mean, scale = z.chunk(2, 1)\n        std = nn.functional.softplus(scale) + 1e-4\n        var = std * std\n        logvar = torch.log(var)\n\n        z = torch.randn_like(mean) * std + mean\n\n        kl = (mean * mean + var - logvar - 1).sum(1).mean()\n\n        return z, kl\n","AFTER":"        z = self.encoder(x)\n        return z\n"}