{"BEFORE":"        b, c, h, w = x.shape\n        qkv = self.to_qkv(x).chunk(3, dim = 1)\n        q, k, v = map(lambda t: rearrange(t, 'b (h c) x y -> b h c (x y)', h = self.heads), qkv)\n\n        q = q.softmax(dim = -2)\n        k = k.softmax(dim = -1)\n\n        q = q * self.scale\n\n        context = torch.einsum('b h d n, b h e n -> b h d e', k, v)\n\n        out = torch.einsum('b h d e, b h d n -> b h e n', context, q)\n        out = rearrange(out, 'b h c (x y) -> b (h c) x y', h = self.heads, x = h, y = w)\n","AFTER":"        time = None\n    ):\n        h = self.heads\n        x = self.norm(x)\n\n        if exists(self.time_cond):\n            assert exists(time)\n            scale, shift = self.time_cond(time).chunk(2, dim = -1)\n            x = (x * (scale + 1)) + shift\n\n        qkv = self.to_qkv(x).chunk(3, dim = -1)\n        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = h), qkv)\n\n        q = q.softmax(dim = -1)\n        k = k.softmax(dim = -2)\n\n        q = q * self.scale\n\n        context = torch.einsum('b h n d, b h n e -> b h d e', k, v)\n\n        out = torch.einsum('b h d e, b h n d -> b h n e', context, q)\n        out = rearrange(out, 'b h n d -> b n (h d)')\n"}