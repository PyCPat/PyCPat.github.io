{"BEFORE":"        pass\n","AFTER":"        alpha = torch.minimum(self.alpha, torch.ones_like(self.alpha))\n        root = torch.maximum(self.root, torch.ones_like(self.root))\n\n        ema_smoother = self.ema(x, x[:,:,0])\n        one_over_root = 1. \/ root\n        output = (x.permute(0,2,1) \/ (self._floor + ema_smoother) ** alpha + self.delta)\\\n                ** one_over_root - self.delta ** one_over_root\n        return output.permute(0,2,1)\n"}