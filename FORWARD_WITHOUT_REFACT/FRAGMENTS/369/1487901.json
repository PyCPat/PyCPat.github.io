{"BEFORE":"        grid = self.get_grid([u.shape[0], self.s1, self.s2], u.device).permute(0, 3, 1, 2)\n\n        u = self.fc0(u)\n        u = u.permute(0, 2, 1)\n\n        uc1 = self.conv0(u, x_in=x_in, iphi=iphi, code=code)\n        uc3 = self.b0(grid)\n        uc = uc1 + uc3\n        uc = F.gelu(uc)\n\n        uc1 = self.conv1(uc)\n        uc2 = self.w1(uc)\n        uc3 = self.b1(grid)\n        uc = uc1 + uc2 + uc3\n        uc = F.gelu(uc)\n\n        uc1 = self.conv2(uc)\n        uc2 = self.w2(uc)\n        uc3 = self.b2(grid)\n        uc = uc1 + uc2 + uc3\n        uc = F.gelu(uc)\n\n        uc1 = self.conv3(uc)\n        uc2 = self.w3(uc)\n        uc3 = self.b3(grid)\n        uc = uc1 + uc2 + uc3\n        uc = F.gelu(uc)\n\n        u = self.conv4(uc, x_out=x_out, iphi=iphi, code=code)\n        u3 = self.b4(x_out.permute(0, 2, 1))\n","AFTER":"        grid = self.get_grid([u.shape[0], self.s1, self.s2], u.device).permute(0, 3, 1, 2)\n\n        # Projection to higher dimension\n        u = self.fc0(u)\n        u = u.permute(0, 2, 1)\n\n\n        uc1 = self.convs[0](u, x_in=x_in, iphi=iphi, code=code)\n        uc3 = self.bs[0](grid)\n        uc = uc1 + uc3\n        uc = F.gelu(uc)\n\n        for i in range(1, self.n_layers):\n            uc1 = self.convs[i](uc)\n            uc2 = self.ws[i-1](uc)\n            uc3 = self.bs[i](grid)\n            uc = uc1 + uc2 + uc3\n            uc = F.gelu(uc)\n\n        L = self.n_layers\n        u = self.convs[L](uc, x_out=x_out, iphi=iphi, code=code)\n        u3 = self.bs[L](x_out.permute(0, 2, 1))\n"}