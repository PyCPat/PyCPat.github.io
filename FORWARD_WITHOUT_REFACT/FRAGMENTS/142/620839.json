{"BEFORE":"        self.num_features = 2048\n        self.conv5 = SeparableConv2d(\n            1536, self.num_features, 3, stride=1, dilation=exit_block_dilations[1],\n            norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.bn5 = norm_layer(num_features=self.num_features, **norm_kwargs)\n        self.act5 = nn.ReLU(inplace=True)\n        self.feature_info = [\n            dict(num_chs=64, reduction=2, module='act2'),\n            dict(num_chs=128, reduction=4, module='block1_act'),\n            dict(num_chs=256, reduction=8, module='block3.rep.act1'),\n            dict(num_chs=728, reduction=16, module='block20.rep.act1'),\n            dict(num_chs=2048, reduction=32, module='act5'),\n        ]\n\n        self.global_pool = SelectAdaptivePool2d(pool_type=global_pool)\n        self.fc = nn.Linear(self.num_features * self.global_pool.feat_mult(), num_classes)\n","AFTER":"        self.num_classes = num_classes\n        self.drop_rate = drop_rate\n        norm_kwargs = norm_kwargs if norm_kwargs is not None else {}\n        if output_stride == 32:\n            entry_block3_stride = 2\n            exit_block20_stride = 2\n            middle_block_dilation = 1\n            exit_block_dilations = (1, 1)\n        elif output_stride == 16:\n            entry_block3_stride = 2\n            exit_block20_stride = 1\n            middle_block_dilation = 1\n            exit_block_dilations = (1, 2)\n        elif output_stride == 8:\n            entry_block3_stride = 1\n            exit_block20_stride = 1\n            middle_block_dilation = 2\n            exit_block_dilations = (2, 4)\n        else:\n            raise NotImplementedError\n\n        # Entry flow\n        self.conv1 = nn.Conv2d(in_chans, 32, kernel_size=3, stride=2, padding=1, bias=False)\n        self.bn1 = norm_layer(num_features=32, **norm_kwargs)\n        self.act1 = nn.ReLU(inplace=True)\n\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1, bias=False)\n        self.bn2 = norm_layer(num_features=64)\n        self.act2 = nn.ReLU(inplace=True)\n\n        self.block1 = Block(\n            64, 128, stride=2, start_with_relu=False, norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.block1_act = nn.ReLU(inplace=True)\n        self.block2 = Block(\n            128, 256, stride=2, start_with_relu=False, norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.block3 = Block(\n            256, 728, stride=entry_block3_stride, norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n\n        # Middle flow\n        self.mid = nn.Sequential(OrderedDict([('block%d' % i, Block(\n            728, 728, stride=1, dilation=middle_block_dilation,\n            norm_layer=norm_layer, norm_kwargs=norm_kwargs)) for i in range(4, 20)]))\n\n        # Exit flow\n        self.block20 = Block(\n            728, (728, 1024, 1024), stride=exit_block20_stride, dilation=exit_block_dilations[0],\n            norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.block20_act = nn.ReLU(inplace=True)\n\n        self.conv3 = SeparableConv2d(\n            1024, 1536, 3, stride=1, dilation=exit_block_dilations[1],\n            norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.bn3 = norm_layer(num_features=1536, **norm_kwargs)\n        self.act3 = nn.ReLU(inplace=True)\n\n        self.conv4 = SeparableConv2d(\n            1536, 1536, 3, stride=1, dilation=exit_block_dilations[1],\n            norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.bn4 = norm_layer(num_features=1536, **norm_kwargs)\n        self.act4 = nn.ReLU(inplace=True)\n\n        self.num_features = 2048\n        self.conv5 = SeparableConv2d(\n            1536, self.num_features, 3, stride=1, dilation=exit_block_dilations[1],\n            norm_layer=norm_layer, norm_kwargs=norm_kwargs)\n        self.bn5 = norm_layer(num_features=self.num_features, **norm_kwargs)\n        self.act5 = nn.ReLU(inplace=True)\n        self.feature_info = [\n            dict(num_chs=64, reduction=2, module='act2'),\n            dict(num_chs=128, reduction=4, module='block1_act'),\n            dict(num_chs=256, reduction=8, module='block3.rep.act1'),\n            dict(num_chs=728, reduction=16, module='block20.rep.act1'),\n            dict(num_chs=2048, reduction=32, module='act5'),\n        ]\n\n        self.global_pool, self.fc = create_classifier(self.num_features, self.num_classes, pool_type=global_pool)\n"}