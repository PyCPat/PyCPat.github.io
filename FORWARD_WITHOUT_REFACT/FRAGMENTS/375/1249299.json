{"BEFORE":"        resnet = ResNetGenerator(name=name, width=width)\n        last_conv_channels = list(resnet.children())[-1].in_features\n\n        self.features = nn.Sequential(\n            nn.BatchNorm2d(3),\n            *list(resnet.children())[:-1],\n            nn.Conv2d(last_conv_channels, num_ftrs, 1),\n            nn.AdaptiveAvgPool2d(1)\n        )\n\n        self.projection_head = nn.Sequential(\n            nn.Linear(num_ftrs, num_ftrs),\n            nn.ReLU(),\n            nn.Linear(num_ftrs, out_dim)\n        )\n\n        self.key_features = nn.Sequential(\n            nn.BatchNorm2d(3),\n            *list(resnet.children())[:-1],\n            nn.Conv2d(last_conv_channels, num_ftrs, 1),\n            nn.AdaptiveAvgPool2d(1)\n        )\n\n        self.key_projection_head = nn.Sequential(\n            nn.Linear(num_ftrs, num_ftrs),\n            nn.ReLU(),\n            nn.Linear(num_ftrs, out_dim)\n        )\n","AFTER":"        self.num_ftrs = num_ftrs\n        self.out_dim = out_dim\n        self.m = m\n\n        super(ResNetMoCo, self).__init__()\n        resnet = ResNetGenerator(name=name, width=width)\n\n        self.features, self.projection_head = \\\n            _get_features_and_projections(resnet, self.num_ftrs, self.out_dim)\n\n        self.key_features, self.key_projection_head = \\\n            _get_features_and_projections(resnet, self.num_ftrs, self.out_dim)\n"}